<CSharpFormattingPolicy scope="text/x-csharp" allowDiffSerialize="True">
	<IndentNamespaceBody>True</IndentNamespaceBody>
	<IndentClassBody>True</IndentClassBody>
	<IndentInterfaceBody>True</IndentInterfaceBody>
	<IndentStructBody>True</IndentStructBody>
	<IndentEnumBody>True</IndentEnumBody>
	<IndentMethodBody>True</IndentMethodBody>
	<IndentPropertyBody>True</IndentPropertyBody>
	<IndentEventBody>True</IndentEventBody>
	<IndentBlocks>True</IndentBlocks>
	<IndentSwitchBody>False</IndentSwitchBody>
	<IndentCaseBody>True</IndentCaseBody>
	<IndentBreakStatements>True</IndentBreakStatements>
	<NamespaceBraceStyle>NextLine</NamespaceBraceStyle>
	<ClassBraceStyle>NextLine</ClassBraceStyle>
	<InterfaceBraceStyle>NextLine</InterfaceBraceStyle>
	<StructBraceStyle>NextLine</StructBraceStyle>
	<EnumBraceStyle>NextLine</EnumBraceStyle>
	<MethodBraceStyle>NextLine</MethodBraceStyle>
	<ConstructorBraceStyle>NextLine</ConstructorBraceStyle>
	<DestructorBraceStyle>NextLine</DestructorBraceStyle>
	<PropertyBraceStyle>EndOfLine</PropertyBraceStyle>
	<PropertyGetBraceStyle>EndOfLine</PropertyGetBraceStyle>
	<PropertySetBraceStyle>EndOfLine</PropertySetBraceStyle>
	<AllowPropertyGetBlockInline>True</AllowPropertyGetBlockInline>
	<AllowPropertySetBlockInline>True</AllowPropertySetBlockInline>
	<EventBraceStyle>EndOfLine</EventBraceStyle>
	<EventAddBraceStyle>EndOfLine</EventAddBraceStyle>
	<EventRemoveBraceStyle>EndOfLine</EventRemoveBraceStyle>
	<AllowEventAddBlockInline>True</AllowEventAddBlockInline>
	<AllowEventRemoveBlockInline>True</AllowEventRemoveBlockInline>
	<StatementBraceStyle>EndOfLine</StatementBraceStyle>
	<PlaceElseOnNewLine>False</PlaceElseOnNewLine>
	<PlaceCatchOnNewLine>False</PlaceCatchOnNewLine>
	<PlaceFinallyOnNewLine>False</PlaceFinallyOnNewLine>
	<PlaceWhileOnNewLine>False</PlaceWhileOnNewLine>
	<SpaceBeforeMethodCallParentheses>True</SpaceBeforeMethodCallParentheses>
	<SpaceBeforeMethodDeclarationParentheses>True</SpaceBeforeMethodDeclarationParentheses>
	<SpaceBeforeIfParentheses>True</SpaceBeforeIfParentheses>
	<SpaceBeforeWhileParentheses>True</SpaceBeforeWhileParentheses>
	<SpaceBeforeForParentheses>True</SpaceBeforeForParentheses>
	<SpaceBeforeForeachParentheses>True</SpaceBeforeForeachParentheses>
	<SpaceBeforeCatchParentheses>True</SpaceBeforeCatchParentheses>
	<SpaceBeforeSwitchParentheses>True</SpaceBeforeSwitchParentheses>
	<SpaceBeforeLockParentheses>True</SpaceBeforeLockParentheses>
	<SpaceBeforeUsingParentheses>True</SpaceBeforeUsingParentheses>
	<SpaceAroundAssignment>True</SpaceAroundAssignment>
	<SpaceAroundLogicalOperator>True</SpaceAroundLogicalOperator>
	<SpaceAroundEqualityOperator>True</SpaceAroundEqualityOperator>
	<SpaceAroundRelationalOperator>True</SpaceAroundRelationalOperator>
	<SpaceAroundBitwiseOperator>True</SpaceAroundBitwiseOperator>
	<SpaceAroundAdditiveOperator>True</SpaceAroundAdditiveOperator>
	<SpaceAroundMultiplicativeOperator>True</SpaceAroundMultiplicativeOperator>
	<SpaceAroundShiftOperator>True</SpaceAroundShiftOperator>
	<SpacesWithinParentheses>False</SpacesWithinParentheses>
	<SpacesWithinMethodCallParentheses>False</SpacesWithinMethodCallParentheses>
	<SpacesWithinMethodDeclarationParentheses>False</SpacesWithinMethodDeclarationParentheses>
	<SpacesWithinIfParentheses>False</SpacesWithinIfParentheses>
	<SpacesWithinWhileParentheses>False</SpacesWithinWhileParentheses>
	<SpacesWithinForParentheses>False</SpacesWithinForParentheses>
	<SpacesWithinForEachParentheses>False</SpacesWithinForEachParentheses>
	<SpacesWithinCatchParentheses>False</SpacesWithinCatchParentheses>
	<SpacesWithinSwitchParentheses>False</SpacesWithinSwitchParentheses>
	<SpacesWithinLockParentheses>False</SpacesWithinLockParentheses>
	<SpacesWithinUsingParentheses>False</SpacesWithinUsingParentheses>
	<SpacesWithinCastParentheses>False</SpacesWithinCastParentheses>
	<SpacesWithinSizeOfParentheses>False</SpacesWithinSizeOfParentheses>
	<SpacesWithinTypeOfParentheses>False</SpacesWithinTypeOfParentheses>
	<SpacesWithinCheckedExpressionParantheses>False</SpacesWithinCheckedExpressionParantheses>
	<SpaceBeforeConditionalOperatorCondition>True</SpaceBeforeConditionalOperatorCondition>
	<SpaceAfterConditionalOperatorCondition>True</SpaceAfterConditionalOperatorCondition>
	<SpaceBeforeConditionalOperatorSeparator>True</SpaceBeforeConditionalOperatorSeparator>
	<SpaceAfterConditionalOperatorSeparator>True</SpaceAfterConditionalOperatorSeparator>
	<SpacesWithinBrackets>False</SpacesWithinBrackets>
	<SpacesAfterComma>True</SpacesAfterComma>
	<SpacesBeforeComma>False</SpacesBeforeComma>
	<SpacesAfterSemicolon>True</SpacesAfterSemicolon>
	<SpaceAfterTypecast>False</SpaceAfterTypecast>
</CSharpFormattingPolicy>