// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnu.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar		(marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004 Novell, Inc
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceEntry  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class;
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field;
	
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Switch stack.
		///
		Stack<Block> switch_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		CompilationUnit file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		/// assembly and module attribute definitions are enabled
		bool global_attrs_enabled = true;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public object InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		// A counter to create new class names in interactive mode
		static int class_count;
		
		CompilerContext compiler;
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		static List<object> variables_bucket = new List<object> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		UsingsBag ubag;
		List<Tuple<Modifiers, Location>> mod_locations;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
//t  internal yydebug.yyDebug debug;

  protected const int yyFinal = 8;
//t // Put this array into a separate class so it is only initialized if debugging is actually used
//t // Use MarshalByRefObject to disable inlining
//t class YYRules : MarshalByRefObject {
//t  public static readonly string [] yyRule = {
//t    "$accept : compilation_unit",
//t    "compilation_unit : outer_declarations opt_EOF",
//t    "compilation_unit : outer_declarations global_attributes opt_EOF",
//t    "compilation_unit : global_attributes opt_EOF",
//t    "compilation_unit : opt_EOF",
//t    "$$1 :",
//t    "compilation_unit : interactive_parsing $$1 opt_EOF",
//t    "opt_EOF :",
//t    "opt_EOF : EOF",
//t    "outer_declarations : outer_declaration",
//t    "outer_declarations : outer_declarations outer_declaration",
//t    "outer_declaration : extern_alias_directive",
//t    "outer_declaration : using_directive",
//t    "outer_declaration : namespace_member_declaration",
//t    "extern_alias_directives : extern_alias_directive",
//t    "extern_alias_directives : extern_alias_directives extern_alias_directive",
//t    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
//t    "extern_alias_directive : EXTERN_ALIAS error",
//t    "using_directives : using_directive",
//t    "using_directives : using_directives using_directive",
//t    "using_directive : using_alias_directive",
//t    "using_directive : using_namespace_directive",
//t    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
//t    "using_alias_directive : USING error",
//t    "using_namespace_directive : USING namespace_name SEMICOLON",
//t    "$$2 :",
//t    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 namespace_body opt_semicolon",
//t    "qualified_identifier : IDENTIFIER",
//t    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
//t    "qualified_identifier : error",
//t    "opt_semicolon :",
//t    "opt_semicolon : SEMICOLON",
//t    "opt_comma :",
//t    "opt_comma : COMMA",
//t    "namespace_name : namespace_or_type_name",
//t    "$$3 :",
//t    "namespace_body : OPEN_BRACE $$3 namespace_body_body",
//t    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations CLOSE_BRACE",
//t    "$$4 :",
//t    "namespace_body_body : error $$4 CLOSE_BRACE",
//t    "namespace_body_body : opt_extern_alias_directives opt_using_directives opt_namespace_member_declarations EOF",
//t    "opt_using_directives :",
//t    "opt_using_directives : using_directives",
//t    "opt_extern_alias_directives :",
//t    "opt_extern_alias_directives : extern_alias_directives",
//t    "opt_namespace_member_declarations :",
//t    "opt_namespace_member_declarations : namespace_member_declarations",
//t    "namespace_member_declarations : namespace_member_declaration",
//t    "namespace_member_declarations : namespace_member_declarations namespace_member_declaration",
//t    "namespace_member_declaration : type_declaration",
//t    "namespace_member_declaration : namespace_declaration",
//t    "namespace_member_declaration : field_declaration",
//t    "namespace_member_declaration : method_declaration",
//t    "type_declaration : class_declaration",
//t    "type_declaration : struct_declaration",
//t    "type_declaration : interface_declaration",
//t    "type_declaration : enum_declaration",
//t    "type_declaration : delegate_declaration",
//t    "global_attributes : attribute_sections",
//t    "opt_attributes :",
//t    "opt_attributes : attribute_sections",
//t    "attribute_sections : attribute_section",
//t    "attribute_sections : attribute_sections attribute_section",
//t    "attribute_section : OPEN_BRACKET attribute_target_specifier attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_section : OPEN_BRACKET attribute_list opt_comma CLOSE_BRACKET",
//t    "attribute_target_specifier : attribute_target COLON",
//t    "attribute_target : IDENTIFIER",
//t    "attribute_target : EVENT",
//t    "attribute_target : RETURN",
//t    "attribute_target : error",
//t    "attribute_list : attribute",
//t    "attribute_list : attribute_list COMMA attribute",
//t    "$$5 :",
//t    "attribute : attribute_name $$5 opt_attribute_arguments",
//t    "attribute_name : namespace_or_type_name",
//t    "opt_attribute_arguments :",
//t    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
//t    "attribute_arguments :",
//t    "attribute_arguments : positional_or_named_argument",
//t    "attribute_arguments : named_attribute_argument",
//t    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
//t    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
//t    "positional_or_named_argument : expression",
//t    "positional_or_named_argument : named_argument",
//t    "$$6 :",
//t    "named_attribute_argument : IDENTIFIER ASSIGN $$6 expression",
//t    "named_argument : IDENTIFIER COLON opt_named_modifier expression",
//t    "opt_named_modifier :",
//t    "opt_named_modifier : REF",
//t    "opt_named_modifier : OUT",
//t    "opt_class_member_declarations :",
//t    "opt_class_member_declarations : class_member_declarations",
//t    "class_member_declarations : class_member_declaration",
//t    "class_member_declarations : class_member_declarations class_member_declaration",
//t    "class_member_declaration : constant_declaration",
//t    "class_member_declaration : field_declaration",
//t    "class_member_declaration : method_declaration",
//t    "class_member_declaration : property_declaration",
//t    "class_member_declaration : event_declaration",
//t    "class_member_declaration : indexer_declaration",
//t    "class_member_declaration : operator_declaration",
//t    "class_member_declaration : constructor_declaration",
//t    "class_member_declaration : destructor_declaration",
//t    "class_member_declaration : type_declaration",
//t    "class_member_declaration : error",
//t    "$$7 :",
//t    "$$8 :",
//t    "$$9 :",
//t    "$$10 :",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$7 type_declaration_name $$8 opt_class_base opt_type_parameter_constraints_clauses $$9 struct_body $$10 opt_semicolon",
//t    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
//t    "$$11 :",
//t    "struct_body : OPEN_BRACE $$11 opt_struct_member_declarations CLOSE_BRACE",
//t    "opt_struct_member_declarations :",
//t    "opt_struct_member_declarations : struct_member_declarations",
//t    "struct_member_declarations : struct_member_declaration",
//t    "struct_member_declarations : struct_member_declarations struct_member_declaration",
//t    "struct_member_declaration : constant_declaration",
//t    "struct_member_declaration : field_declaration",
//t    "struct_member_declaration : method_declaration",
//t    "struct_member_declaration : property_declaration",
//t    "struct_member_declaration : event_declaration",
//t    "struct_member_declaration : indexer_declaration",
//t    "struct_member_declaration : operator_declaration",
//t    "struct_member_declaration : constructor_declaration",
//t    "struct_member_declaration : type_declaration",
//t    "struct_member_declaration : destructor_declaration",
//t    "$$12 :",
//t    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$12 constant_initializer opt_constant_declarators SEMICOLON",
//t    "opt_constant_declarators :",
//t    "opt_constant_declarators : constant_declarators",
//t    "constant_declarators : constant_declarator",
//t    "constant_declarators : constant_declarators constant_declarator",
//t    "constant_declarator : COMMA IDENTIFIER constant_initializer",
//t    "$$13 :",
//t    "constant_initializer : ASSIGN $$13 constant_initializer_expr",
//t    "constant_initializer : error",
//t    "constant_initializer_expr : constant_expression",
//t    "constant_initializer_expr : array_initializer",
//t    "$$14 :",
//t    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$14 opt_field_initializer opt_field_declarators SEMICOLON",
//t    "$$15 :",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$15 fixed_field_size opt_fixed_field_declarators SEMICOLON",
//t    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
//t    "opt_field_initializer :",
//t    "$$16 :",
//t    "opt_field_initializer : ASSIGN $$16 variable_initializer",
//t    "opt_field_declarators :",
//t    "opt_field_declarators : field_declarators",
//t    "field_declarators : field_declarator",
//t    "field_declarators : field_declarators field_declarator",
//t    "field_declarator : COMMA IDENTIFIER",
//t    "$$17 :",
//t    "field_declarator : COMMA IDENTIFIER ASSIGN $$17 variable_initializer",
//t    "opt_fixed_field_declarators :",
//t    "opt_fixed_field_declarators : fixed_field_declarators",
//t    "fixed_field_declarators : fixed_field_declarator",
//t    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
//t    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
//t    "$$18 :",
//t    "fixed_field_size : OPEN_BRACKET $$18 expression CLOSE_BRACKET",
//t    "fixed_field_size : OPEN_BRACKET error",
//t    "local_variable_declarators : local_variable_declarator",
//t    "local_variable_declarators : local_variable_declarators COMMA local_variable_declarator",
//t    "local_variable_declarator : IDENTIFIER ASSIGN local_variable_initializer",
//t    "local_variable_declarator : IDENTIFIER",
//t    "local_variable_declarator : IDENTIFIER variable_bad_array",
//t    "local_variable_initializer : expression",
//t    "local_variable_initializer : array_initializer",
//t    "local_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
//t    "local_variable_initializer : ARGLIST",
//t    "local_variable_initializer : STACKALLOC simple_type",
//t    "variable_bad_array : OPEN_BRACKET_EXPR opt_expression CLOSE_BRACKET",
//t    "variable_initializer : expression",
//t    "variable_initializer : array_initializer",
//t    "$$19 :",
//t    "method_declaration : method_header $$19 method_body",
//t    "$$20 :",
//t    "$$21 :",
//t    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$20 opt_formal_parameter_list CLOSE_PARENS $$21 opt_type_parameter_constraints_clauses",
//t    "$$22 :",
//t    "$$23 :",
//t    "method_header : opt_attributes opt_modifiers PARTIAL VOID method_declaration_name OPEN_PARENS $$22 opt_formal_parameter_list CLOSE_PARENS $$23 opt_type_parameter_constraints_clauses",
//t    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
//t    "method_body : block",
//t    "method_body : SEMICOLON",
//t    "opt_formal_parameter_list :",
//t    "opt_formal_parameter_list : formal_parameter_list",
//t    "formal_parameter_list : fixed_parameters",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array",
//t    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
//t    "formal_parameter_list : parameter_array COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
//t    "formal_parameter_list : arglist_modifier COMMA error",
//t    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
//t    "formal_parameter_list : parameter_array",
//t    "formal_parameter_list : arglist_modifier",
//t    "fixed_parameters : fixed_parameter",
//t    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
//t    "$$24 :",
//t    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$24 constant_expression",
//t    "opt_parameter_modifier :",
//t    "opt_parameter_modifier : parameter_modifiers",
//t    "parameter_modifiers : parameter_modifier",
//t    "parameter_modifiers : parameter_modifiers parameter_modifier",
//t    "parameter_modifier : REF",
//t    "parameter_modifier : OUT",
//t    "parameter_modifier : THIS",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
//t    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
//t    "parameter_array : opt_attributes params_modifier type error",
//t    "params_modifier : PARAMS",
//t    "params_modifier : PARAMS parameter_modifier",
//t    "params_modifier : PARAMS params_modifier",
//t    "arglist_modifier : ARGLIST",
//t    "$$25 :",
//t    "$$26 :",
//t    "$$27 :",
//t    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$25 OPEN_BRACE $$26 accessor_declarations $$27 CLOSE_BRACE",
//t    "$$28 :",
//t    "$$29 :",
//t    "$$30 :",
//t    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$28 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$29 accessor_declarations $$30 CLOSE_BRACE",
//t    "accessor_declarations : get_accessor_declaration",
//t    "accessor_declarations : get_accessor_declaration accessor_declarations",
//t    "accessor_declarations : set_accessor_declaration",
//t    "accessor_declarations : set_accessor_declaration accessor_declarations",
//t    "accessor_declarations : error",
//t    "$$31 :",
//t    "get_accessor_declaration : opt_attributes opt_modifiers GET $$31 accessor_body",
//t    "$$32 :",
//t    "set_accessor_declaration : opt_attributes opt_modifiers SET $$32 accessor_body",
//t    "accessor_body : block",
//t    "accessor_body : SEMICOLON",
//t    "accessor_body : error",
//t    "$$33 :",
//t    "$$34 :",
//t    "$$35 :",
//t    "$$36 :",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$33 type_declaration_name $$34 opt_class_base opt_type_parameter_constraints_clauses $$35 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$36 opt_semicolon",
//t    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
//t    "opt_interface_member_declarations :",
//t    "opt_interface_member_declarations : interface_member_declarations",
//t    "interface_member_declarations : interface_member_declaration",
//t    "interface_member_declarations : interface_member_declarations interface_member_declaration",
//t    "interface_member_declaration : constant_declaration",
//t    "interface_member_declaration : field_declaration",
//t    "interface_member_declaration : method_declaration",
//t    "interface_member_declaration : property_declaration",
//t    "interface_member_declaration : event_declaration",
//t    "interface_member_declaration : indexer_declaration",
//t    "interface_member_declaration : operator_declaration",
//t    "interface_member_declaration : constructor_declaration",
//t    "interface_member_declaration : type_declaration",
//t    "$$37 :",
//t    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$37 operator_body",
//t    "operator_body : block",
//t    "operator_body : SEMICOLON",
//t    "operator_type : type_expression_or_array",
//t    "operator_type : VOID",
//t    "$$38 :",
//t    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$38 opt_formal_parameter_list CLOSE_PARENS",
//t    "operator_declarator : conversion_operator_declarator",
//t    "overloadable_operator : BANG",
//t    "overloadable_operator : TILDE",
//t    "overloadable_operator : OP_INC",
//t    "overloadable_operator : OP_DEC",
//t    "overloadable_operator : TRUE",
//t    "overloadable_operator : FALSE",
//t    "overloadable_operator : PLUS",
//t    "overloadable_operator : MINUS",
//t    "overloadable_operator : STAR",
//t    "overloadable_operator : DIV",
//t    "overloadable_operator : PERCENT",
//t    "overloadable_operator : BITWISE_AND",
//t    "overloadable_operator : BITWISE_OR",
//t    "overloadable_operator : CARRET",
//t    "overloadable_operator : OP_SHIFT_LEFT",
//t    "overloadable_operator : OP_SHIFT_RIGHT",
//t    "overloadable_operator : OP_EQ",
//t    "overloadable_operator : OP_NE",
//t    "overloadable_operator : OP_GT",
//t    "overloadable_operator : OP_LT",
//t    "overloadable_operator : OP_GE",
//t    "overloadable_operator : OP_LE",
//t    "$$39 :",
//t    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$39 opt_formal_parameter_list CLOSE_PARENS",
//t    "$$40 :",
//t    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$40 opt_formal_parameter_list CLOSE_PARENS",
//t    "conversion_operator_declarator : IMPLICIT error",
//t    "conversion_operator_declarator : EXPLICIT error",
//t    "constructor_declaration : constructor_declarator constructor_body",
//t    "$$41 :",
//t    "$$42 :",
//t    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$41 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$42 opt_constructor_initializer",
//t    "constructor_body : block_prepared",
//t    "constructor_body : SEMICOLON",
//t    "opt_constructor_initializer :",
//t    "opt_constructor_initializer : constructor_initializer",
//t    "$$43 :",
//t    "constructor_initializer : COLON BASE OPEN_PARENS $$43 opt_argument_list CLOSE_PARENS",
//t    "$$44 :",
//t    "constructor_initializer : COLON THIS OPEN_PARENS $$44 opt_argument_list CLOSE_PARENS",
//t    "constructor_initializer : COLON error",
//t    "$$45 :",
//t    "destructor_declaration : opt_attributes opt_modifiers TILDE $$45 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
//t    "$$46 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$46 opt_event_initializer opt_event_declarators SEMICOLON",
//t    "$$47 :",
//t    "$$48 :",
//t    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$47 event_accessor_declarations $$48 CLOSE_BRACE",
//t    "opt_event_initializer :",
//t    "$$49 :",
//t    "opt_event_initializer : ASSIGN $$49 event_variable_initializer",
//t    "opt_event_declarators :",
//t    "opt_event_declarators : event_declarators",
//t    "event_declarators : event_declarator",
//t    "event_declarators : event_declarators event_declarator",
//t    "event_declarator : COMMA IDENTIFIER",
//t    "$$50 :",
//t    "event_declarator : COMMA IDENTIFIER ASSIGN $$50 event_variable_initializer",
//t    "$$51 :",
//t    "event_variable_initializer : $$51 variable_initializer",
//t    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
//t    "event_accessor_declarations : add_accessor_declaration",
//t    "event_accessor_declarations : remove_accessor_declaration",
//t    "event_accessor_declarations : error",
//t    "$$52 :",
//t    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$52 event_accessor_block",
//t    "$$53 :",
//t    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$53 event_accessor_block",
//t    "event_accessor_block : opt_semicolon",
//t    "event_accessor_block : block",
//t    "$$54 :",
//t    "$$55 :",
//t    "$$56 :",
//t    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$54 OPEN_BRACE $$55 opt_enum_member_declarations $$56 CLOSE_BRACE opt_semicolon",
//t    "opt_enum_base :",
//t    "opt_enum_base : COLON type",
//t    "opt_enum_base : COLON error",
//t    "opt_enum_member_declarations :",
//t    "opt_enum_member_declarations : enum_member_declarations",
//t    "opt_enum_member_declarations : enum_member_declarations COMMA",
//t    "enum_member_declarations : enum_member_declaration",
//t    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
//t    "enum_member_declaration : opt_attributes IDENTIFIER",
//t    "$$57 :",
//t    "enum_member_declaration : opt_attributes IDENTIFIER $$57 ASSIGN constant_expression",
//t    "$$58 :",
//t    "$$59 :",
//t    "$$60 :",
//t    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$58 opt_formal_parameter_list CLOSE_PARENS $$59 opt_type_parameter_constraints_clauses $$60 SEMICOLON",
//t    "opt_nullable :",
//t    "opt_nullable : INTERR_NULLABLE",
//t    "namespace_or_type_name : member_name",
//t    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_name : type_name",
//t    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
//t    "type_name : IDENTIFIER opt_type_argument_list",
//t    "opt_type_argument_list :",
//t    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
//t    "opt_type_argument_list : OP_GENERICS_LT error",
//t    "type_arguments : type",
//t    "type_arguments : type_arguments COMMA type",
//t    "$$61 :",
//t    "type_declaration_name : IDENTIFIER $$61 opt_type_parameter_list",
//t    "member_declaration_name : method_declaration_name",
//t    "method_declaration_name : type_declaration_name",
//t    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
//t    "indexer_declaration_name : THIS",
//t    "indexer_declaration_name : explicit_interface THIS",
//t    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
//t    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
//t    "opt_type_parameter_list :",
//t    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
//t    "type_parameters : type_parameter",
//t    "type_parameters : type_parameters COMMA type_parameter",
//t    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
//t    "type_parameter : error",
//t    "type_and_void : type_expression_or_array",
//t    "type_and_void : VOID",
//t    "member_type : type_and_void",
//t    "type : type_expression_or_array",
//t    "type : VOID",
//t    "simple_type : type_expression",
//t    "simple_type : VOID",
//t    "parameter_type : type_expression_or_array",
//t    "parameter_type : VOID",
//t    "type_expression_or_array : type_expression",
//t    "type_expression_or_array : type_expression rank_specifiers",
//t    "type_expression : namespace_or_type_name opt_nullable",
//t    "type_expression : namespace_or_type_name pointer_stars",
//t    "type_expression : builtin_types opt_nullable",
//t    "type_expression : builtin_types pointer_stars",
//t    "type_expression : VOID pointer_stars",
//t    "type_list : base_type_name",
//t    "type_list : type_list COMMA base_type_name",
//t    "base_type_name : type",
//t    "base_type_name : error",
//t    "builtin_types : OBJECT",
//t    "builtin_types : STRING",
//t    "builtin_types : BOOL",
//t    "builtin_types : DECIMAL",
//t    "builtin_types : FLOAT",
//t    "builtin_types : DOUBLE",
//t    "builtin_types : integral_type",
//t    "integral_type : SBYTE",
//t    "integral_type : BYTE",
//t    "integral_type : SHORT",
//t    "integral_type : USHORT",
//t    "integral_type : INT",
//t    "integral_type : UINT",
//t    "integral_type : LONG",
//t    "integral_type : ULONG",
//t    "integral_type : CHAR",
//t    "primary_expression : primary_expression_or_type",
//t    "primary_expression : literal",
//t    "primary_expression : array_creation_expression",
//t    "primary_expression : parenthesized_expression",
//t    "primary_expression : default_value_expression",
//t    "primary_expression : invocation_expression",
//t    "primary_expression : element_access",
//t    "primary_expression : this_access",
//t    "primary_expression : base_access",
//t    "primary_expression : post_increment_expression",
//t    "primary_expression : post_decrement_expression",
//t    "primary_expression : object_or_delegate_creation_expression",
//t    "primary_expression : anonymous_type_expression",
//t    "primary_expression : typeof_expression",
//t    "primary_expression : sizeof_expression",
//t    "primary_expression : checked_expression",
//t    "primary_expression : unchecked_expression",
//t    "primary_expression : pointer_member_access",
//t    "primary_expression : anonymous_method_expression",
//t    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
//t    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
//t    "primary_expression_or_type : member_access",
//t    "literal : boolean_literal",
//t    "literal : LITERAL",
//t    "literal : NULL",
//t    "boolean_literal : TRUE",
//t    "boolean_literal : FALSE",
//t    "open_parens_any : OPEN_PARENS",
//t    "open_parens_any : OPEN_PARENS_CAST",
//t    "close_parens : CLOSE_PARENS",
//t    "close_parens : COMPLETE_COMPLETION",
//t    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
//t    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
//t    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
//t    "member_access : primary_expression DOT GENERATE_COMPLETION",
//t    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT GENERATE_COMPLETION",
//t    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
//t    "invocation_expression : primary_expression open_parens_any opt_argument_list close_parens",
//t    "opt_object_or_collection_initializer :",
//t    "opt_object_or_collection_initializer : object_or_collection_initializer",
//t    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
//t    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
//t    "opt_member_initializer_list :",
//t    "opt_member_initializer_list : member_initializer_list",
//t    "member_initializer_list : member_initializer",
//t    "member_initializer_list : member_initializer_list COMMA member_initializer",
//t    "member_initializer_list : member_initializer_list error",
//t    "member_initializer : IDENTIFIER ASSIGN initializer_value",
//t    "member_initializer : GENERATE_COMPLETION",
//t    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
//t    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
//t    "member_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "initializer_value : expression",
//t    "initializer_value : object_or_collection_initializer",
//t    "opt_argument_list :",
//t    "opt_argument_list : argument_list",
//t    "argument_list : argument_or_named_argument",
//t    "argument_list : argument_list COMMA argument",
//t    "argument_list : argument_list COMMA named_argument",
//t    "argument_list : argument_list COMMA",
//t    "argument_list : COMMA error",
//t    "argument : expression",
//t    "argument : non_simple_argument",
//t    "argument_or_named_argument : argument",
//t    "argument_or_named_argument : named_argument",
//t    "non_simple_argument : REF variable_reference",
//t    "non_simple_argument : OUT variable_reference",
//t    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
//t    "non_simple_argument : ARGLIST",
//t    "variable_reference : expression",
//t    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "expression_list : expression",
//t    "expression_list : expression_list COMMA expression",
//t    "expression_list : expression_list error",
//t    "expression_list_arguments : expression_list_argument",
//t    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
//t    "expression_list_argument : expression",
//t    "expression_list_argument : named_argument",
//t    "this_access : THIS",
//t    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
//t    "base_access : BASE OPEN_BRACKET error",
//t    "post_increment_expression : primary_expression OP_INC",
//t    "post_decrement_expression : primary_expression OP_DEC",
//t    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
//t    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
//t    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
//t    "array_creation_expression : NEW rank_specifiers array_initializer",
//t    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
//t    "array_creation_expression : NEW new_expr_type error",
//t    "$$62 :",
//t    "new_expr_type : $$62 simple_type",
//t    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
//t    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
//t    "anonymous_type_parameters_opt :",
//t    "anonymous_type_parameters_opt : anonymous_type_parameters",
//t    "anonymous_type_parameters : anonymous_type_parameter",
//t    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
//t    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
//t    "anonymous_type_parameter : IDENTIFIER",
//t    "anonymous_type_parameter : member_access",
//t    "anonymous_type_parameter : error",
//t    "opt_rank_specifier :",
//t    "opt_rank_specifier : rank_specifiers",
//t    "rank_specifiers : rank_specifier",
//t    "rank_specifiers : rank_specifier rank_specifiers",
//t    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
//t    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
//t    "dim_separators : COMMA",
//t    "dim_separators : dim_separators COMMA",
//t    "opt_array_initializer :",
//t    "opt_array_initializer : array_initializer",
//t    "array_initializer : OPEN_BRACE CLOSE_BRACE",
//t    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
//t    "variable_initializer_list : variable_initializer",
//t    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
//t    "variable_initializer_list : error",
//t    "$$63 :",
//t    "typeof_expression : TYPEOF $$63 open_parens_any typeof_type_expression CLOSE_PARENS",
//t    "typeof_type_expression : type_and_void",
//t    "typeof_type_expression : unbound_type_name",
//t    "typeof_type_expression : error",
//t    "unbound_type_name : IDENTIFIER generic_dimension",
//t    "unbound_type_name : qualified_alias_member IDENTIFIER generic_dimension",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER",
//t    "unbound_type_name : unbound_type_name DOT IDENTIFIER generic_dimension",
//t    "unbound_type_name : namespace_or_type_name DOT IDENTIFIER generic_dimension",
//t    "generic_dimension : GENERIC_DIMENSION",
//t    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
//t    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
//t    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
//t    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
//t    "pointer_member_access : primary_expression OP_PTR IDENTIFIER",
//t    "$$64 :",
//t    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$64 block",
//t    "opt_anonymous_method_signature :",
//t    "opt_anonymous_method_signature : anonymous_method_signature",
//t    "$$65 :",
//t    "anonymous_method_signature : OPEN_PARENS $$65 opt_formal_parameter_list CLOSE_PARENS",
//t    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
//t    "unary_expression : primary_expression",
//t    "unary_expression : BANG prefixed_unary_expression",
//t    "unary_expression : TILDE prefixed_unary_expression",
//t    "unary_expression : cast_expression",
//t    "cast_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
//t    "cast_expression : OPEN_PARENS builtin_types CLOSE_PARENS prefixed_unary_expression",
//t    "prefixed_unary_expression : unary_expression",
//t    "prefixed_unary_expression : PLUS prefixed_unary_expression",
//t    "prefixed_unary_expression : MINUS prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
//t    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
//t    "prefixed_unary_expression : STAR prefixed_unary_expression",
//t    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
//t    "multiplicative_expression : prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
//t    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
//t    "additive_expression : multiplicative_expression",
//t    "additive_expression : additive_expression PLUS multiplicative_expression",
//t    "additive_expression : additive_expression MINUS multiplicative_expression",
//t    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
//t    "additive_expression : additive_expression AS type",
//t    "additive_expression : additive_expression IS type",
//t    "shift_expression : additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
//t    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
//t    "relational_expression : shift_expression",
//t    "relational_expression : relational_expression OP_LT shift_expression",
//t    "relational_expression : relational_expression OP_GT shift_expression",
//t    "relational_expression : relational_expression OP_LE shift_expression",
//t    "relational_expression : relational_expression OP_GE shift_expression",
//t    "equality_expression : relational_expression",
//t    "equality_expression : equality_expression OP_EQ relational_expression",
//t    "equality_expression : equality_expression OP_NE relational_expression",
//t    "and_expression : equality_expression",
//t    "and_expression : and_expression BITWISE_AND equality_expression",
//t    "exclusive_or_expression : and_expression",
//t    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
//t    "inclusive_or_expression : exclusive_or_expression",
//t    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
//t    "conditional_and_expression : inclusive_or_expression",
//t    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
//t    "conditional_or_expression : conditional_and_expression",
//t    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
//t    "null_coalescing_expression : conditional_or_expression",
//t    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression",
//t    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
//t    "assignment_expression : prefixed_unary_expression ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
//t    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
//t    "lambda_parameter_list : lambda_parameter",
//t    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
//t    "lambda_parameter : parameter_modifier parameter_type IDENTIFIER",
//t    "lambda_parameter : parameter_type IDENTIFIER",
//t    "lambda_parameter : IDENTIFIER",
//t    "opt_lambda_parameter_list :",
//t    "opt_lambda_parameter_list : lambda_parameter_list",
//t    "$$66 :",
//t    "lambda_expression_body : $$66 expression",
//t    "lambda_expression_body : block",
//t    "$$67 :",
//t    "lambda_expression : IDENTIFIER ARROW $$67 lambda_expression_body",
//t    "$$68 :",
//t    "$$69 :",
//t    "lambda_expression : OPEN_PARENS_LAMBDA $$68 opt_lambda_parameter_list CLOSE_PARENS ARROW $$69 lambda_expression_body",
//t    "expression : assignment_expression",
//t    "expression : non_assignment_expression",
//t    "non_assignment_expression : conditional_expression",
//t    "non_assignment_expression : lambda_expression",
//t    "non_assignment_expression : query_expression",
//t    "constant_expression : expression",
//t    "boolean_expression : expression",
//t    "$$70 :",
//t    "$$71 :",
//t    "$$72 :",
//t    "$$73 :",
//t    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$70 type_declaration_name $$71 opt_class_base opt_type_parameter_constraints_clauses $$72 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$73 opt_semicolon",
//t    "opt_partial :",
//t    "opt_partial : PARTIAL",
//t    "opt_modifiers :",
//t    "opt_modifiers : modifiers",
//t    "modifiers : modifier",
//t    "modifiers : modifiers modifier",
//t    "modifier : NEW",
//t    "modifier : PUBLIC",
//t    "modifier : PROTECTED",
//t    "modifier : INTERNAL",
//t    "modifier : PRIVATE",
//t    "modifier : ABSTRACT",
//t    "modifier : SEALED",
//t    "modifier : STATIC",
//t    "modifier : READONLY",
//t    "modifier : VIRTUAL",
//t    "modifier : OVERRIDE",
//t    "modifier : EXTERN",
//t    "modifier : VOLATILE",
//t    "modifier : UNSAFE",
//t    "opt_class_base :",
//t    "opt_class_base : COLON type_list",
//t    "opt_type_parameter_constraints_clauses :",
//t    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
//t    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
//t    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
//t    "type_parameter_constraints : type_parameter_constraint",
//t    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
//t    "type_parameter_constraint : type",
//t    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
//t    "type_parameter_constraint : CLASS",
//t    "type_parameter_constraint : STRUCT",
//t    "opt_type_parameter_variance :",
//t    "opt_type_parameter_variance : type_parameter_variance",
//t    "type_parameter_variance : OUT",
//t    "type_parameter_variance : IN",
//t    "$$74 :",
//t    "block : OPEN_BRACE $$74 opt_statement_list block_end",
//t    "block_end : CLOSE_BRACE",
//t    "block_end : COMPLETE_COMPLETION",
//t    "$$75 :",
//t    "block_prepared : OPEN_BRACE $$75 opt_statement_list CLOSE_BRACE",
//t    "opt_statement_list :",
//t    "opt_statement_list : statement_list",
//t    "statement_list : statement",
//t    "statement_list : statement_list statement",
//t    "statement : declaration_statement",
//t    "statement : valid_declaration_statement",
//t    "statement : labeled_statement",
//t    "interactive_statement_list : interactive_statement",
//t    "interactive_statement_list : interactive_statement_list interactive_statement",
//t    "interactive_statement : declaration_statement",
//t    "interactive_statement : interactive_valid_declaration_statement",
//t    "interactive_statement : labeled_statement",
//t    "valid_declaration_statement : block",
//t    "valid_declaration_statement : empty_statement",
//t    "valid_declaration_statement : expression_statement",
//t    "valid_declaration_statement : selection_statement",
//t    "valid_declaration_statement : iteration_statement",
//t    "valid_declaration_statement : jump_statement",
//t    "valid_declaration_statement : try_statement",
//t    "valid_declaration_statement : checked_statement",
//t    "valid_declaration_statement : unchecked_statement",
//t    "valid_declaration_statement : lock_statement",
//t    "valid_declaration_statement : using_statement",
//t    "valid_declaration_statement : unsafe_statement",
//t    "valid_declaration_statement : fixed_statement",
//t    "interactive_valid_declaration_statement : block",
//t    "interactive_valid_declaration_statement : empty_statement",
//t    "interactive_valid_declaration_statement : interactive_expression_statement",
//t    "interactive_valid_declaration_statement : selection_statement",
//t    "interactive_valid_declaration_statement : iteration_statement",
//t    "interactive_valid_declaration_statement : jump_statement",
//t    "interactive_valid_declaration_statement : try_statement",
//t    "interactive_valid_declaration_statement : checked_statement",
//t    "interactive_valid_declaration_statement : unchecked_statement",
//t    "interactive_valid_declaration_statement : lock_statement",
//t    "interactive_valid_declaration_statement : using_statement",
//t    "interactive_valid_declaration_statement : unsafe_statement",
//t    "interactive_valid_declaration_statement : fixed_statement",
//t    "embedded_statement : valid_declaration_statement",
//t    "embedded_statement : declaration_statement",
//t    "embedded_statement : labeled_statement",
//t    "empty_statement : SEMICOLON",
//t    "$$76 :",
//t    "labeled_statement : IDENTIFIER COLON $$76 statement",
//t    "declaration_statement : local_variable_declaration SEMICOLON",
//t    "declaration_statement : local_constant_declaration SEMICOLON",
//t    "variable_type : variable_type_simple",
//t    "variable_type : variable_type_simple rank_specifiers",
//t    "variable_type_simple : primary_expression_or_type opt_nullable",
//t    "variable_type_simple : primary_expression_or_type pointer_stars",
//t    "variable_type_simple : builtin_types opt_nullable",
//t    "variable_type_simple : builtin_types pointer_stars",
//t    "variable_type_simple : VOID pointer_stars",
//t    "variable_type_simple : VOID",
//t    "pointer_stars : pointer_star",
//t    "pointer_stars : pointer_star pointer_stars",
//t    "pointer_star : STAR",
//t    "local_variable_declaration : variable_type local_variable_declarators",
//t    "local_constant_declaration : CONST variable_type local_constant_declarators",
//t    "local_constant_declarators : local_constant_declarator",
//t    "local_constant_declarators : local_constant_declarators COMMA local_constant_declarator",
//t    "local_constant_declarator : IDENTIFIER ASSIGN constant_initializer_expr",
//t    "local_constant_declarator : IDENTIFIER error",
//t    "expression_statement : statement_expression SEMICOLON",
//t    "expression_statement : statement_expression COMPLETE_COMPLETION",
//t    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
//t    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
//t    "statement_expression : expression",
//t    "statement_expression : error",
//t    "interactive_statement_expression : expression",
//t    "interactive_statement_expression : error",
//t    "selection_statement : if_statement",
//t    "selection_statement : switch_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
//t    "$$77 :",
//t    "switch_statement : SWITCH open_parens_any $$77 expression CLOSE_PARENS OPEN_BRACE opt_switch_sections CLOSE_BRACE",
//t    "opt_switch_sections :",
//t    "opt_switch_sections : switch_sections",
//t    "switch_sections : switch_section",
//t    "switch_sections : switch_sections switch_section",
//t    "$$78 :",
//t    "switch_section : switch_labels $$78 statement_list",
//t    "switch_labels : switch_label",
//t    "switch_labels : switch_labels switch_label",
//t    "switch_label : CASE constant_expression COLON",
//t    "switch_label : DEFAULT_COLON",
//t    "iteration_statement : while_statement",
//t    "iteration_statement : do_statement",
//t    "iteration_statement : for_statement",
//t    "iteration_statement : foreach_statement",
//t    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
//t    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
//t    "$$79 :",
//t    "for_statement : FOR open_parens_any opt_for_initializer SEMICOLON $$79 opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
//t    "opt_for_initializer :",
//t    "opt_for_initializer : for_initializer",
//t    "for_initializer : local_variable_declaration",
//t    "for_initializer : statement_expression_list",
//t    "opt_for_condition :",
//t    "opt_for_condition : boolean_expression",
//t    "opt_for_iterator :",
//t    "opt_for_iterator : for_iterator",
//t    "for_iterator : statement_expression_list",
//t    "statement_expression_list : statement_expression",
//t    "statement_expression_list : statement_expression_list COMMA statement_expression",
//t    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
//t    "$$80 :",
//t    "foreach_statement : FOREACH open_parens_any type IDENTIFIER IN expression CLOSE_PARENS $$80 embedded_statement",
//t    "jump_statement : break_statement",
//t    "jump_statement : continue_statement",
//t    "jump_statement : goto_statement",
//t    "jump_statement : return_statement",
//t    "jump_statement : throw_statement",
//t    "jump_statement : yield_statement",
//t    "break_statement : BREAK SEMICOLON",
//t    "continue_statement : CONTINUE SEMICOLON",
//t    "goto_statement : GOTO IDENTIFIER SEMICOLON",
//t    "goto_statement : GOTO CASE constant_expression SEMICOLON",
//t    "goto_statement : GOTO DEFAULT SEMICOLON",
//t    "return_statement : RETURN opt_expression SEMICOLON",
//t    "throw_statement : THROW opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER RETURN opt_expression SEMICOLON",
//t    "yield_statement : IDENTIFIER BREAK SEMICOLON",
//t    "opt_expression :",
//t    "opt_expression : expression",
//t    "try_statement : TRY block catch_clauses",
//t    "try_statement : TRY block FINALLY block",
//t    "try_statement : TRY block catch_clauses FINALLY block",
//t    "try_statement : TRY block error",
//t    "catch_clauses : catch_clause",
//t    "catch_clauses : catch_clauses catch_clause",
//t    "opt_identifier :",
//t    "opt_identifier : IDENTIFIER",
//t    "$$81 :",
//t    "catch_clause : CATCH opt_catch_args $$81 block",
//t    "opt_catch_args :",
//t    "opt_catch_args : catch_args",
//t    "catch_args : open_parens_any type opt_identifier CLOSE_PARENS",
//t    "catch_args : open_parens_any CLOSE_PARENS",
//t    "checked_statement : CHECKED block",
//t    "unchecked_statement : UNCHECKED block",
//t    "$$82 :",
//t    "unsafe_statement : UNSAFE $$82 block",
//t    "$$83 :",
//t    "fixed_statement : FIXED open_parens_any type_and_void fixed_pointer_declarators CLOSE_PARENS $$83 embedded_statement",
//t    "fixed_pointer_declarators : fixed_pointer_declarator",
//t    "fixed_pointer_declarators : fixed_pointer_declarators COMMA fixed_pointer_declarator",
//t    "fixed_pointer_declarator : IDENTIFIER ASSIGN expression",
//t    "fixed_pointer_declarator : IDENTIFIER",
//t    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
//t    "$$84 :",
//t    "using_statement : USING open_parens_any local_variable_declaration CLOSE_PARENS $$84 embedded_statement",
//t    "$$85 :",
//t    "using_statement : USING open_parens_any expression CLOSE_PARENS $$85 embedded_statement",
//t    "query_expression : first_from_clause query_body",
//t    "query_expression : nested_from_clause query_body",
//t    "query_expression : first_from_clause COMPLETE_COMPLETION",
//t    "query_expression : nested_from_clause COMPLETE_COMPLETION",
//t    "first_from_clause : FROM_FIRST IDENTIFIER IN expression",
//t    "first_from_clause : FROM_FIRST type IDENTIFIER IN expression",
//t    "nested_from_clause : FROM IDENTIFIER IN expression",
//t    "nested_from_clause : FROM type IDENTIFIER IN expression",
//t    "$$86 :",
//t    "from_clause : FROM IDENTIFIER IN $$86 expression",
//t    "$$87 :",
//t    "from_clause : FROM type IDENTIFIER IN $$87 expression",
//t    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
//t    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
//t    "$$88 :",
//t    "select_or_group_clause : SELECT $$88 expression",
//t    "$$89 :",
//t    "$$90 :",
//t    "select_or_group_clause : GROUP $$89 expression $$90 BY expression",
//t    "opt_query_body_clauses :",
//t    "opt_query_body_clauses : query_body_clauses",
//t    "query_body_clauses : query_body_clause",
//t    "query_body_clauses : query_body_clauses query_body_clause",
//t    "query_body_clause : from_clause",
//t    "query_body_clause : let_clause",
//t    "query_body_clause : where_clause",
//t    "query_body_clause : join_clause",
//t    "query_body_clause : orderby_clause",
//t    "$$91 :",
//t    "let_clause : LET IDENTIFIER ASSIGN $$91 expression",
//t    "$$92 :",
//t    "where_clause : WHERE $$92 boolean_expression",
//t    "$$93 :",
//t    "$$94 :",
//t    "$$95 :",
//t    "join_clause : JOIN IDENTIFIER IN $$93 expression ON $$94 expression EQUALS $$95 expression opt_join_into",
//t    "$$96 :",
//t    "$$97 :",
//t    "$$98 :",
//t    "join_clause : JOIN type IDENTIFIER IN $$96 expression ON $$97 expression EQUALS $$98 expression opt_join_into",
//t    "opt_join_into :",
//t    "opt_join_into : INTO IDENTIFIER",
//t    "$$99 :",
//t    "orderby_clause : ORDERBY $$99 orderings",
//t    "orderings : order_by",
//t    "$$100 :",
//t    "orderings : order_by COMMA $$100 orderings_then_by",
//t    "orderings_then_by : then_by",
//t    "$$101 :",
//t    "orderings_then_by : orderings_then_by COMMA $$101 then_by",
//t    "order_by : expression",
//t    "order_by : expression ASCENDING",
//t    "order_by : expression DESCENDING",
//t    "then_by : expression",
//t    "then_by : expression ASCENDING",
//t    "then_by : expression DESCENDING",
//t    "opt_query_continuation :",
//t    "$$102 :",
//t    "opt_query_continuation : INTO IDENTIFIER $$102 query_body",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
//t    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives",
//t    "$$103 :",
//t    "interactive_parsing : EVAL_STATEMENT_PARSER $$103 interactive_statement_list opt_COMPLETE_COMPLETION",
//t    "$$104 :",
//t    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER $$104 interactive_compilation_unit",
//t    "interactive_compilation_unit : outer_declarations",
//t    "interactive_compilation_unit : outer_declarations global_attributes",
//t    "interactive_compilation_unit : global_attributes",
//t    "interactive_compilation_unit :",
//t    "opt_COMPLETE_COMPLETION :",
//t    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
//t    "close_brace_or_complete_completion : CLOSE_BRACE",
//t    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
//t  };
//t public static string getRule (int index) {
//t    return yyRule [index];
//t }
//t}
  protected static readonly string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","OP_GENERICS_LT","OP_GENERICS_LT_DECL",
    "OP_GENERICS_GT","GET","SET","LAST_KEYWORD","OPEN_BRACE",
    "CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET","OPEN_PARENS",
    "CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON","TILDE","PLUS",
    "MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND","BITWISE_OR",
    "STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON","OP_INC",
    "OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE","OP_EQ",
    "OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
//t  public static string yyname (int token) {
//t    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
//t    string name;
//t    if ((name = yyNames[token]) != null) return name;
//t    return "[unknown]";
//t  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
//t    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

	static int[] global_yyStates;
	static object[] global_yyVals;
	protected bool use_global_stacks;
	object[] yyVals;					// value stack
	object yyVal;						// value stack ptr
	int yyToken;						// current input
	int yyTop;

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;		// initial size
    int yyState = 0;                   // state stack ptr
    int [] yyStates;               	// state stack 
    yyVal = null;
    yyToken = -1;
    int yyErrorFlag = 0;				// #tks to shift
	if (use_global_stacks && global_yyStates != null) {
		yyVals = global_yyVals;
		yyStates = global_yyStates;
   } else {
		yyVals = new object [yyMax];
		yyStates = new int [yyMax];
		if (use_global_stacks) {
			global_yyVals = yyVals;
			global_yyStates = yyStates;
		}
	}

    /*yyLoop:*/ for (yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        global::System.Array.Resize (ref yyStates, yyStates.Length+yyMax);
        global::System.Array.Resize (ref yyVals, yyVals.Length+yyMax);
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
//t      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ while (true) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
//t            if (debug != null)
//t              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
//t              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
//t                  if (debug != null)
//t                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
//t                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
//t              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
//t                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
//t              if (debug != null)
//t                debug.discard(yyState, yyToken, yyname(yyToken),
//t  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
//t        if (debug != null)
//t          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyV > yyTop ? null : yyVals[yyV]; // yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 5:
#line 377 "cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 7:
#line 384 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 8:
#line 388 "cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 16:
  case_16();
  break;
case 17:
#line 424 "cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 20:
  case_20();
  break;
case 21:
  case_21();
  break;
case 22:
  case_22();
  break;
case 23:
  case_23();
  break;
case 24:
  case_24();
  break;
case 25:
  case_25();
  break;
case 26:
  case_26();
  break;
case 27:
  case_27();
  break;
case 28:
  case_28();
  break;
case 29:
  case_29();
  break;
case 34:
  case_34();
  break;
case 35:
  case_35();
  break;
case 37:
#line 552 "cs-parser.jay"
  {
		ubag.CloseNamespace (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 38:
#line 556 "cs-parser.jay"
  {
		Report.Error (1518, lexer.Location, "Expected `class', `delegate', `enum', `interface', or `struct'");
	  }
  break;
case 40:
#line 564 "cs-parser.jay"
  {
		Report.Error (1513, lexer.Location, "Expected `}'");
	  }
  break;
case 49:
  case_49();
  break;
case 50:
#line 602 "cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 51:
#line 606 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 52:
#line 609 "cs-parser.jay"
  {
		Report.Error (116, ((MemberCore) yyVals[0+yyTop]).Location, "A namespace can only contain types and namespace declarations");
	  }
  break;
case 58:
  case_58();
  break;
case 59:
  case_59();
  break;
case 60:
  case_60();
  break;
case 61:
  case_61();
  break;
case 62:
  case_62();
  break;
case 63:
#line 730 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
 	  }
  break;
case 64:
#line 734 "cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 65:
  case_65();
  break;
case 66:
  case_66();
  break;
case 67:
#line 751 "cs-parser.jay"
  { yyVal = "event"; }
  break;
case 68:
#line 752 "cs-parser.jay"
  { yyVal = "return"; }
  break;
case 69:
  case_69();
  break;
case 70:
#line 764 "cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 71:
  case_71();
  break;
case 72:
#line 778 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 73:
  case_73();
  break;
case 74:
#line 803 "cs-parser.jay"
  { /* reserved attribute name or identifier: 17.4 */ }
  break;
case 75:
#line 807 "cs-parser.jay"
  { yyVal = null; }
  break;
case 76:
#line 811 "cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 77:
#line 816 "cs-parser.jay"
  { yyVal = null; }
  break;
case 78:
  case_78();
  break;
case 79:
  case_79();
  break;
case 80:
  case_80();
  break;
case 81:
  case_81();
  break;
case 82:
#line 860 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 84:
#line 868 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 85:
  case_85();
  break;
case 86:
  case_86();
  break;
case 87:
#line 892 "cs-parser.jay"
  { yyVal = null; }
  break;
case 88:
#line 896 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 89:
#line 900 "cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 104:
  case_104();
  break;
case 105:
#line 941 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 106:
  case_106();
  break;
case 107:
  case_107();
  break;
case 108:
  case_108();
  break;
case 109:
  case_109();
  break;
case 110:
#line 972 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 111:
  case_111();
  break;
case 112:
#line 984 "cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 127:
  case_127();
  break;
case 128:
  case_128();
  break;
case 131:
#line 1053 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 132:
#line 1057 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 133:
  case_133();
  break;
case 134:
#line 1073 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 135:
  case_135();
  break;
case 136:
  case_136();
  break;
case 139:
  case_139();
  break;
case 140:
  case_140();
  break;
case 141:
  case_141();
  break;
case 142:
  case_142();
  break;
case 143:
#line 1151 "cs-parser.jay"
  {
		Report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 145:
#line 1159 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 146:
  case_146();
  break;
case 149:
#line 1177 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 150:
#line 1181 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 151:
  case_151();
  break;
case 152:
#line 1194 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 153:
  case_153();
  break;
case 156:
#line 1213 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 157:
#line 1217 "cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 158:
  case_158();
  break;
case 159:
#line 1233 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 160:
  case_160();
  break;
case 161:
  case_161();
  break;
case 162:
  case_162();
  break;
case 163:
  case_163();
  break;
case 164:
  case_164();
  break;
case 165:
#line 1273 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[0+yyTop], null);
	  }
  break;
case 166:
#line 1277 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 169:
  case_169();
  break;
case 170:
#line 1291 "cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 171:
  case_171();
  break;
case 172:
  case_172();
  break;
case 175:
  case_175();
  break;
case 176:
  case_176();
  break;
case 177:
#line 1341 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 178:
#line 1345 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 179:
  case_179();
  break;
case 180:
#line 1386 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 181:
#line 1390 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 182:
  case_182();
  break;
case 183:
  case_183();
  break;
case 185:
#line 1466 "cs-parser.jay"
  { yyVal = null; }
  break;
case 186:
#line 1470 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 188:
  case_188();
  break;
case 189:
  case_189();
  break;
case 190:
  case_190();
  break;
case 191:
  case_191();
  break;
case 192:
  case_192();
  break;
case 193:
  case_193();
  break;
case 194:
  case_194();
  break;
case 195:
#line 1528 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (compiler, new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 196:
#line 1532 "cs-parser.jay"
  {
		yyVal = new ParametersCompiled (compiler, new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 197:
  case_197();
  break;
case 198:
  case_198();
  break;
case 199:
  case_199();
  break;
case 200:
  case_200();
  break;
case 201:
  case_201();
  break;
case 202:
#line 1599 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 203:
  case_203();
  break;
case 204:
#line 1640 "cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 206:
#line 1648 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 207:
  case_207();
  break;
case 208:
  case_208();
  break;
case 209:
  case_209();
  break;
case 210:
  case_210();
  break;
case 211:
  case_211();
  break;
case 212:
  case_212();
  break;
case 213:
  case_213();
  break;
case 214:
  case_214();
  break;
case 215:
  case_215();
  break;
case 216:
#line 1737 "cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 217:
  case_217();
  break;
case 218:
  case_218();
  break;
case 219:
  case_219();
  break;
case 220:
  case_220();
  break;
case 221:
  case_221();
  break;
case 222:
#line 1790 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 223:
  case_223();
  break;
case 224:
#line 1820 "cs-parser.jay"
  {
		  lexer.PropertyParsing = false;
	  }
  break;
case 225:
  case_225();
  break;
case 230:
  case_230();
  break;
case 231:
  case_231();
  break;
case 232:
  case_232();
  break;
case 233:
  case_233();
  break;
case 234:
  case_234();
  break;
case 236:
  case_236();
  break;
case 237:
  case_237();
  break;
case 238:
#line 1962 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 239:
  case_239();
  break;
case 240:
  case_240();
  break;
case 241:
  case_241();
  break;
case 242:
  case_242();
  break;
case 243:
#line 1994 "cs-parser.jay"
  {
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 248:
#line 2011 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 249:
#line 2015 "cs-parser.jay"
  {
		Report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 254:
#line 2023 "cs-parser.jay"
  {
	  	Report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 255:
#line 2027 "cs-parser.jay"
  {
	  	Report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 256:
#line 2031 "cs-parser.jay"
  {
	  	Report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 257:
#line 2037 "cs-parser.jay"
  {
	  }
  break;
case 258:
  case_258();
  break;
case 260:
#line 2064 "cs-parser.jay"
  { yyVal = null; }
  break;
case 262:
  case_262();
  break;
case 263:
#line 2080 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 264:
  case_264();
  break;
case 266:
#line 2126 "cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 267:
#line 2127 "cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 268:
#line 2128 "cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 269:
#line 2129 "cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 270:
#line 2130 "cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 271:
#line 2131 "cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 272:
#line 2133 "cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 273:
#line 2134 "cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 274:
#line 2136 "cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 275:
#line 2137 "cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 276:
#line 2138 "cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 277:
#line 2139 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 278:
#line 2140 "cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 279:
#line 2141 "cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 280:
#line 2142 "cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 281:
#line 2143 "cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 282:
#line 2144 "cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 283:
#line 2145 "cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 284:
#line 2146 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 285:
#line 2147 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 286:
#line 2148 "cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 287:
#line 2149 "cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 288:
#line 2156 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 289:
  case_289();
  break;
case 290:
#line 2175 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 291:
  case_291();
  break;
case 292:
  case_292();
  break;
case 293:
  case_293();
  break;
case 294:
  case_294();
  break;
case 295:
  case_295();
  break;
case 296:
  case_296();
  break;
case 297:
  case_297();
  break;
case 299:
#line 2278 "cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 302:
#line 2290 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 303:
  case_303();
  break;
case 304:
#line 2300 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 305:
  case_305();
  break;
case 306:
  case_306();
  break;
case 307:
  case_307();
  break;
case 308:
  case_308();
  break;
case 309:
  case_309();
  break;
case 310:
  case_310();
  break;
case 311:
  case_311();
  break;
case 312:
  case_312();
  break;
case 313:
  case_313();
  break;
case 315:
#line 2408 "cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 316:
  case_316();
  break;
case 319:
#line 2425 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 320:
#line 2429 "cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 321:
  case_321();
  break;
case 322:
#line 2442 "cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 323:
  case_323();
  break;
case 324:
  case_324();
  break;
case 325:
#line 2467 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 328:
  case_328();
  break;
case 329:
  case_329();
  break;
case 330:
  case_330();
  break;
case 331:
  case_331();
  break;
case 332:
  case_332();
  break;
case 333:
  case_333();
  break;
case 334:
  case_334();
  break;
case 335:
  case_335();
  break;
case 337:
  case_337();
  break;
case 338:
  case_338();
  break;
case 339:
  case_339();
  break;
case 340:
  case_340();
  break;
case 342:
  case_342();
  break;
case 343:
  case_343();
  break;
case 346:
#line 2626 "cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 348:
  case_348();
  break;
case 349:
  case_349();
  break;
case 350:
  case_350();
  break;
case 351:
  case_351();
  break;
case 352:
#line 2684 "cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 353:
  case_353();
  break;
case 354:
#line 2707 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 355:
  case_355();
  break;
case 357:
  case_357();
  break;
case 359:
  case_359();
  break;
case 361:
  case_361();
  break;
case 362:
  case_362();
  break;
case 364:
  case_364();
  break;
case 365:
  case_365();
  break;
case 366:
  case_366();
  break;
case 367:
  case_367();
  break;
case 368:
#line 2804 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 369:
  case_369();
  break;
case 370:
  case_370();
  break;
case 372:
  case_372();
  break;
case 373:
  case_373();
  break;
case 374:
  case_374();
  break;
case 375:
  case_375();
  break;
case 376:
  case_376();
  break;
case 377:
  case_377();
  break;
case 379:
  case_379();
  break;
case 380:
  case_380();
  break;
case 381:
  case_381();
  break;
case 382:
  case_382();
  break;
case 383:
  case_383();
  break;
case 385:
#line 2924 "cs-parser.jay"
  {
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 386:
#line 2931 "cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 388:
  case_388();
  break;
case 390:
  case_390();
  break;
case 392:
  case_392();
  break;
case 394:
#line 2969 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 395:
  case_395();
  break;
case 396:
#line 2989 "cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 397:
  case_397();
  break;
case 398:
#line 2998 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 399:
#line 3002 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 400:
  case_400();
  break;
case 401:
  case_401();
  break;
case 402:
  case_402();
  break;
case 403:
  case_403();
  break;
case 404:
#line 3040 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.object_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3041 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.string_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3042 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.bool_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3043 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.decimal_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 408:
#line 3044 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.float_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
#line 3045 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.double_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
#line 3050 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.sbyte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
#line 3051 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.byte_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 413:
#line 3052 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.short_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 414:
#line 3053 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.ushort_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3054 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3055 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint32_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3056 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.int64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3057 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.uint64_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 419:
#line 3058 "cs-parser.jay"
  { yyVal = new TypeExpression (TypeManager.char_type, GetLocation (yyVals[0+yyTop])); }
  break;
case 439:
  case_439();
  break;
case 440:
  case_440();
  break;
case 444:
#line 3104 "cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 445:
#line 3108 "cs-parser.jay"
  { yyVal = new BoolLiteral (true, GetLocation (yyVals[0+yyTop])); }
  break;
case 446:
#line 3109 "cs-parser.jay"
  { yyVal = new BoolLiteral (false, GetLocation (yyVals[0+yyTop])); }
  break;
case 451:
  case_451();
  break;
case 452:
#line 3142 "cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 453:
  case_453();
  break;
case 454:
  case_454();
  break;
case 455:
  case_455();
  break;
case 456:
  case_456();
  break;
case 457:
#line 3173 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 458:
  case_458();
  break;
case 459:
#line 3181 "cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 460:
  case_460();
  break;
case 461:
  case_461();
  break;
case 462:
#line 3197 "cs-parser.jay"
  { yyVal = null; }
  break;
case 464:
  case_464();
  break;
case 465:
  case_465();
  break;
case 466:
#line 3220 "cs-parser.jay"
  { yyVal = null; }
  break;
case 467:
#line 3224 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 468:
  case_468();
  break;
case 469:
  case_469();
  break;
case 470:
  case_470();
  break;
case 471:
  case_471();
  break;
case 472:
#line 3256 "cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 473:
  case_473();
  break;
case 474:
  case_474();
  break;
case 475:
  case_475();
  break;
case 478:
#line 3284 "cs-parser.jay"
  { yyVal = null; }
  break;
case 480:
  case_480();
  break;
case 481:
  case_481();
  break;
case 482:
  case_482();
  break;
case 483:
  case_483();
  break;
case 484:
  case_484();
  break;
case 485:
#line 3336 "cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 489:
  case_489();
  break;
case 490:
  case_490();
  break;
case 491:
  case_491();
  break;
case 492:
  case_492();
  break;
case 493:
#line 3369 "cs-parser.jay"
  {
		yyVal = new Argument (new ArglistAccess (GetLocation (yyVals[0+yyTop])));
	  }
  break;
case 495:
  case_495();
  break;
case 496:
  case_496();
  break;
case 497:
  case_497();
  break;
case 498:
  case_498();
  break;
case 499:
  case_499();
  break;
case 500:
  case_500();
  break;
case 501:
#line 3424 "cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 503:
#line 3432 "cs-parser.jay"
  {
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 504:
  case_504();
  break;
case 505:
  case_505();
  break;
case 506:
#line 3452 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 507:
#line 3459 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 508:
  case_508();
  break;
case 509:
  case_509();
  break;
case 510:
  case_510();
  break;
case 511:
  case_511();
  break;
case 512:
  case_512();
  break;
case 513:
  case_513();
  break;
case 514:
  case_514();
  break;
case 515:
#line 3525 "cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 516:
  case_516();
  break;
case 517:
  case_517();
  break;
case 520:
#line 3554 "cs-parser.jay"
  { yyVal = null; }
  break;
case 522:
  case_522();
  break;
case 523:
  case_523();
  break;
case 524:
  case_524();
  break;
case 525:
  case_525();
  break;
case 526:
  case_526();
  break;
case 527:
  case_527();
  break;
case 531:
  case_531();
  break;
case 532:
#line 3617 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 533:
#line 3621 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 534:
#line 3628 "cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 535:
#line 3632 "cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 536:
#line 3639 "cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 537:
#line 3643 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 538:
  case_538();
  break;
case 539:
  case_539();
  break;
case 540:
  case_540();
  break;
case 541:
  case_541();
  break;
case 542:
  case_542();
  break;
case 543:
#line 3686 "cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 544:
  case_544();
  break;
case 547:
  case_547();
  break;
case 548:
  case_548();
  break;
case 549:
  case_549();
  break;
case 550:
  case_550();
  break;
case 551:
  case_551();
  break;
case 552:
  case_552();
  break;
case 553:
  case_553();
  break;
case 554:
  case_554();
  break;
case 555:
  case_555();
  break;
case 556:
  case_556();
  break;
case 557:
  case_557();
  break;
case 558:
  case_558();
  break;
case 559:
#line 3801 "cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 3805 "cs-parser.jay"
  {
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
	}
  break;
case 561:
#line 3812 "cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 563:
#line 3820 "cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 564:
  case_564();
  break;
case 565:
  case_565();
  break;
case 567:
#line 3844 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 568:
#line 3848 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 570:
  case_570();
  break;
case 571:
  case_571();
  break;
case 573:
#line 3874 "cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 574:
#line 3878 "cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
#line 3882 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 576:
#line 3886 "cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
#line 3890 "cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 578:
#line 3894 "cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 580:
  case_580();
  break;
case 581:
  case_581();
  break;
case 582:
  case_582();
  break;
case 584:
  case_584();
  break;
case 585:
#line 3926 "cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 586:
  case_586();
  break;
case 587:
#line 3935 "cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 588:
#line 3939 "cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 590:
  case_590();
  break;
case 591:
  case_591();
  break;
case 593:
  case_593();
  break;
case 594:
  case_594();
  break;
case 595:
  case_595();
  break;
case 596:
  case_596();
  break;
case 598:
  case_598();
  break;
case 599:
  case_599();
  break;
case 601:
  case_601();
  break;
case 603:
  case_603();
  break;
case 605:
  case_605();
  break;
case 607:
  case_607();
  break;
case 609:
  case_609();
  break;
case 611:
  case_611();
  break;
case 613:
  case_613();
  break;
case 614:
#line 4063 "cs-parser.jay"
  {
		yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 615:
  case_615();
  break;
case 616:
  case_616();
  break;
case 617:
  case_617();
  break;
case 618:
  case_618();
  break;
case 619:
  case_619();
  break;
case 620:
  case_620();
  break;
case 621:
  case_621();
  break;
case 622:
  case_622();
  break;
case 623:
  case_623();
  break;
case 624:
  case_624();
  break;
case 625:
  case_625();
  break;
case 626:
  case_626();
  break;
case 627:
  case_627();
  break;
case 628:
  case_628();
  break;
case 629:
  case_629();
  break;
case 630:
#line 4158 "cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 631:
  case_631();
  break;
case 632:
#line 4168 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 633:
  case_633();
  break;
case 634:
#line 4177 "cs-parser.jay"
  { 
	  	yyVal = yyVals[0+yyTop]; 
	  }
  break;
case 635:
  case_635();
  break;
case 636:
  case_636();
  break;
case 637:
  case_637();
  break;
case 638:
  case_638();
  break;
case 639:
  case_639();
  break;
case 646:
#line 4230 "cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 647:
#line 4243 "cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 648:
  case_648();
  break;
case 649:
  case_649();
  break;
case 650:
  case_650();
  break;
case 651:
  case_651();
  break;
case 652:
#line 4277 "cs-parser.jay"
  { yyVal = null; }
  break;
case 653:
#line 4279 "cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 654:
  case_654();
  break;
case 657:
  case_657();
  break;
case 658:
  case_658();
  break;
case 659:
  case_659();
  break;
case 660:
  case_660();
  break;
case 661:
  case_661();
  break;
case 662:
  case_662();
  break;
case 663:
  case_663();
  break;
case 664:
  case_664();
  break;
case 665:
  case_665();
  break;
case 666:
  case_666();
  break;
case 667:
  case_667();
  break;
case 668:
  case_668();
  break;
case 669:
  case_669();
  break;
case 670:
  case_670();
  break;
case 671:
  case_671();
  break;
case 673:
#line 4394 "cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 674:
#line 4398 "cs-parser.jay"
  { yyVal = null; }
  break;
case 675:
#line 4402 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 676:
  case_676();
  break;
case 677:
  case_677();
  break;
case 678:
  case_678();
  break;
case 679:
  case_679();
  break;
case 680:
  case_680();
  break;
case 681:
  case_681();
  break;
case 682:
  case_682();
  break;
case 683:
#line 4486 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 684:
#line 4490 "cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 685:
#line 4497 "cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 686:
  case_686();
  break;
case 687:
#line 4513 "cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 688:
#line 4517 "cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 689:
  case_689();
  break;
case 690:
#line 4542 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 691:
  case_691();
  break;
case 692:
  case_692();
  break;
case 693:
  case_693();
  break;
case 694:
  case_694();
  break;
case 699:
  case_699();
  break;
case 700:
#line 4593 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 704:
  case_704();
  break;
case 705:
#line 4619 "cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 734:
  case_734();
  break;
case 735:
  case_735();
  break;
case 736:
#line 4673 "cs-parser.jay"
  {
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 737:
  case_737();
  break;
case 739:
  case_739();
  break;
case 740:
  case_740();
  break;
case 742:
  case_742();
  break;
case 743:
  case_743();
  break;
case 744:
  case_744();
  break;
case 745:
  case_745();
  break;
case 746:
#line 4776 "cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 747:
#line 4780 "cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 748:
  case_748();
  break;
case 750:
  case_750();
  break;
case 751:
#line 4801 "cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 752:
  case_752();
  break;
case 753:
  case_753();
  break;
case 754:
  case_754();
  break;
case 755:
  case_755();
  break;
case 756:
#line 4853 "cs-parser.jay"
  {
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
	  }
  break;
case 757:
  case_757();
  break;
case 758:
  case_758();
  break;
case 759:
#line 4867 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 760:
#line 4871 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 761:
#line 4872 "cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 762:
  case_762();
  break;
case 763:
  case_763();
  break;
case 764:
  case_764();
  break;
case 765:
  case_765();
  break;
case 768:
  case_768();
  break;
case 769:
  case_769();
  break;
case 770:
  case_770();
  break;
case 771:
  case_771();
  break;
case 772:
  case_772();
  break;
case 774:
  case_774();
  break;
case 775:
  case_775();
  break;
case 776:
#line 4988 "cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 777:
#line 4992 "cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block.Explicit);
	  }
  break;
case 778:
  case_778();
  break;
case 779:
  case_779();
  break;
case 780:
  case_780();
  break;
case 781:
#line 5021 "cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 786:
  case_786();
  break;
case 787:
  case_787();
  break;
case 788:
  case_788();
  break;
case 789:
  case_789();
  break;
case 790:
#line 5102 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 794:
#line 5112 "cs-parser.jay"
  { yyVal = null; }
  break;
case 796:
#line 5117 "cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 800:
  case_800();
  break;
case 801:
  case_801();
  break;
case 802:
  case_802();
  break;
case 803:
  case_803();
  break;
case 810:
  case_810();
  break;
case 811:
  case_811();
  break;
case 812:
  case_812();
  break;
case 813:
  case_813();
  break;
case 814:
  case_814();
  break;
case 815:
  case_815();
  break;
case 816:
  case_816();
  break;
case 817:
  case_817();
  break;
case 818:
  case_818();
  break;
case 821:
#line 5283 "cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 822:
  case_822();
  break;
case 823:
  case_823();
  break;
case 824:
  case_824();
  break;
case 825:
  case_825();
  break;
case 826:
  case_826();
  break;
case 827:
#line 5328 "cs-parser.jay"
  { yyVal = null; }
  break;
case 829:
  case_829();
  break;
case 830:
  case_830();
  break;
case 831:
#line 5372 "cs-parser.jay"
  { yyVal = null; }
  break;
case 833:
  case_833();
  break;
case 834:
  case_834();
  break;
case 835:
#line 5393 "cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 836:
#line 5400 "cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 837:
  case_837();
  break;
case 838:
#line 5410 "cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 839:
#line 5419 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 840:
  case_840();
  break;
case 841:
  case_841();
  break;
case 842:
  case_842();
  break;
case 843:
  case_843();
  break;
case 844:
  case_844();
  break;
case 845:
  case_845();
  break;
case 846:
  case_846();
  break;
case 847:
  case_847();
  break;
case 848:
#line 5538 "cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 849:
  case_849();
  break;
case 850:
  case_850();
  break;
case 851:
  case_851();
  break;
case 852:
  case_852();
  break;
case 853:
  case_853();
  break;
case 854:
  case_854();
  break;
case 855:
  case_855();
  break;
case 856:
  case_856();
  break;
case 857:
  case_857();
  break;
case 858:
#line 5636 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 859:
  case_859();
  break;
case 860:
#line 5651 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 861:
  case_861();
  break;
case 862:
  case_862();
  break;
case 864:
#line 5691 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 865:
  case_865();
  break;
case 866:
  case_866();
  break;
case 867:
  case_867();
  break;
case 868:
  case_868();
  break;
case 872:
  case_872();
  break;
case 878:
#line 5749 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 879:
  case_879();
  break;
case 880:
#line 5767 "cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 881:
  case_881();
  break;
case 882:
  case_882();
  break;
case 883:
  case_883();
  break;
case 884:
  case_884();
  break;
case 885:
  case_885();
  break;
case 886:
  case_886();
  break;
case 887:
  case_887();
  break;
case 888:
  case_888();
  break;
case 889:
  case_889();
  break;
case 891:
#line 5883 "cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 892:
#line 5890 "cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }
  break;
case 893:
  case_893();
  break;
case 895:
  case_895();
  break;
case 896:
  case_896();
  break;
case 898:
  case_898();
  break;
case 899:
  case_899();
  break;
case 900:
#line 5936 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 901:
#line 5940 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 902:
#line 5944 "cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 903:
#line 5951 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 904:
#line 5955 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 905:
#line 5959 "cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 907:
  case_907();
  break;
case 908:
  case_908();
  break;
case 911:
  case_911();
  break;
case 912:
  case_912();
  break;
case 913:
#line 6050 "cs-parser.jay"
  {
	        Evaluator.LoadAliases (current_namespace);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
//t          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
//t            if (debug != null)
//t               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
//t            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
//t        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: ;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: ;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

/*
 All more than 3 lines long rules are wrapped into a method
*/
void case_16()
#line 409 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, Report);
		}
	  }

void case_20()
#line 434 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_21()
#line 439 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_22()
#line 447 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		ubag.AddUsingAlias (GetLocation (yyVals[-4+yyTop]), lt, GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_23()
#line 452 "cs-parser.jay"
{
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }

void case_24()
#line 460 "cs-parser.jay"
{
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		ubag.AddUsing (GetLocation (yyVals[-2+yyTop]), (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_25()
#line 473 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (yyVals[-2+yyTop] != null) {
			Report.Error(1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}

		current_namespace = new NamespaceEntry (
			current_namespace, file, name.GetName ());
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.DeclareNamespace (GetLocation (yyVals[-1+yyTop]), name);
	  }

void case_26()
#line 487 "cs-parser.jay"
{ 
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
		ubag.EndNamespace (GetLocation (yyVals[0+yyTop]));
	  }

void case_27()
#line 497 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }

void case_28()
#line 502 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_29()
#line 507 "cs-parser.jay"
{
		syntax_error (lexer.Location, "`.' expected");
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }

void case_34()
#line 525 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }

void case_35()
#line 537 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
		ubag.OpenNamespace (GetLocation (yyVals[0+yyTop]));
			
	  }

void case_49()
#line 589 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			DeclSpace ds = (DeclSpace)yyVals[0+yyTop];
			ubag.AddTypeDeclaration (ds);
			if ((ds.ModFlags & (Modifiers.PRIVATE|Modifiers.PROTECTED)) != 0){
				Report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}
		}
		current_namespace.DeclarationFound = true;
	  }

void case_58()
#line 633 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes)yyVals[0+yyTop];
			if (global_attrs_enabled) {
				CodeGen.Assembly.AddAttributes (attrs.Attrs, current_namespace);
			} else {
				foreach (Attribute a in attrs.Attrs) {
					Report.Error (1730, a.Location, "Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
				}
			}
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_59()
#line 650 "cs-parser.jay"
{
		global_attrs_enabled = false;
		yyVal = null;
      }

void case_60()
#line 655 "cs-parser.jay"
{ 
		global_attrs_enabled = false;
		yyVal = yyVals[0+yyTop];
	  }

void case_61()
#line 664 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target != null && current_attr_target.Length > 0) {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					yyVal = new Attributes (sect);
				}
				if (yyVal == null) {
					if (RootContext.Documentation != null) {
						Lexer.check_incorrect_doc_comment ();
						Lexer.doc_state =
							XmlCommentState.Allowed;
					}
				}
			} else {
				yyVal = new Attributes (sect);
			}		
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_62()
#line 694 "cs-parser.jay"
{
		if (current_attr_target != String.Empty) {
			Attributes attrs = yyVals[-1+yyTop] as Attributes;
			var sect = (List<Attribute>) yyVals[0+yyTop];

			if (global_attrs_enabled) {
				if (current_attr_target == "module") {
					current_container.Module.Compiled.AddAttributes (sect);
					yyVal = null;
				} else if (current_attr_target == "assembly") {
					CodeGen.Assembly.AddAttributes (sect, current_namespace);
					yyVal = null;
				} else {
					if (attrs == null)
						attrs = new Attributes (sect);
					else
						attrs.AddAttributes (sect);			
				}
			} else {
				if (attrs == null)
					attrs = new Attributes (sect);
				else
					attrs.AddAttributes (sect);
			}		
			yyVal = attrs;
		}
		else
			yyVal = null;
		current_attr_target = null;
	  }

void case_65()
#line 739 "cs-parser.jay"
{
		current_attr_target = (string)yyVals[-1+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_66()
#line 747 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }

void case_69()
#line 754 "cs-parser.jay"
{
		string name = GetTokenName (yyToken);
		yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
	  }

void case_71()
#line 766 "cs-parser.jay"
{
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }

void case_73()
#line 780 "cs-parser.jay"
{
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			Report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();

		if (current_attr_target == String.Empty)
			yyVal = null;
		else if (global_attrs_enabled && (current_attr_target == "assembly" || current_attr_target == "module"))
			/* FIXME: supply "nameEscaped" parameter here.*/
			yyVal = new GlobalAttribute (current_namespace, current_attr_target,
						  expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
		else
			yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
	  }

void case_78()
#line 818 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }

void case_79()
#line 824 "cs-parser.jay"
{
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }

void case_80()
#line 830 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			Report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
	  }

void case_81()
#line 845 "cs-parser.jay"
{
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (o[1], GetLocation (yyVals[-1+yyTop]));
	  }

void case_85()
#line 870 "cs-parser.jay"
{
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }

void case_86()
#line 879 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }

void case_104()
#line 926 "cs-parser.jay"
{
		Report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }

void case_106()
#line 943 "cs-parser.jay"
{ 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_107()
#line 949 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-5+yyTop]));
	  }

void case_108()
#line 960 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_109()
#line 966 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_111()
#line 977 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_127()
#line 1019 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			Report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }

void case_128()
#line 1032 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }

void case_133()
#line 1062 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_135()
#line 1075 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_136()
#line 1080 "cs-parser.jay"
{
		Report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_139()
#line 1095 "cs-parser.jay"
{
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type == TypeManager.void_type)
			Report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }

void case_140()
#line 1110 "cs-parser.jay"
{ 
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }

void case_141()
#line 1123 "cs-parser.jay"
{ 
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }

void case_142()
#line 1134 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]), GetLocation (yyVals[-6+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }

void case_146()
#line 1161 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		lbag.AppendToMember (current_field, GetLocation (yyVals[-2+yyTop]));
	  }

void case_151()
#line 1186 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_153()
#line 1196 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_158()
#line 1222 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_160()
#line 1235 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_161()
#line 1241 "cs-parser.jay"
{
		Report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }

void case_162()
#line 1249 "cs-parser.jay"
{
		variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }

void case_163()
#line 1256 "cs-parser.jay"
{
		var decls = (List<object>) yyVals[-2+yyTop];
		decls.Add (yyVals[0+yyTop]);
		lbag.AppendTo (yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
		yyVal = yyVals[-2+yyTop];
	  }

void case_164()
#line 1266 "cs-parser.jay"
{
		yyVal = new VariableDeclaration ((Tokenizer.LocatedToken) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_169()
#line 1284 "cs-parser.jay"
{
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_171()
#line 1293 "cs-parser.jay"
{
		Report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }

void case_172()
#line 1301 "cs-parser.jay"
{
		Report.Error (650, GetLocation (yyVals[-2+yyTop]), "Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. " +
			"To declare a fixed size buffer field, use the fixed keyword before the field type");
	  }

void case_175()
#line 1313 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_176()
#line 1318 "cs-parser.jay"
{
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (method);
		
		if (current_container.Kind == MemberKind.Interface && method.Block != null) {
			Report.Error (531, method.Location, "`{0}': interface members cannot have a definition", method.GetSignatureForError ());
		}

		current_local_parameters = null;

		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_179()
#line 1347 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			Report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

		Method method = new Method (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], (Modifiers) yyVals[-8+yyTop],
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop]);
				     
		if (yyVals[0+yyTop] != null && ((method.ModFlags & Modifiers.OVERRIDE) != 0 || method.IsExplicitImpl)) {
			Report.Error (460, method.Location,
				"`{0}': Cannot specify constraints for overrides and explicit interface implementation methods",
				method.GetSignatureForError ());
		}

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_182()
#line 1392 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			Report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		Method method;
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-9+yyTop];


		const Modifiers invalid_partial_mod = Modifiers.AccessibilityMask | Modifiers.ABSTRACT | Modifiers.EXTERN |
			Modifiers.NEW | Modifiers.OVERRIDE | Modifiers.SEALED | Modifiers.VIRTUAL;

		if ((modifiers & invalid_partial_mod) != 0) {
			Report.Error (750, name.Location, "A partial method cannot define access modifier or " +
       			"any of abstract, extern, new, override, sealed, or virtual modifiers");
			modifiers &= ~invalid_partial_mod;
		}

		if ((current_class.ModFlags & Modifiers.PARTIAL) == 0) {
			Report.Error (751, name.Location, "A partial method must be declared within a " +
       			"partial class or partial struct");
		}
		
		modifiers |= Modifiers.PARTIAL | Modifiers.PRIVATE;
		
		method = new Method (current_class, generic, new TypeExpression (TypeManager.void_type, GetLocation (yyVals[-7+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-10+yyTop]);

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		/* TODO: lbag, push void*/
		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-8+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }

void case_183()
#line 1447 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-3+yyTop];
		Report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		Method method = new Method (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop]);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (RootContext.Documentation != null)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }

void case_188()
#line 1476 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (compiler, pars_list.ToArray ());
	  }

void case_189()
#line 1481 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray ()); 
	  }

void case_190()
#line 1488 "cs-parser.jay"
{
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }

void case_191()
#line 1494 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (compiler, new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }

void case_192()
#line 1501 "cs-parser.jay"
{
		if (yyVals[-2+yyTop] != null)
			Report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }

void case_193()
#line 1511 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (compiler, new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }

void case_194()
#line 1517 "cs-parser.jay"
{
		Report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (compiler, pars_list.ToArray (), true);
	  }

void case_197()
#line 1537 "cs-parser.jay"
{
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }

void case_198()
#line 1546 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				Report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				Report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AppendTo (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }

void case_199()
#line 1570 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_200()
#line 1578 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		Report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }

void case_201()
#line 1587 "cs-parser.jay"
{
	  	Location l = GetLocation (yyVals[0+yyTop]);
		CheckIdentifierToken (yyToken, l);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], "NeedSomeGeneratorHere", (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }

void case_203()
#line 1601 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		if (RootContext.Version <= LanguageVersion.V_3) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				Report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				Report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			Report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = (Expression) yyVals[0+yyTop];
	  }

void case_207()
#line 1650 "cs-parser.jay"
{
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					Report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					Report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					Report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }

void case_208()
#line 1674 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }

void case_209()
#line 1681 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }

void case_210()
#line 1688 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }

void case_211()
#line 1701 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }

void case_212()
#line 1706 "cs-parser.jay"
{
		Report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }

void case_213()
#line 1713 "cs-parser.jay"
{
		CheckIdentifierToken (yyToken, GetLocation (yyVals[0+yyTop]));
		yyVal = null;
	  }

void case_214()
#line 1721 "cs-parser.jay"
{
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			Report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }

void case_215()
#line 1726 "cs-parser.jay"
{
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			Report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			Report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }

void case_217()
#line 1742 "cs-parser.jay"
{
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		Report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }

void case_218()
#line 1753 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			tmpComment = Lexer.consume_doc_comment ();
	  }

void case_219()
#line 1758 "cs-parser.jay"
{
		current_property = new Property (current_class, (FullNamedExpression) yyVals[-3+yyTop], (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (current_property.TypeExpression.Type == TypeManager.void_type)
			Report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }

void case_220()
#line 1771 "cs-parser.jay"
{
		lexer.PropertyParsing = false;
		
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();				
	  }

void case_221()
#line 1778 "cs-parser.jay"
{
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }

void case_223()
#line 1792 "cs-parser.jay"
{
		valid_param_mod = 0;
	  
		Indexer indexer = new Indexer (current_class, (FullNamedExpression) yyVals[-6+yyTop],
			(MemberName)yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (indexer.TypeExpression.Type == TypeManager.void_type)
			Report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.Parameters.IsEmpty) {
			Report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }

void case_225()
#line 1822 "cs-parser.jay"
{ 
		if (RootContext.Documentation != null)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }

void case_230()
#line 1838 "cs-parser.jay"
{
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		Report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				Report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				Report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }

void case_231()
#line 1852 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_232()
#line 1874 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_233()
#line 1895 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != ModifierNone && RootContext.Version == LanguageVersion.ISO_1) {
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			Report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }

void case_234()
#line 1922 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				Report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (RootContext.Documentation != null
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }

void case_236()
#line 1944 "cs-parser.jay"
{
		lbag.AppendToMember (lbag.LastMember, GetLocation (yyVals[0+yyTop]));
	  	yyVal = null;
	  }

void case_237()
#line 1949 "cs-parser.jay"
{
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }

void case_239()
#line 1964 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_240()
#line 1971 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_241()
#line 1982 "cs-parser.jay"
{
		--lexer.parsing_declaration;	  
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_242()
#line 1988 "cs-parser.jay"
{
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_258()
#line 2039 "cs-parser.jay"
{
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);

			if (RootContext.Documentation != null) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }

void case_262()
#line 2070 "cs-parser.jay"
{
		Report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_264()
#line 2082 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				Report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				Report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				Report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				Report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_289()
#line 2158 "cs-parser.jay"
{
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_291()
#line 2177 "cs-parser.jay"
{
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_292()
#line 2192 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_293()
#line 2198 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_294()
#line 2208 "cs-parser.jay"
{ 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (RootContext.Documentation != null)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_295()
#line 2227 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }

void case_296()
#line 2236 "cs-parser.jay"
{
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }

void case_297()
#line 2247 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		
		if (lt.Value != current_container.MemberName.Name) {
			Report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				Report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				Report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c;
	  }

void case_303()
#line 2292 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_305()
#line 2302 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_306()
#line 2307 "cs-parser.jay"
{
		Report.Error (1018, GetLocation (yyVals[-1+yyTop]), "Keyword `this' or `base' expected");
		yyVal = null;
	  }

void case_307()
#line 2315 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }

void case_308()
#line 2324 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			Report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			Report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (RootContext.Documentation != null)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }

void case_309()
#line 2349 "cs-parser.jay"
{
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			Report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }

void case_310()
#line 2363 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }

void case_311()
#line 2376 "cs-parser.jay"
{
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }

void case_312()
#line 2384 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface)
			Report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }

void case_313()
#line 2391 "cs-parser.jay"
{
		if (RootContext.Documentation != null) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }

void case_316()
#line 2410 "cs-parser.jay"
{
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }

void case_321()
#line 2434 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_323()
#line 2444 "cs-parser.jay"
{
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_324()
#line 2453 "cs-parser.jay"
{
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			Report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }

void case_328()
#line 2474 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_329()
#line 2479 "cs-parser.jay"
{
		Report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }

void case_330()
#line 2484 "cs-parser.jay"
{ 
		Report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }

void case_331()
#line 2492 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_332()
#line 2504 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_333()
#line 2520 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			Report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }

void case_334()
#line 2532 "cs-parser.jay"
{
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			Report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }

void case_335()
#line 2548 "cs-parser.jay"
{
		Report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }

void case_337()
#line 2560 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }

void case_338()
#line 2565 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			Report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }

void case_339()
#line 2577 "cs-parser.jay"
{
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_340()
#line 2583 "cs-parser.jay"
{
		if (RootContext.Documentation != null)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (RootContext.Documentation != null)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_342()
#line 2600 "cs-parser.jay"
{
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null ||
			(te.Type != TypeManager.int32_type && te.Type != TypeManager.uint32_type &&
			te.Type != TypeManager.int64_type && te.Type != TypeManager.uint64_type &&
			te.Type != TypeManager.short_type && te.Type != TypeManager.ushort_type &&
			te.Type != TypeManager.byte_type && te.Type != TypeManager.sbyte_type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), Report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }

void case_343()
#line 2614 "cs-parser.jay"
{
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }

void case_348()
#line 2632 "cs-parser.jay"
{
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }

void case_349()
#line 2640 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (RootContext.Documentation != null) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }

void case_350()
#line 2653 "cs-parser.jay"
{
	  	++lexer.parsing_block;
		if (RootContext.Documentation != null) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }

void case_351()
#line 2661 "cs-parser.jay"
{ 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (RootContext.Documentation != null)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }

void case_353()
#line 2686 "cs-parser.jay"
{
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		if (RootContext.Documentation != null) {
			del.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }

void case_355()
#line 2709 "cs-parser.jay"
{
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }

void case_357()
#line 2722 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "nullable types");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }

void case_359()
#line 2735 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_361()
#line 2746 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }

void case_362()
#line 2755 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_364()
#line 2767 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }

void case_365()
#line 2776 "cs-parser.jay"
{
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }

void case_366()
#line 2784 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_367()
#line 2790 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_369()
#line 2806 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_370()
#line 2815 "cs-parser.jay"
{
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }

void case_372()
#line 2826 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }

void case_373()
#line 2835 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }

void case_374()
#line 2840 "cs-parser.jay"
{
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_375()
#line 2848 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_376()
#line 2854 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_377()
#line 2862 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_379()
#line 2872 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-2+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_380()
#line 2885 "cs-parser.jay"
{
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }

void case_381()
#line 2891 "cs-parser.jay"
{
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }

void case_382()
#line 2901 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }

void case_383()
#line 2906 "cs-parser.jay"
{
  	  	if (GetTokenName (yyToken) == "type")
			Report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }

void case_388()
#line 2940 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_390()
#line 2949 "cs-parser.jay"
{
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_392()
#line 2958 "cs-parser.jay"
{
	  	Report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_395()
#line 2974 "cs-parser.jay"
{
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }

void case_397()
#line 2991 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_400()
#line 3007 "cs-parser.jay"
{
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_401()
#line 3013 "cs-parser.jay"
{
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }

void case_402()
#line 3022 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast) {
			Report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }

void case_403()
#line 3029 "cs-parser.jay"
{
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }

void case_439()
#line 3090 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }

void case_440()
#line 3094 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }

void case_451()
#line 3135 "cs-parser.jay"
{
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_453()
#line 3147 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_454()
#line 3153 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_455()
#line 3159 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_456()
#line 3165 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }

void case_458()
#line 3174 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }

void case_460()
#line 3182 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }

void case_461()
#line 3190 "cs-parser.jay"
{
		yyVal = new Invocation ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_464()
#line 3203 "cs-parser.jay"
{
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }

void case_465()
#line 3213 "cs-parser.jay"
{
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_468()
#line 3229 "cs-parser.jay"
{
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_469()
#line 3235 "cs-parser.jay"
{
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_470()
#line 3240 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_471()
#line 3248 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_473()
#line 3257 "cs-parser.jay"
{
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }

void case_474()
#line 3265 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_475()
#line 3272 "cs-parser.jay"
{
	  	Report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }

void case_480()
#line 3290 "cs-parser.jay"
{ 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_481()
#line 3296 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_482()
#line 3306 "cs-parser.jay"
{
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				Report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_483()
#line 3321 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_484()
#line 3326 "cs-parser.jay"
{
	  	Report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }

void case_489()
#line 3347 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_490()
#line 3352 "cs-parser.jay"
{ 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_491()
#line 3357 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_492()
#line 3362 "cs-parser.jay"
{
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_495()
#line 3378 "cs-parser.jay"
{
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_496()
#line 3386 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_497()
#line 3392 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_498()
#line 3398 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }

void case_499()
#line 3406 "cs-parser.jay"
{
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }

void case_500()
#line 3412 "cs-parser.jay"
{
		Arguments args = (Arguments) yyVals[-2+yyTop];
		args.Add ((Argument) yyVals[0+yyTop]);
		lbag.AppendTo (args, GetLocation (yyVals[-1+yyTop]));
		yyVal = args;	  
	  }

void case_504()
#line 3437 "cs-parser.jay"
{
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_505()
#line 3442 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }

void case_508()
#line 3464 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			if (RootContext.Version <= LanguageVersion.ISO_2)
				Report.FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_509()
#line 3477 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_510()
#line 3489 "cs-parser.jay"
{
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }

void case_511()
#line 3497 "cs-parser.jay"
{
	  	if (yyVals[0+yyTop] == null)
	  		Report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_512()
#line 3504 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }

void case_513()
#line 3511 "cs-parser.jay"
{
		Report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }

void case_514()
#line 3516 "cs-parser.jay"
{
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }

void case_516()
#line 3527 "cs-parser.jay"
{
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }

void case_517()
#line 3535 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[-3+yyTop]), "anonymous types");
	  	else if (RootContext.Version <= LanguageVersion.ISO_2)
	  		Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_522()
#line 3560 "cs-parser.jay"
{
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_523()
#line 3566 "cs-parser.jay"
{
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }

void case_524()
#line 3575 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_525()
#line 3581 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }

void case_526()
#line 3587 "cs-parser.jay"
{
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }

void case_527()
#line 3592 "cs-parser.jay"
{
		Report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }

void case_531()
#line 3607 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_538()
#line 3648 "cs-parser.jay"
{
		yyVal = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_539()
#line 3653 "cs-parser.jay"
{
		yyVal = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		if (yyVals[-1+yyTop] != null)
			lbag.AppendTo (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_540()
#line 3663 "cs-parser.jay"
{
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }

void case_541()
#line 3669 "cs-parser.jay"
{
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		lbag.AppendTo (list, GetLocation (yyVals[-1+yyTop]));
		yyVal = list;
	  }

void case_542()
#line 3676 "cs-parser.jay"
{
	  	Error_SyntaxError (yyToken);
	  	yyVal = new List<Expression> ();
	  }

void case_544()
#line 3688 "cs-parser.jay"
{
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_547()
#line 3699 "cs-parser.jay"
{
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }

void case_548()
#line 3707 "cs-parser.jay"
{  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }

void case_549()
#line 3713 "cs-parser.jay"
{
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }

void case_550()
#line 3720 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }

void case_551()
#line 3726 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_552()
#line 3732 "cs-parser.jay"
{
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }

void case_553()
#line 3744 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (GetLocation (yyVals[0+yyTop]), "generics");
		else if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }

void case_554()
#line 3756 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (RootContext.Version == LanguageVersion.ISO_1)
			Report.FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }

void case_555()
#line 3767 "cs-parser.jay"
{ 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_556()
#line 3775 "cs-parser.jay"
{
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_557()
#line 3783 "cs-parser.jay"
{
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_558()
#line 3791 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop])), lt.Value, lt.Location);
	  }

void case_564()
#line 3822 "cs-parser.jay"
{
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_565()
#line 3830 "cs-parser.jay"
{
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_570()
#line 3854 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_571()
#line 3859 "cs-parser.jay"
{
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_580()
#line 3900 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_581()
#line 3905 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_582()
#line 3910 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_584()
#line 3919 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_586()
#line 3928 "cs-parser.jay"
{
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }

void case_590()
#line 3945 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_591()
#line 3950 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_593()
#line 3959 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_594()
#line 3964 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_595()
#line 3969 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_596()
#line 3974 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_598()
#line 3983 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_599()
#line 3988 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_601()
#line 3997 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_603()
#line 4006 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_605()
#line 4015 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_607()
#line 4024 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_609()
#line 4033 "cs-parser.jay"
{
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_611()
#line 4042 "cs-parser.jay"
{
		if (RootContext.Version < LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_613()
#line 4053 "cs-parser.jay"
{
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_615()
#line 4065 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_616()
#line 4070 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_617()
#line 4075 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_618()
#line 4080 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_619()
#line 4085 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_620()
#line 4090 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_621()
#line 4095 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_622()
#line 4100 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_623()
#line 4105 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_624()
#line 4110 "cs-parser.jay"
{
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }

void case_625()
#line 4118 "cs-parser.jay"
{
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }

void case_626()
#line 4125 "cs-parser.jay"
{
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			Report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }

void case_627()
#line 4139 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }

void case_628()
#line 4145 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }

void case_629()
#line 4151 "cs-parser.jay"
{
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }

void case_631()
#line 4159 "cs-parser.jay"
{ 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (compiler, pars_list.ToArray ());
	  }

void case_633()
#line 4170 "cs-parser.jay"
{
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }

void case_635()
#line 4182 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (compiler, p), GetLocation (yyVals[-1+yyTop]));
	  }

void case_636()
#line 4188 "cs-parser.jay"
{
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }

void case_637()
#line 4193 "cs-parser.jay"
{
		if (RootContext.Version <= LanguageVersion.ISO_2)
			Report.FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "lambda expressions");
	  
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }

void case_638()
#line 4200 "cs-parser.jay"
{
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }

void case_639()
#line 4205 "cs-parser.jay"
{
		yyVal = end_anonymous ((ToplevelBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]));
	  }

void case_648()
#line 4245 "cs-parser.jay"
{
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }

void case_649()
#line 4251 "cs-parser.jay"
{
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (RootContext.Documentation != null) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  }

void case_650()
#line 4263 "cs-parser.jay"
{
		--lexer.parsing_declaration;
		if (RootContext.Documentation != null)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }

void case_651()
#line 4269 "cs-parser.jay"
{
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }

void case_654()
#line 4284 "cs-parser.jay"
{
	    mod_locations = null;
		yyVal = ModifierNone;
	  }

void case_657()
#line 4294 "cs-parser.jay"
{ 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];

		if ((m1 & m2) != 0) {
			Report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			Report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }

void case_658()
#line 4313 "cs-parser.jay"
{
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == RootContext.ToplevelTypes)
			Report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }

void case_659()
#line 4321 "cs-parser.jay"
{
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_660()
#line 4326 "cs-parser.jay"
{
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_661()
#line 4331 "cs-parser.jay"
{
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_662()
#line 4336 "cs-parser.jay"
{
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_663()
#line 4341 "cs-parser.jay"
{
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_664()
#line 4346 "cs-parser.jay"
{
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_665()
#line 4351 "cs-parser.jay"
{
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_666()
#line 4356 "cs-parser.jay"
{
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_667()
#line 4361 "cs-parser.jay"
{
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_668()
#line 4366 "cs-parser.jay"
{
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_669()
#line 4371 "cs-parser.jay"
{
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_670()
#line 4376 "cs-parser.jay"
{
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_671()
#line 4381 "cs-parser.jay"
{
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_676()
#line 4407 "cs-parser.jay"
{
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_677()
#line 4413 "cs-parser.jay"
{
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				Report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }

void case_678()
#line 4432 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }

void case_679()
#line 4440 "cs-parser.jay"
{
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_680()
#line 4446 "cs-parser.jay"
{
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			Report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				Report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					Report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }

void case_681()
#line 4472 "cs-parser.jay"
{
		if (yyVals[0+yyTop] is ComposedCast)
			Report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }

void case_682()
#line 4479 "cs-parser.jay"
{
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_686()
#line 4499 "cs-parser.jay"
{
		if (RootContext.MetadataCompatibilityVersion < MetadataVersion.v2)	  
	  		Report.FeatureIsNotSupported (lexer.Location, "generic type variance");
		else if (RootContext.Version <= LanguageVersion.V_3)
			Report.FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }

void case_689()
#line 4535 "cs-parser.jay"
{
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_691()
#line 4547 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_692()
#line 4552 "cs-parser.jay"
{
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }

void case_693()
#line 4561 "cs-parser.jay"
{
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }

void case_694()
#line 4566 "cs-parser.jay"
{
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }

void case_699()
#line 4584 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }

void case_704()
#line 4610 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null && (Block) yyVals[0+yyTop] != current_block){
			current_block.AddStatement ((Statement) yyVals[0+yyTop]);
			current_block = (Block) yyVals[0+yyTop];
		}
	  }

void case_734()
#line 4658 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_735()
#line 4663 "cs-parser.jay"
{
		  Report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }

void case_737()
#line 4678 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, lt.Location);

		if (current_block.AddLabel (labeled))
			current_block.AddStatement (labeled);
	  }

void case_739()
#line 4690 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
			yyVal = declare_local_variables (de.Item1, de.Item2, de.Item1.Location);
		}
	  }

void case_740()
#line 4698 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];

			yyVal = declare_local_constants (de.Item1, de.Item2);
		}
	  }

void case_742()
#line 4710 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_743()
#line 4726 "cs-parser.jay"
{ 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }

void case_744()
#line 4756 "cs-parser.jay"
{
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }

void case_745()
#line 4767 "cs-parser.jay"
{
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }

void case_748()
#line 4782 "cs-parser.jay"
{
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), Report);
		yyVal = new TypeExpression (TypeManager.void_type, GetLocation (yyVals[0+yyTop]));
	  }

void case_750()
#line 4791 "cs-parser.jay"
{
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }

void case_752()
#line 4806 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null) {
			VarExpr ve = yyVals[-1+yyTop] as VarExpr;
			if (ve != null) {
				if (!((VariableDeclaration) ((List<object>)yyVals[0+yyTop]) [0]).HasInitializer)
					ve.VariableInitializersCount = 0;
				else
					ve.VariableInitializersCount = ((List<object>)yyVals[0+yyTop]).Count;
			}
				
			yyVal = new Tuple<FullNamedExpression, List<object>> ((FullNamedExpression) yyVals[-1+yyTop], (List<object>) yyVals[0+yyTop]);
		} else
			yyVal = null;
	  }

void case_753()
#line 4824 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null)
			yyVal = new Tuple<FullNamedExpression, List<object>> ((FullNamedExpression) yyVals[-1+yyTop], (List<object>) yyVals[0+yyTop]);
		else
			yyVal = null;
	  }

void case_754()
#line 4834 "cs-parser.jay"
{
  	  	variables_bucket.Clear ();
		if (yyVals[0+yyTop] != null)
			variables_bucket.Add (yyVals[0+yyTop]);
		yyVal = variables_bucket;
	  }

void case_755()
#line 4841 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var constants = (List<object>) yyVals[-2+yyTop];
			constants.Add (yyVals[0+yyTop]);
		}
	  }

void case_757()
#line 4855 "cs-parser.jay"
{
		Report.Error (145, GetLocation (yyVals[-1+yyTop]), "A const field requires a value to be provided");
		yyVal = null;
	  }

void case_758()
#line 4863 "cs-parser.jay"
{
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_762()
#line 4881 "cs-parser.jay"
{
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) {
			Expression.Error_InvalidExpressionStatement (Report, GetLocation (yyVals[0+yyTop]));
			s = EmptyExpressionStatement.Instance;
		}

		yyVal = new StatementExpression (s);
	  }

void case_763()
#line 4891 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }

void case_764()
#line 4899 "cs-parser.jay"
{
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }

void case_765()
#line 4907 "cs-parser.jay"
{
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }

void case_768()
#line 4921 "cs-parser.jay"
{ 
		if (yyVals[0+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[0+yyTop]), "Possible mistaken empty statement");
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_769()
#line 4930 "cs-parser.jay"
{
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[-2+yyTop]), "Possible mistaken empty statement");
		if (yyVals[0+yyTop] is EmptyStatement)
			Report.Warning (642, 3, GetLocation (yyVals[0+yyTop]), "Possible mistaken empty statement");
	  }

void case_770()
#line 4943 "cs-parser.jay"
{ 
		if (switch_stack == null)
			switch_stack = new Stack<Block> (2);
		switch_stack.Push (current_block);
	  }

void case_771()
#line 4950 "cs-parser.jay"
{
		yyVal = new Switch ((Expression) yyVals[-4+yyTop], (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		current_block = (Block) switch_stack.Pop ();
	  }

void case_772()
#line 4960 "cs-parser.jay"
{
		Report.Warning (1522, 1, lexer.Location, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }

void case_774()
#line 4969 "cs-parser.jay"
{
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_775()
#line 4976 "cs-parser.jay"
{
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }

void case_778()
#line 4997 "cs-parser.jay"
{
		var labels = new List<SwitchLabel> (4);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }

void case_779()
#line 5004 "cs-parser.jay"
{
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }

void case_780()
#line 5014 "cs-parser.jay"
{
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }

void case_786()
#line 5033 "cs-parser.jay"
{
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_787()
#line 5042 "cs-parser.jay"
{
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_788()
#line 5050 "cs-parser.jay"
{
		Location l = lexer.Location;
		start_block (l);  
		current_block.IsGenerated = true;
		Block assign_block = current_block;

		if (yyVals[-1+yyTop] is Tuple<FullNamedExpression, List<object>>){
			var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
			
			var type = de.Item1;

			foreach (VariableDeclaration decl in de.Item2){

				LocalInfo vi;

				vi = current_block.AddVariable (type, decl.identifier, decl.Location);
				if (vi == null)
					continue;

				Expression expr = decl.GetInitializer (type);
					
				LocalVariableReference var;
				var = new LocalVariableReference (assign_block, decl.identifier, l);

				if (expr != null) {
					Assign a = new SimpleAssign (var, expr, decl.Location);
					
					assign_block.AddStatement (new StatementExpression (a));
				}
			}
			
			/* Note: the $$ below refers to the value of this code block, not of the LHS non-terminal.*/
			/* This can be referred to as $5 below.*/
			yyVal = null;
		} else {
			yyVal = yyVals[-1+yyTop];
		}
	  }

void case_789()
#line 5091 "cs-parser.jay"
{
		For f = new For ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-8+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (lexer.Location);
	  }

void case_800()
#line 5128 "cs-parser.jay"
{
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null)
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
	  	else
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		
		lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
		yyVal = sl;
	  }

void case_801()
#line 5142 "cs-parser.jay"
{
		Report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }

void case_802()
#line 5148 "cs-parser.jay"
{
		start_block (lexer.Location);
		current_block.IsGenerated = true;
		Block foreach_block = current_block;

		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		Location l = lt.Location;
		LocalInfo vi = foreach_block.AddVariable ((Expression) yyVals[-4+yyTop], lt.Value, l);
		if (vi != null) {
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Foreach);

			/* Get a writable reference to this read-only variable.*/
			/**/
			/* Note that the $$ here refers to the value of _this_ code block,*/
			/* not the value of the LHS non-terminal.  This can be referred to as $8 below.*/
			yyVal = new LocalVariableReference (foreach_block, lt.Value, l, vi, false);
		} else {
			yyVal = null;
		}
	  }

void case_803()
#line 5169 "cs-parser.jay"
{
		if (yyVals[-1+yyTop] != null) {
			Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariableReference) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
			lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
			
			current_block.AddStatement (f);
		}

		yyVal = end_block (lexer.Location);
	  }

void case_810()
#line 5192 "cs-parser.jay"
{
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_811()
#line 5200 "cs-parser.jay"
{
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_812()
#line 5208 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_813()
#line 5214 "cs-parser.jay"
{
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_814()
#line 5219 "cs-parser.jay"
{
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_815()
#line 5227 "cs-parser.jay"
{
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_816()
#line 5235 "cs-parser.jay"
{
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }

void case_817()
#line 5243 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			Report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Toplevel.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_818()
#line 5259 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			Report.Error (1003, lt.Location, "; expected");
		} else if (RootContext.Version == LanguageVersion.ISO_1){
			Report.FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.Toplevel.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_822()
#line 5285 "cs-parser.jay"
{
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_823()
#line 5290 "cs-parser.jay"
{
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }

void case_824()
#line 5295 "cs-parser.jay"
{
		Report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }

void case_825()
#line 5303 "cs-parser.jay"
{
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }

void case_826()
#line 5310 "cs-parser.jay"
{
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			Report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }

void case_829()
#line 5334 "cs-parser.jay"
{
		if (yyVals[0+yyTop] != null) {
			var cc = (Tuple<FullNamedExpression, Tokenizer.LocatedToken>) yyVals[0+yyTop];
			var lt = cc.Item2;

			if (lt != null){
				List<object> one = new List<object> (1);

				one.Add (new VariableDeclaration (lt, null));

				start_block (lexer.Location);
				current_block = declare_local_variables (cc.Item1, one, lt.Location);
			}
		}
	  }

void case_830()
#line 5348 "cs-parser.jay"
{
		Expression type = null;
		string id = null;
		Block var_block = null;

		if (yyVals[-2+yyTop] != null){
			var cc = (Tuple<FullNamedExpression, Tokenizer.LocatedToken>) yyVals[-2+yyTop];
			type = cc.Item1;
			var lt = cc.Item2;

			if (lt != null){
				id = lt.Value;
				var_block = end_block (lexer.Location);
			}
		}

		yyVal = new Catch (type, id, (Block) yyVals[0+yyTop], var_block, ((Block) yyVals[0+yyTop]).loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]));
		if (yyVals[-2+yyTop] != null)
			lbag.AppendTo (yyVal, lbag.GetLocations (yyVals[-2+yyTop]));
	  }

void case_833()
#line 5378 "cs-parser.jay"
{
		yyVal = new Tuple<FullNamedExpression, Tokenizer.LocatedToken> ((FullNamedExpression)yyVals[-2+yyTop], (Tokenizer.LocatedToken) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }

void case_834()
#line 5383 "cs-parser.jay"
{
		Report.Error (1015, GetLocation (yyVals[-1+yyTop]), "A type that derives from `System.Exception', `object', or `string' expected");
		yyVal = null;
	  }

void case_837()
#line 5405 "cs-parser.jay"
{
		if (!RootContext.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }

void case_840()
#line 5421 "cs-parser.jay"
{
		Expression type = (Expression) yyVals[-4+yyTop];
	  	var list = (List<KeyValuePair<Tokenizer.LocatedToken, Expression>>) yyVals[-3+yyTop];
		Fixed f = new Fixed (type,
			list.ConvertAll (i => {
				var v = new KeyValuePair<LocalInfo, Expression> (current_block.AddVariable (type, i.Key.Value, i.Key.Location), i.Value);
				if (v.Key != null) {
					v.Key.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Fixed);
					v.Key.Pinned = true;
				}
				return v;
			}), (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));

		lbag.AddStatement (f, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));

		current_block.AddStatement (f);

		yyVal = end_block (lexer.Location);
	  }

void case_841()
#line 5443 "cs-parser.jay"
{ 
	   	var declarators = new List<KeyValuePair<Tokenizer.LocatedToken, Expression>> (2);
	   	if (yyVals[0+yyTop] != null)
			declarators.Add ((KeyValuePair<Tokenizer.LocatedToken, Expression>)yyVals[0+yyTop]);
		yyVal = declarators;
	  }

void case_842()
#line 5450 "cs-parser.jay"
{
		var declarators = (List<KeyValuePair<Tokenizer.LocatedToken, Expression>>) yyVals[-2+yyTop];
		if (yyVals[0+yyTop] != null)
			declarators.Add ((KeyValuePair<Tokenizer.LocatedToken, Expression>)yyVals[0+yyTop]);
		yyVal = declarators;
	  }

void case_843()
#line 5460 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new KeyValuePair<Tokenizer.LocatedToken, Expression> (lt, (Expression) yyVals[0+yyTop]);
	  }

void case_844()
#line 5465 "cs-parser.jay"
{
		Report.Error (210, ((Tokenizer.LocatedToken) yyVals[0+yyTop]).Location, "You must provide an initializer in a fixed or using statement declaration");
		yyVal = null;
	  }

void case_845()
#line 5473 "cs-parser.jay"
{
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }

void case_846()
#line 5481 "cs-parser.jay"
{
		start_block (lexer.Location);
		Block assign_block = current_block;
		assign_block.IsGenerated = true;

		var de = (Tuple<FullNamedExpression, List<object>>) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-3+yyTop]);

		var vars = new Stack<Tuple<LocalVariableReference, Expression>> ();

		lbag.AddStatement (assign_block, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));

		foreach (VariableDeclaration decl in de.Item2) {
			LocalInfo vi = current_block.AddVariable (de.Item1, decl.identifier, decl.Location);
			if (vi == null)
				continue;
			vi.SetReadOnlyContext (LocalInfo.ReadOnlyContext.Using);

			Expression expr = decl.GetInitializer (de.Item1);
			if (expr == null) {
				Report.Error (210, l, "You must provide an initializer in a fixed or using statement declaration");
				continue;
			}
			LocalVariableReference var;

			/* Get a writable reference to this read-only variable.*/
			var = new LocalVariableReference (assign_block, decl.identifier, l, vi, false);

			/* This is so that it is not a warning on using variables*/
			vi.Used = true;

			vars.Push (new Tuple<LocalVariableReference, Expression> (var, expr));

			/* Assign a = new SimpleAssign (var, expr, decl.Location);*/
			/* assign_block.AddStatement (new StatementExpression (a));*/
		}

		/* Note: the $$ here refers to the value of this code block and not of the LHS non-terminal.*/
		/* It can be referred to as $5 below.*/
		yyVal = vars;
	  }

void case_847()
#line 5523 "cs-parser.jay"
{
		Statement stmt = (Statement) yyVals[0+yyTop];
		var vars = (Stack<Tuple<LocalVariableReference, Expression>>) yyVals[-1+yyTop];
		Location l = GetLocation (yyVals[-5+yyTop]);

		while (vars.Count > 0) {
			  var de = vars.Pop ();
			  stmt = new Using (de.Item1, de.Item2, stmt, l);
		}
		current_block.AddStatement (stmt);
		yyVal = end_block (lexer.Location);
	  }

void case_849()
#line 5540 "cs-parser.jay"
{
		UsingTemporary usingTemporary = new UsingTemporary ((Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddStatement (usingTemporary, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		current_block.AddStatement (usingTemporary);
		yyVal = end_block (lexer.Location);
	  }

void case_850()
#line 5553 "cs-parser.jay"
{
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_851()
#line 5565 "cs-parser.jay"
{
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_852()
#line 5576 "cs-parser.jay"
{
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_853()
#line 5583 "cs-parser.jay"
{
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_854()
#line 5592 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop])));
	  }

void case_855()
#line 5599 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_856()
#line 5613 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop])));
	  }

void case_857()
#line 5620 "cs-parser.jay"
{
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }

void case_859()
#line 5638 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_861()
#line 5653 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_862()
#line 5670 "cs-parser.jay"
{
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }

void case_865()
#line 5693 "cs-parser.jay"
{
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_866()
#line 5700 "cs-parser.jay"
{
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }

void case_867()
#line 5708 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_868()
#line 5715 "cs-parser.jay"
{
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_872()
#line 5731 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }

void case_879()
#line 5751 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }

void case_881()
#line 5769 "cs-parser.jay"
{
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (BooleanExpression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }

void case_882()
#line 5779 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_883()
#line 5787 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_884()
#line 5795 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_885()
#line 5803 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		SimpleMemberName sn2 = null;
		
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
		} else {
			var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			sn2 = new SimpleMemberName (lt2.Value, lt2.Location);
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block,
				sn2, GetLocation (yyVals[-11+yyTop]));
		}

		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		((Linq.QueryBlock)current_block).AddRangeVariable (sn2 ?? sn);
	  }

void case_886()
#line 5827 "cs-parser.jay"
{
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_887()
#line 5835 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }

void case_888()
#line 5843 "cs-parser.jay"
{
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_889()
#line 5851 "cs-parser.jay"
{
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new SimpleMemberName (lt.Value, lt.Location);
		SimpleMemberName sn2 = null;
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		if (yyVals[0+yyTop] == null) {
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			var lt2 = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			sn2 = new SimpleMemberName (lt2.Value, lt2.Location);
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, sn2, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
			
		((Linq.QueryBlock)current_block).AddRangeVariable (sn2 ?? sn);
	  }

void case_893()
#line 5892 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }

void case_895()
#line 5903 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
	  }

void case_896()
#line 5910 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }

void case_898()
#line 5919 "cs-parser.jay"
{
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (compiler, (Linq.QueryBlock) current_block, lexer.Location);	 
	 }

void case_899()
#line 5926 "cs-parser.jay"
{
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }

void case_907()
#line 5966 "cs-parser.jay"
{
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (compiler, current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }

void case_908()
#line 5982 "cs-parser.jay"
{
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, new SimpleMemberName (lt.Value, lt.Location), GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }

void case_911()
#line 6007 "cs-parser.jay"
{ 
	        Evaluator.LoadAliases (current_namespace);

		push_current_class (new Class (current_namespace, current_class, new MemberName ("Class" + class_count++),
			Modifiers.PUBLIC, null), null);

		var baseclass_list = new List<FullNamedExpression> ();
		baseclass_list.Add (new TypeExpression (Evaluator.InteractiveBaseClass, lexer.Location));
		current_container.AddBasesForPart (current_class, baseclass_list);

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (TypeManager.object_type, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (compiler, mpar);
		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (TypeManager.void_type, Location.Null),
			Modifiers.PUBLIC | Modifiers.STATIC,
			new MemberName ("Host"),
			pars,
			null /* attributes */);

		oob_stack.Push (method);
	        ++lexer.parsing_block;
		start_block (lexer.Location);
	  }

void case_912()
#line 6037 "cs-parser.jay"
{
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);
		current_container.AddMethod (method);

		--lexer.parsing_declaration;
		InteractiveResult = pop_current_class ();
		current_local_parameters = null;
	  }

#line default
   static readonly short [] yyLhs  = {              -1,
    0,    0,    0,    0,    5,    0,    2,    2,    1,    1,
    6,    6,    6,   10,   10,    7,    7,   11,   11,    8,
    8,   12,   12,   13,   20,   16,   18,   18,   18,   21,
   21,   22,   22,   15,   24,   19,   23,   28,   23,   23,
   26,   26,   25,   25,   27,   27,   29,   29,    9,    9,
    9,    9,   30,   30,   30,   30,   30,    3,   17,   17,
   38,   38,   39,   39,   40,   42,   42,   42,   42,   41,
   41,   46,   43,   44,   45,   45,   47,   47,   47,   47,
   47,   48,   48,   52,   49,   51,   53,   53,   53,   54,
   54,   55,   55,   56,   56,   56,   56,   56,   56,   56,
   56,   56,   56,   56,   67,   69,   72,   73,   34,   34,
   75,   71,   74,   74,   76,   76,   77,   77,   77,   77,
   77,   77,   77,   77,   77,   77,   80,   57,   81,   81,
   82,   82,   83,   85,   79,   79,   84,   84,   90,   31,
   94,   31,   31,   89,   97,   89,   91,   91,   98,   98,
   99,  100,   99,   95,   95,  101,  101,  102,  103,   93,
   93,  104,  104,  105,  105,  105,  106,  106,  106,  106,
  106,  107,   96,   96,  111,   32,  114,  115,  109,  116,
  117,  109,  109,  110,  110,  113,  113,  120,  120,  120,
  120,  120,  120,  120,  120,  120,  121,  121,  124,  124,
  124,  127,  124,  125,  125,  128,  128,  129,  129,  129,
  122,  122,  122,  130,  130,  130,  123,  132,  134,  135,
   58,  137,  138,  139,   60,  133,  133,  133,  133,  133,
  143,  140,  144,  141,  142,  142,  142,  145,  146,  147,
  149,   35,   35,  148,  148,  150,  150,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  154,   61,  153,  153,
  155,  155,  158,  152,  152,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
  157,  157,  157,  157,  157,  157,  157,  160,  159,  161,
  159,  159,  159,   62,  164,  166,  162,  163,  163,  165,
  165,  170,  168,  171,  168,  168,  172,   63,  174,   59,
  177,  178,   59,  173,  180,  173,  175,  175,  181,  181,
  182,  183,  182,  184,  179,  176,  176,  176,  176,  176,
  188,  185,  189,  186,  187,  187,  191,  193,  194,   36,
  190,  190,  190,  192,  192,  192,  195,  195,  196,  197,
  196,  198,  199,  200,   37,  201,  201,   14,   14,  202,
  202,  205,  204,  204,  204,  206,  206,  208,   66,  131,
  112,  112,  136,  136,  209,  209,  209,  207,  207,  210,
  210,  211,  211,  213,  213,   88,   78,   78,   92,   92,
  126,  126,  156,  156,  214,  214,  214,  214,  214,  218,
  218,  219,  219,  217,  217,  217,  217,  217,  217,  217,
  220,  220,  220,  220,  220,  220,  220,  220,  220,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
  221,  221,  221,  221,  221,  221,  221,  221,  222,  222,
  222,  223,  223,  223,  242,  242,  243,  243,  244,  244,
  225,  225,  241,  241,  241,  241,  241,  241,  241,  241,
  227,  245,  245,  246,  246,  247,  247,  249,  249,  249,
  250,  250,  250,  250,  250,  251,  251,  169,  169,  255,
  255,  255,  255,  255,  257,  257,  256,  256,  258,  258,
  258,  258,  258,  259,  228,  254,  254,  254,  260,  260,
  261,  261,  229,  230,  230,  231,  232,  233,  233,  224,
  224,  224,  224,  224,  265,  262,  234,  266,  266,  267,
  267,  268,  268,  269,  269,  269,  269,  263,  263,  215,
  215,  270,  270,  271,  271,  264,  264,   87,   87,  272,
  272,  272,  273,  235,  274,  274,  274,  275,  275,  275,
  275,  275,  276,  203,  236,  237,  238,  239,  278,  240,
  277,  277,  280,  279,  226,  281,  281,  281,  281,  283,
  283,  282,  282,  282,  282,  282,  282,  282,  284,  284,
  284,  284,  285,  285,  285,  285,  285,  285,  286,  286,
  286,  287,  287,  287,  287,  287,  288,  288,  288,  289,
  289,  290,  290,  291,  291,  292,  292,  293,  293,  294,
  294,  295,  295,  296,  296,  296,  296,  296,  296,  296,
  296,  296,  296,  296,  297,  297,  298,  298,  298,  299,
  299,  301,  300,  300,  303,  302,  304,  305,  302,   50,
   50,  252,  252,  252,   86,  307,  308,  309,  310,  311,
   33,   65,   65,   64,   64,  118,  118,  312,  312,  312,
  312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
  312,   68,   68,   70,   70,  313,  313,  314,  315,  315,
  316,  316,  316,  316,  212,  212,  317,  317,  319,  119,
  320,  320,  321,  167,  318,  318,  322,  322,  323,  323,
  323,  327,  327,  328,  328,  328,  325,  325,  325,  325,
  325,  325,  325,  325,  325,  325,  325,  325,  325,  329,
  329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
  329,  329,  343,  343,  343,  330,  344,  326,  324,  324,
  347,  347,  348,  348,  348,  348,  348,  348,  216,  216,
  349,  345,  346,  350,  350,  351,  351,  331,  331,  342,
  342,  352,  352,  353,  353,  332,  332,  354,  354,  356,
  355,  357,  357,  358,  358,  361,  359,  360,  360,  362,
  362,  333,  333,  333,  333,  363,  364,  369,  365,  367,
  367,  371,  371,  368,  368,  370,  370,  373,  372,  372,
  366,  374,  366,  334,  334,  334,  334,  334,  334,  375,
  376,  377,  377,  377,  378,  379,  380,  380,  108,  108,
  335,  335,  335,  335,  381,  381,  383,  383,  385,  382,
  384,  384,  386,  386,  336,  337,  387,  340,  389,  341,
  388,  388,  390,  390,  338,  391,  339,  392,  339,  306,
  306,  306,  306,  393,  393,  395,  395,  397,  396,  398,
  396,  394,  394,  402,  400,  403,  404,  400,  399,  399,
  405,  405,  406,  406,  406,  406,  406,  411,  407,  412,
  408,  413,  414,  415,  409,  417,  418,  419,  409,  416,
  416,  421,  410,  420,  424,  420,  423,  426,  423,  422,
  422,  422,  425,  425,  425,  401,  427,  401,    4,    4,
  428,    4,  430,    4,  429,  429,  429,  429,  253,  253,
  248,  248,
  };
   static readonly short [] yyLen = {           2,
    2,    3,    2,    1,    0,    3,    0,    1,    1,    2,
    1,    1,    1,    1,    2,    4,    2,    1,    2,    1,
    1,    5,    2,    3,    0,    6,    1,    3,    1,    0,
    1,    0,    1,    1,    0,    3,    4,    0,    3,    4,
    0,    1,    0,    1,    0,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    0,    1,
    1,    2,    5,    4,    2,    1,    1,    1,    1,    1,
    3,    0,    3,    1,    0,    3,    0,    1,    1,    3,
    3,    1,    1,    0,    4,    4,    0,    1,    1,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    0,    0,    0,   13,    5,
    0,    4,    0,    1,    1,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    9,    0,    1,
    1,    2,    3,    0,    3,    1,    1,    1,    0,    8,
    0,    9,    6,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    1,    1,    2,    3,    0,    4,
    2,    1,    3,    3,    1,    2,    1,    1,    5,    1,
    2,    3,    1,    1,    0,    3,    0,    0,   10,    0,
    0,   11,    8,    1,    1,    0,    1,    1,    3,    3,
    3,    5,    3,    5,    1,    1,    1,    3,    4,    6,
    4,    0,    7,    0,    1,    1,    2,    1,    1,    1,
    4,    6,    4,    1,    2,    2,    1,    0,    0,    0,
   10,    0,    0,    0,   13,    1,    2,    1,    2,    1,
    0,    5,    0,    5,    1,    1,    1,    0,    0,    0,
    0,   15,    5,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    5,    1,    1,
    1,    1,    0,    7,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    7,    0,
    7,    2,    2,    2,    0,    0,    9,    1,    1,    0,
    1,    0,    6,    0,    6,    2,    0,    8,    0,    9,
    0,    0,   10,    0,    0,    3,    0,    1,    1,    2,
    2,    0,    5,    0,    2,    2,    2,    1,    1,    1,
    0,    5,    0,    5,    1,    1,    0,    0,    0,   12,
    0,    2,    2,    0,    1,    2,    1,    3,    2,    0,
    5,    0,    0,    0,   13,    0,    1,    1,    3,    1,
    4,    2,    0,    3,    2,    1,    3,    0,    3,    1,
    1,    3,    1,    2,    3,    4,    4,    0,    3,    1,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    2,    2,    2,    2,    1,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    4,    4,    4,    3,    3,    4,    3,    4,
    4,    0,    1,    3,    4,    0,    1,    1,    3,    2,
    3,    1,    2,    3,    2,    1,    1,    0,    1,    1,
    3,    3,    2,    2,    1,    1,    1,    1,    2,    2,
    4,    3,    1,    1,    4,    1,    3,    2,    1,    3,
    1,    1,    1,    4,    3,    2,    2,    6,    3,    7,
    4,    3,    7,    3,    0,    2,    4,    1,    2,    0,
    1,    1,    3,    3,    1,    1,    1,    0,    1,    1,
    2,    2,    3,    1,    2,    0,    1,    2,    4,    1,
    3,    1,    0,    5,    1,    1,    1,    2,    3,    3,
    4,    4,    1,    2,    4,    4,    4,    3,    0,    4,
    0,    1,    0,    4,    4,    1,    2,    2,    1,    4,
    4,    1,    2,    2,    2,    2,    2,    2,    1,    3,
    3,    3,    1,    3,    3,    3,    3,    3,    1,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    1,
    3,    1,    3,    1,    3,    1,    3,    1,    3,    1,
    3,    1,    5,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    1,    3,    3,    2,    1,    0,
    1,    0,    2,    1,    0,    4,    0,    0,    7,    1,
    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
   15,    0,    1,    0,    1,    1,    2,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    0,    2,    0,    1,    1,    2,    4,    1,    3,
    1,    3,    1,    1,    0,    1,    1,    1,    0,    4,
    1,    1,    0,    4,    0,    1,    1,    2,    1,    1,
    1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    0,    4,    2,    2,
    1,    2,    2,    2,    2,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    3,    3,    2,    2,    2,    2,
    2,    1,    1,    1,    1,    1,    1,    5,    7,    0,
    8,    0,    1,    1,    2,    0,    3,    1,    2,    3,
    1,    1,    1,    1,    1,    5,    7,    0,   10,    0,
    1,    1,    1,    0,    1,    0,    1,    1,    1,    3,
    6,    0,    9,    1,    1,    1,    1,    1,    1,    2,
    2,    3,    4,    3,    3,    3,    4,    3,    0,    1,
    3,    4,    5,    3,    1,    2,    0,    1,    0,    4,
    0,    1,    4,    2,    2,    2,    0,    3,    0,    7,
    1,    3,    3,    1,    5,    0,    6,    0,    6,    2,
    2,    2,    2,    4,    5,    4,    5,    0,    5,    0,
    6,    3,    2,    0,    3,    0,    0,    6,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    0,    5,    0,
    3,    0,    0,    0,   12,    0,    0,    0,   13,    0,
    2,    0,    3,    1,    0,    4,    1,    0,    4,    1,
    2,    2,    1,    2,    2,    0,    0,    4,    2,    2,
    0,    4,    0,    3,    1,    2,    1,    0,    0,    1,
    1,    1,
  };
   static readonly short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,  913,    0,    0,    0,    4,
    0,    5,    9,   11,   12,   13,   20,   21,   50,    0,
   49,   51,   52,   53,   54,   55,   56,   57,    0,   61,
  175,   23,    0,    0,    0,  358,    0,  360,   17,    0,
   69,   67,   68,    0,    0,    0,    0,    0,   70,   72,
  909,    0,    0,   18,    0,    1,    0,   10,    3,    0,
  663,  669,  661,    0,  658,  668,  662,  660,  659,  666,
  664,  665,  671,  667,  670,    0,    0,  656,   62,    0,
    0,    0,  554,  362,    0,   24,    0,    0,    0,    0,
    0,    0,   65,    0,  765,    0,  406,    0,  412,  419,
    0,    0,    0,  407,    0,    0,    0,  409,  446,    0,
  408,    0,    0,    0,    0,  415,    0,  417,    0,  444,
  404,    0,  411,  413,    0,  405,    0,  503,    0,  445,
    0,  543,  416,  418,    0,  837,  414,    0,    0,    0,
    0,    0,  689,    0,  736,    0,    0,    0,    0,    0,
    0,    0,    0,  443,    0,  637,    0,  764,  720,    0,
    0,  410,    0,    0,  421,  422,    0,  424,  425,  426,
  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
  437,  438,  441,  442,  641,  572,    0,  569,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  642,
  640,  643,  644,  704,  706,    0,  702,  705,  721,  723,
  724,  725,  726,  727,  728,  729,  730,  731,  732,  722,
    0,    0,    0,    0,    0,  766,  767,  782,  783,  784,
  785,  804,  805,  806,  807,  808,  809,    0,    0,    0,
  917,  914,   19,    2,    6,   29,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  384,  386,    0,    0,
  657,  185,  176,  184,  365,    0,  366,  387,    0,    0,
    0,  359,   16,    0,   71,   64,    0,   73,    0,    0,
    0,  810,  447,  448,  835,    0,    0,    0,    0,    0,
    0,  423,    0,  811,    0,  563,  559,  562,  763,  762,
  707,  734,  733,  735,  708,  709,  710,  711,  712,  713,
  714,  715,  716,  717,  718,  719,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  820,    0,    0,  420,    0,  770,    0,
    0,    0,  836,    0,    0,    0,  751,  747,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  568,  573,  574,
  567,  578,  577,  575,  576,    0,    0,  635,  737,  440,
  439,    0,    0,    0,  357,    0,  745,  746,    0,  506,
  507,    0,    0,    0,  743,  744,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  920,  912,  703,  739,  740,    0,    0,  162,  742,  760,
  761,  880,    0,    0,    0,  892,  852,  850,  873,    0,
    0,  871,  874,  875,  876,  877,  853,  851,  916,    0,
    0,    0,  368,    0,    0,    0,  389,  399,    0,  395,
  396,  647,    0,    0,    0,  371,    0,    0,    0,    0,
  394,  397,  398,  364,    0,   22,  361,   63,    0,    0,
   78,   79,   82,   83,  505,    0,    0,  501,  502,    0,
  499,    0,    0,    0,  754,    0,    0,    0,    0,  758,
  759,    0,  792,  799,    0,  791,    0,    0,  645,    0,
  814,  812,  646,    0,    0,  527,    0,    0,    0,  518,
    0,  522,  532,  534,    0,    0,  512,  514,    0,    0,
    0,    0,    0,  509,  516,  531,  815,    0,    0,  816,
  824,    0,    0,    0,  825,    0,    0,  838,    0,    0,
  750,    0,    0,    0,    0,    0,    0,    0,  697,  699,
  700,  701,  451,  452,    0,  818,    0,    0,    0,  209,
  208,  210,    0,    0,    0,    0,  391,    0,  625,    0,
    0,  456,    0,  459,    0,  457,  558,    0,    0,    0,
    0,    0,  485,  488,    0,    0,  480,  487,  486,  579,
    0,  614,  615,  616,  617,  618,  619,  620,  621,  622,
  624,  623,  580,  582,  581,  587,  588,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  611,    0,    0,    0,  166,    0,    0,    0,
    0,    0,    0,    0,    0,  864,  866,  863,    0,  872,
   28,   35,    0,    0,    0,    0,  337,    0,  141,    0,
    0,    0,  243,    0,  110,    0,    0,    0,  177,    0,
    0,    0,  367,    0,   84,   76,    0,  455,  504,    0,
  556,  757,    0,    0,  565,  217,    0,    0,    0,  187,
    0,    0,    0,  197,  560,    0,    0,    0,  841,  788,
    0,    0,    0,  813,    0,    0,    0,  517,    0,  533,
  535,  542,  538,  173,  174,  540,    0,    0,    0,  472,
    0,    0,  468,    0,    0,  496,    0,  537,  511,    0,
  555,    0,    0,  829,  832,  822,    0,  826,  547,    0,
    0,    0,  545,    0,    0,  557,  848,  846,    0,  856,
    0,  854,    0,  691,  692,  690,  698,  571,  817,  634,
  636,    0,  738,  628,    0,    0,    0,  570,  460,  454,
  458,  453,  495,  494,  490,  489,    0,  484,  449,  450,
  461,    0,    0,    0,  170,  167,  168,  164,    0,  163,
  881,  858,    0,  882,    0,  878,    0,  893,    0,    0,
    0,    0,  862,    0,   31,   26,  352,    0,  369,  343,
  342,    0,  143,    0,  180,  648,  239,  106,  145,    0,
  375,    0,    0,    0,    0,  372,   89,   88,    0,    0,
   80,   81,  500,  756,  137,  138,  755,    0,    0,    0,
  206,    0,  564,    0,    0,    0,    0,    0,  839,    0,
    0,  800,    0,    0,    0,  845,  524,  523,    0,    0,
  475,    0,    0,  921,  922,  464,  470,    0,  473,    0,
  498,    0,    0,    0,    0,  834,    0,    0,  823,  553,
  548,    0,    0,  544,    0,    0,    0,  786,  857,  855,
  633,  627,  626,  638,  492,    0,  482,  481,  613,    0,
  172,    0,  860,    0,  886,    0,  901,  902,  895,  865,
  867,  907,   38,   14,    0,   36,    0,    0,  383,    0,
    0,  380,  338,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,    0,    0,  376,  377,   86,   85,
  215,  216,    0,  207,    0,    0,    0,  190,  198,  191,
  193,    0,  843,    0,  842,  795,    0,  801,    0,    0,
  541,  539,  474,  476,  477,  471,  465,  469,    0,  529,
    0,  497,  508,  463,    0,  828,    0,  830,    0,  549,
    0,  849,  847,    0,  491,    0,  859,    0,    0,    0,
  879,    0,    0,    0,    0,   15,    0,    0,    0,  688,
  687,    0,  686,  379,    0,    0,  161,    0,    0,    0,
    0,  156,    0,    0,    0,    0,    0,  146,    0,  140,
  150,  178,  183,  201,    0,  213,    0,    0,    0,  787,
  840,    0,  802,  769,  513,  510,    0,  781,    0,    0,
  774,    0,  778,  833,  552,  551,  639,    0,  861,  883,
    0,    0,    0,  897,    0,  908,   39,   47,    0,    0,
  353,  382,  381,    0,  339,    0,  347,    0,    0,  142,
  157,  181,  403,  402,    0,  400,    0,  649,    0,  676,
  240,  107,  152,    0,    0,  202,    0,  194,  192,    0,
    0,  797,    0,    0,  771,  775,    0,  779,  169,    0,
  887,  904,  905,  898,  868,   40,   37,   48,    0,    0,
    0,    0,  160,  158,    0,    0,    0,    0,  677,    0,
    0,    0,  179,  200,    0,  212,    0,  803,  780,    0,
    0,    0,    0,  354,    0,    0,  348,  182,  401,    0,
    0,    0,  111,  108,  153,  203,  789,  884,    0,  899,
    0,    0,  340,  683,    0,  684,  681,    0,  679,  104,
    0,  103,   95,   96,    0,    0,   92,   94,   97,   98,
   99,  100,  101,  102,    0,    0,  256,  249,  250,  248,
  251,  252,  253,  254,  255,    0,    0,  246,    0,    0,
    0,  888,  355,  351,    0,    0,    0,  650,   93,  693,
  299,  294,  298,    0,  241,  247,  125,  118,  119,  117,
  120,  121,  122,  123,  124,  126,    0,    0,  115,  109,
    0,    0,  682,  680,    0,    0,    0,    0,    0,  307,
    0,    0,  257,    0,    0,  265,    0,    0,    0,  112,
  116,    0,  885,    0,    0,    0,  293,    0,  292,    0,
    0,    0,  373,    0,  218,    0,    0,    0,    0,  651,
    0,  242,  891,  889,  127,  370,    0,    0,    0,    0,
    0,    0,  222,  374,  260,  259,  258,  271,  270,  267,
  272,  273,  266,  285,  284,  277,  278,  274,  276,  275,
  279,  268,  269,  280,  281,  287,  286,  282,  283,    0,
  694,    0,  311,    0,  290,  288,    0,    0,  219,    0,
  263,  136,  134,    0,    0,  315,    0,    0,    0,    0,
  296,    0,    0,    0,    0,    0,    0,    0,  131,  330,
    0,  312,    0,    0,  324,    0,    0,    0,  319,    0,
    0,  308,    0,  230,    0,  220,    0,    0,    0,    0,
  135,    0,  128,  132,    0,    0,    0,  326,    0,  327,
  316,    0,    0,  310,  320,  291,  289,    0,  297,  301,
    0,    0,  227,  229,  223,  264,  133,  331,  333,  313,
    0,    0,  325,  322,  306,    0,    0,  231,  233,  221,
    0,    0,    0,  324,  302,  304,    0,    0,  224,  335,
  336,  332,  334,  323,    0,    0,  237,  236,  235,  232,
  234,    0,    0,    0,  225,  303,  305,
  };
  protected static readonly short [] yyDgoto  = {             8,
    9,   10,   11,   12,   60,   13,   14,   15,   16,  915,
   55,   17,   18,  254,   35,   19,  687,  248,  653,  451,
 1400,   92,  916,  804,  917,  998, 1059,  995, 1060,   21,
   22,   23,   24,   25,   26,   27,   28,  688,   30,   46,
   47,   48,   49,   50,  278,   94,  480,  481,  482,  300,
  594,  830,  829, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
 1172, 1173, 1174,   76,  255,  466,  666, 1015,  929, 1078,
 1144, 1121, 1190, 1217, 1189, 1218, 1219, 1074, 1314, 1302,
 1327, 1328, 1329,  834, 1325,  835,  715, 1232,  820,  667,
  932,  456,  925,  814, 1010,  716,  930,  933,  934, 1122,
 1011, 1012, 1008,  427,  428,  788,  637,  335,   31,  263,
   80,  467,  689,  822, 1084,  926, 1115,   77,  301,  690,
  691,  692,  693,  694,  839,  575, 1125,  840,  576,  842,
 1255, 1272, 1346, 1322, 1372, 1256, 1310, 1391, 1412, 1347,
 1348, 1410, 1397, 1398,  664,  928, 1120, 1186, 1239, 1187,
 1188, 1233, 1277, 1258, 1234,  268, 1300, 1324, 1236, 1319,
 1318, 1175, 1202, 1252, 1369, 1343, 1203, 1370,  595, 1405,
 1406, 1251, 1317, 1304, 1337, 1332, 1315, 1356, 1361, 1335,
 1338, 1339, 1394, 1362, 1333, 1334, 1402, 1392, 1393,  657,
  812, 1065, 1006, 1111, 1066, 1067, 1135,  918, 1109, 1151,
  460,   36,  160,   84,   38,  269,  809,  655,  470,  921,
  922, 1002,  258,  259,  329,  458,  336, 1075, 1076,  162,
  163,  337,  165,  166,  167,  168,  169,  170,  171,  172,
  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
  183,  184,  286,  781,  973,  534,  721,  866,  722,  723,
  966,  185,  422,  727,  596,  597,  598,  599,  775,  490,
  491,  330,  971,  729,  331,  519,  520,  521,  522,  332,
  525,  717,  342,  744,  745,  881,  297,  498,  298,  497,
  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
  196,  197,  198,  199,  200,  201,  578,  579,  580,  761,
  762,  202,  568,  372,  984,  203,  514,  662,  927, 1118,
 1237,   78, 1079, 1080, 1158, 1159, 1003,  557,  355,  756,
 1238,  558,  559,  302,  303,  304,  206,  207,  208,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  220,  317,  569,  221,  222,  223,  224,  349,  494,
  495,  318,  225,  226,  227,  539, 1039, 1040, 1041, 1042,
 1097, 1043,  228,  229,  230,  231,  505,  957,  851, 1090,
  506,  507, 1092, 1093,  232,  233,  234,  235,  236,  237,
  544,  545,  977,  734,  878,  735,  345,  698,  954,  699,
  887,  886,  238,  438,  239,  439,  902,  988,  440,  649,
  803,  800,  801,  993,  441,  442,  443,  444,  445,  446,
  906,  639,  904, 1100, 1191, 1243,  990, 1132, 1222,  798,
  645,  799, 1053,  992, 1054, 1133,  994,   52,  242,   53,
  };
  protected static readonly short [] yySindex = {           57,
    0, -185, -180, -165,   15,    0,  -28,    0,   93,    0,
  100,    0,    0,    0,    0,    0,    0,    0,    0, 2170,
    0,    0,    0,    0,    0,    0,    0,    0, -209,    0,
    0,    0,  438,   11,  118,    0,   -2,    0,    0,   98,
    0,    0,    0,  338,   11,  126,  159,  206,    0,    0,
    0, 5944,  415,    0,  -28,    0,  100,    0,    0,  100,
    0,    0,    0, -160,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10928, 2812,    0,    0,  411,
  629,  126,    0,    0,  225,    0,  312,  317,  338,  159,
  126,   53,    0,  335,    0,  150,    0,  345,    0,    0,
  264,10476,  360,    0,  -66,  370, 6075,    0,    0,  -66,
    0,  -66,  -66, -194,  -66,    0,  -66,    0,  287,    0,
    0, 9511,    0,    0,  -66,    0,  -66,    0, 9511,    0,
  321,    0,    0,    0,  264,    0,    0,  -66,  379,  -66,
 8552,11136,    0, 9511,    0,10243,10243,10243,10243,10243,
10243,10243,10243,    0,   67,    0,11176,    0,    0,  371,
  139,    0,  836,  151,    0,    0,  424,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  756,    0,  760,   85,
  603,  577,  484,  440,  446,  463,  459, -254,  487,    0,
    0,    0,    0,    0,    0, 2504,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  517,  541,  526,  586,   29,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   70,  201,  415,
    0,    0,    0,    0,    0,    0,    0,  594,11214,  595,
11264,  379,  651,  506,  293, 5597,    0,    0,  586,  151,
    0,    0,    0,    0,    0,  379,    0,    0,  194,  261,
  312,    0,    0,  646,    0,    0, 9633,    0,  765,  626,
 9755,    0,    0,    0,    0, 9511,  -66,  -66, 9511,  -25,
  836,    0,  649,    0,11176,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  710,  195,11214, 6599,
11176, 9511,  705,  714, 9511, 9511, 7114,  385,  719, -129,
11264,  586,  170,    0,  723,  722,    0,11176,    0,  752,
  575,  -66,    0, 9511,  321, 9023,    0,    0,  379, 9511,
   83,  728,   94,  737, 6075,   23,  661,    0,    0,    0,
    0,    0,    0,    0,    0,  780, 9511,    0,    0,    0,
    0,11012,  805,  312,    0,  382,    0,    0,  434,    0,
    0,  773, 9755, 8657,    0,    0,10243, 9511, 9511, 9511,
 9511, 9511, 9511, 9511, 9511, 9511, 9511, 9511,10243,10243,
10243,11176,11176,10243,10243,10243,10243,10243,10243,10243,
10243,10243,10243,10243,10243,10243,10243,10243,10243, 9511,
    0,    0,    0,    0,    0, -213,  828,    0,    0,    0,
    0,    0,11288,11338,  797,    0,    0,    0,    0, -219,
  602,    0,    0,    0,    0,    0,    0,    0,    0,  802,
  853,  595,    0,  847,  379, -157,    0,    0,  818,    0,
    0,    0,  981,  985,  338,    0,  874, 6494,  839,  843,
    0,    0,    0,    0,11176,    0,    0,    0,  185,  533,
    0,    0,    0,    0,    0,  312,  163,    0,    0,  530,
    0,  879, -192,  873,    0,  889,  359,  321,  -66,    0,
    0,  850,    0,    0,  894,    0,  898, -210,    0,  900,
    0,    0,    0,  902,  914,    0,  217,    0,  919,    0,
  916,    0,    0,    0,  630, 6468,    0,    0, 6983,  672,
 9511,  719, 8657,    0,    0,    0,    0,  920, 9511,    0,
    0,  -66,  321, -126,    0,  965,  921,    0,  923,  928,
    0,  930, 9511,  995, 9511, 1013, -279, 6075,    0,    0,
    0,    0,    0,    0,10243,    0,  912,  321, 6075,    0,
    0,    0,  379,  338,  896,11376,    0,  940,    0,  943,
10243,    0, -274,    0,  -60,    0,    0,  673, 9511, 9511,
  945, 1059,    0,    0,   62,  947,    0,    0,    0,    0,
  760,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  760,  760,   85,
   85,  603,  603,  603,  603,  577,  577,  484,  440,  446,
  463,  459,    0,  944, 8779, 9511,    0,  526, 9511,   95,
  907,  131,  908,  946, 9511,    0,    0,    0,  966,    0,
    0,    0,  950,  957,  967, 7159,    0,  954,    0,  338,
  960,  595,    0,  595,    0,  595,  951,  961,    0,  964,
  312,  750,    0,  416,    0,    0, 9633,    0,    0, 9755,
    0,    0, 9145,  649,    0,    0,  601, -209,  989,    0,
  983,  991,  996,    0,    0, 9511,  958,  598,    0,    0,
 6730, 9511, 1067,    0, 6075, 6075, 9145,    0, 7114,    0,
    0,    0,    0,    0,    0,    0,  997, 9267,  251,    0,
 -247, -163,    0,  948,  949,    0, -190,    0,    0, 1000,
    0, 1002,11092,    0,    0,    0,  321,    0,    0,   54,
  511,  963,    0, 1003, 1006,    0,    0,    0, 6075,    0,
 9511,    0, 9511,    0,    0,    0,    0,    0,    0,    0,
    0, 9511,    0,    0,  968,11012, 1036,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8535,    0,    0,    0,
    0, 8901, 9511,11264,    0,    0,    0,    0, 1012,    0,
    0,    0, 1089,    0, 1090,    0,  776,    0, 1014, 9511,
 9511,  972,    0, -136,    0,    0,    0, -181,    0,    0,
    0, 1022,    0, 1021,    0,    0,    0,    0,    0, 1017,
    0,  359,  359, 1019, 1020,    0,    0,    0, 9511, 9511,
    0,    0,    0,    0,    0,    0,    0,  601,11376,  607,
    0,11176,    0,  374, 1137, 1138, 1025, 9511,    0,  850,
 9511,    0, 1026, 9511, 1117,    0,    0,    0, 9145, 1032,
    0,  -76, 9389,    0,    0,    0,    0, 6852,    0, 1143,
    0,  586, 9511, 1035, 1037,    0,  988,  321,    0,    0,
    0,  993, -203,    0,  994, 6075, 6075,    0,    0,    0,
    0,    0,    0,    0,    0,  608,    0,    0,    0,  987,
    0, 9511,    0, 9511,    0, 9511,    0,    0,    0,    0,
    0,    0,    0,    0, 1050,    0,  -28,  359,    0,  161,
  275,    0,    0, 1153, 1038,  359, 1039, 1039, 1039, 9145,
  998, 1040, 1017,    0, 1043, 1047,    0,    0,    0,    0,
    0,    0, -155,    0, -153, 1048, 1049,    0,    0,    0,
    0, 1045,    0, 6075,    0,    0, 1051,    0, 1052, 6075,
    0,    0,    0,    0,    0,    0,    0,    0, 1055,    0,
  719,    0,    0,    0, -166,    0, 1054,    0, -203,    0,
 1011,    0,    0,  321,    0, 9511,    0, 9511, 1082, 9511,
    0, 9511, 1083,  602, 1085,    0,  -28, -209, 1063,    0,
    0, 1041,    0,    0, -181, -209,    0, 9511, 1042, 1084,
 1038,    0, 1086, 7199, 1118, 1118, 1118,    0, 1080,    0,
    0,    0,    0,    0,   92,    0, 1098, 1209, 1212,    0,
    0, 6730,    0,    0,    0,    0, 9511,    0, 1112, -166,
    0, -166,    0,    0,    0,    0,    0, 1111,    0,    0,
 1133,  782, 1110,    0, 9511,    0,    0,    0,  -73, -209,
    0,    0,    0, 1076,    0, 1120,    0, 1122, 1021,    0,
    0,    0,    0,    0, 1121,    0, 1081,    0, 1118,    0,
    0,    0,    0, 1118, 1129,    0, 9511,    0,    0, 1131,
  898,    0, 6075, 1130,    0,    0, 6075,    0,    0, 9511,
    0,    0,    0,    0,    0,    0,    0,    0, 1118,    0,
 1136, -209,    0,    0, 1118, 7199, 1132, 1139,    0, 1141,
 1142, 9145,    0,    0, 9511,    0, 6075,    0,    0, 6075,
 1160, 9511, 9511,    0, 1140,  950,    0,    0,    0,11052,
 -140, -209,    0,    0,    0,    0,    0,    0, 1161,    0,
 1158, 9511,    0,    0, 1147,    0,    0, 1145,    0,    0,
 2812,    0,    0,    0, 1168, -140,    0,    0,    0,    0,
    0,    0,    0,    0,  499, 2812,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1169, -209,    0, -209,  950,
 9511,    0,    0,    0, 1167,11052,10693,    0,    0,    0,
    0,    0,    0,10725,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1172, -209,    0,    0,
 1155, 9511,    0,    0,11176,11176,   74,  164,  379,    0,
  338,  373,    0, 1234,    0,    0,  950, 6075,  950,    0,
    0, 1134,    0, 1155, 1135,  818,    0,11176,    0,11176,
 1144, 1173,    0,  874,    0, 1176, -245,  523, 1937,    0,
 1178,    0,    0,    0,    0,    0, 1180, 1177, 1181, 1182,
  359, 1184,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1183,
    0, -177,    0, 1174,    0,    0, 1185, 1186,    0,  359,
    0,    0,    0, 1187, -110,    0, 1191,  359,  359,  411,
    0,  -50, 1190,  359, 9145, 1151, 1192, 1187,    0,    0,
 2812,    0, -209, -209,    0, 1154, 1194, 1191,    0, 1199,
 1205,    0, 1203,    0, 2812,    0,  -50,  -50, 1189, 1207,
    0, -177,    0,    0, -134, 1213, 2812,    0, 2812,    0,
    0, 9145, 1202,    0,    0,    0,    0,  111,    0,    0,
  851, 1216,    0,    0,    0,    0,    0,    0,    0,    0,
 1268, 1321,    0,    0,    0, 1219, 1220,    0,    0,    0,
  -50,  587,  587,    0,    0,    0,  -97,  -97,    0,    0,
    0,    0,    0,    0, 8657, 8657,    0,    0,    0,    0,
    0, 1224, 1215, 1221,    0,    0,    0,
  };
  protected static readonly short [] yyRindex = {         1959,
    0,    0,    0,    0, 6206,    0,    0,    0, 1959,    0,
 1592,    0,    0,    0,    0,    0,    0,    0,    0,10799,
    0,    0,    0,    0,    0,    0,    0,    0, 1717,    0,
    0,    0,  420, 1223,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  550,  625,    0, 1225,    0,    0,    0,
    0,    0, 1803,    0,   48,    0, 1592,    0,    0, 1592,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  318,10387,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2200,    0, 2344, 1225,
 1226,    0,    0,  679,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1230,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,11416,    0,
    0, 1227,    0,    0,    0,    0,    0,    0, 1227,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  210,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 5728,    0,    0,    0,    0,    0,
  224,    0, 3635, 3384,    0,    0, 3555,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3869,    0, 3935, 4227,
 4449, 4803, 5025, 5169, 5313, 5457, 5601, -156, 3724,    0,
    0,    0,    0,    0,    0,   49,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1217,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  875,  875, 1881,
    0,    0,    0,    0,    0,    0,    0, 1233,    0,    0,
    0, 6756,  391, 2603,    0,    0,    0,    0, 3237, 2603,
    0,    0,    0,    0,    0, 3789,    0,    0,    0,    0,
 2200,    0,    0,    0,    0,    0,  641,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2684,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1228,
    0,    0,    0,    0,    0,    0, 1237,    0,    0,    0,
    0, 2042, 2684,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2842,    0,
  361,    0,  361,    0,   10,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1227,    0,    0,    0,
    0, 1229,    0, 2684,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  186,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  652,  682,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -24,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1235,  230,    0,    0,    0,    0,    0,
    0,    0, 1218, 1231,  837,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 7521,    0,
    0,    0,    0,    0,    0, 2684, 5784,    0,    0,    0,
    0,    0,    0, 1248,    0,    0,10844,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1258,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  559,  832,    0,    0,
 1238,    0,    0,    0,    0,    0,    0,    0,   52,    0,
    0, 3318, 1264,    0,    0,    0,    0,    0,    0,    0,
    0, 1240,    0, 1196,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   82,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 9877,    0,    0,
    0,    0, -151,  488,    0,    0,    0, 1266,    0,    0,
    0,    0, 2684,    0, 2684,    0,    0,    0,    0,    0,
    8,    0,    0,    0,    0,  192,    0,    0,    0,    0,
 4015,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4081, 4161, 4305,
 4371, 4515, 4593, 4659, 4737, 4881, 4947, 5091, 5235, 5379,
 5523, 5667,    0,    0,    0, 1275,    0,    0,    0,  361,
    0,  361,    0,    0,    0,    0,    0,    0,  992,    0,
    0,    0, 1633,    0,  755,    0,    0,    0,    0,  932,
    0,    0,    0,    0,    0,    0,  685,    0,    0,    0,
 1276,  703,    0, 9999,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,11454, 7847,    0,    0,
  708,  748,  779,    0,    0,    0,  753,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1280,    0,
    0,    0,    0,    0,    0,    0, 1282,    0, 2988,    0,
    0,  138,    0,  -48, 2923,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  522,
  495,    0,    0,    0, 1281,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  233,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  637,    0,  684,    0,
    0,    0,    0, 7267,    0,    0,    0, -142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1283,
    0,10844,10844,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,11504,    0,11528,
    0,    0,    0,10972,    0,    0,    0,    0,    0,    0,
 1284,    0,    0,    0, 1350,    0,    0,    0, 1289,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3079,    0, 3475,    0,    0, 1286,    0,    0,    0,
    0,    0,  522,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  655,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 7360,    0, 7444,10844,    0, 1246,
    0,    0,    0,10121, 1287,10844,  396,  396,  396,    0,
    0,    0, 1288,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  785,  798,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 3318,    0,    0,    0, 1294,    0,    0,    0,  522,    0,
  863,    0,    0, 9877,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   16,    0,    0, 7528, 7677,    0,    0,
    0,    0,    0,    0, -142, -260,    0,    0,    0,    0,
 1291,    0,    0,    0, 1298, 1298, 1298,    0,  799,    0,
    0,    0,    0,    0,  699,    0,  749,    0,    0,    0,
    0, 1297,    0,    0,    0,    0,    0,    0,    0, 1304,
    0, 6337,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  666,  746,    0,    0,    0,    0,    0,    0, 7761,
    0,    0,    0,    0,    0, 1305,    0,    0,    0,    0,
    0,    0,    0,    0,  407,    0,    0,    0,  599,    0,
    0,    0,    0,  610,    0,    0,    0,    0,    0,    0,
 1303,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1312,   28,
    0, -244,    0,    0,  610,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -117,
    0,    0,    0,    0,    0, 1513,    0,    0,    0,    0,
 7946, 8266,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  342,    0,    0,
10544,    0,    0,    0,    0, 8020,    0,    0,    0,    0,
    0,    0,    0,    0,    0,10625,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 8340,    0, 8106, 1513,
    0,    0,    0,    0,    0,    0,  318,    0,    0,    0,
    0,    0,    0,  318,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 8180,    0,    0,
  762,    0,    0,    0,    0,    0,    0,    0, 8433,    0,
 8403,    0,    0,    0, 8471,    0, 1513, 1322, 1513,    0,
    0,    0,    0,  762,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1324,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  563,    0,    0,    0,
10844,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  815,    0,    0,    0,    0,    0,10888,
    0,    0,    0, 1317, 5741,    0, 1318,10844,10844,    0,
    0, 5459,    0,10844,    0,    0,    0, 1319,    0,    0,
  135,    0,11564,11617,    0,    0,    0, 1323,    0,    0,
    0,    0,  617,    0,  876,    0, 7009,10269,    0,    0,
    0,    0,    0,    0,    0,    0, 1381,    0, 1435,    0,
    0,    0,  819,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5459, 6878,  503,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1264, 1264,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyGindex = {            0,
 1646,  772,   42,    0,    0,   47, -559,   -5, -888,    0,
  783,    0,    0,   27,    0,    0,    1,    0,    0,    0,
 -618,  -68,    0,    0,    0,    0,    0,    0,    0, -449,
 -429, -399,    0,    0,    0,    0,    0,   44,  -11,    0,
 1655,    0, 1611,    0,    0,    0,    0, 1027, 1028,  -52,
 -236,    0,    0,    0,    0,  537, -781, -601, -567, -529,
 -515, -466,-1048,-1036,    0, -217,    0,  333,    0, -621,
    0,    0,    0,    0,    0,    0,  489,  -74,  354,    0,
    0,    0,  380,  384,    0, -317, -325,   -7,    0,    0,
    0, -304,  642,    0,    0, -684,    0,    0,  777,    0,
    0,  701,    0,    0, 1075,    0,    0, -104,    0,  394,
    0, -453, -776,    0,    0,    0,    0, -253,  -41,    0,
    0,  877,  878,  885,    0, -538,    0,    0, -486,  880,
  474,    0, -683,    0,    0,    0,    0,    0,    0,    0,
    0,  325,    0,    0,    0,    0,    0,    0,    0,    0,
  543,    0,    0,    0,    0,  -64,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -519,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  337,    0,
    0,  395,    0,    0,  401,  403,  344,    0,    0,    0,
    0,    0,    0,    0,    0,  627,    0,    0,    0,    0,
  208,    0,   32,   84,    0,    0, 1066,    0,  510,    0,
  738,    0, -267, -227, -204,  -99,  178,    0,  628,    0,
  -83,  -44,    0,    0,  -14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -297,    0,  713,    0,    0, -112,    0,    0,    0,  881,
    0, -497, 1023, 1030,  969,    0,  970,    0, 1163, 1362,
 1070,    0,    0,  784,    0,    0,    0,    0, 1057,    0,
    0,    0,    0,    0,    0, -802,    0,    0,    0,    0,
    0, 1031,    0,  462,  860,  694,  864, 1337, 1339, 1340,
 1341, 1342,    0, 1338,    0,    0,    0, 1005,    0,  775,
    0,    0,    0,    0,    0,    0, -291,    0,    0,    0,
    0,  -49,    0,  689,    0,  565,    0,  534,    0,    0,
    0,  678, -532,  -43, -338,  -39,    0, 1570,    0,    5,
    0,    9,   20,   37,   46,   55,   59,   60,   63,   69,
   72,    0, -663,    0,  460,    0, 1675,    0,    0,    0,
 1095, -299,    0,    0,    0,    0,    0,    0,  741,    0,
    0,  740,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  757,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1243,    0,    0,    0,    0,    0,    0,    0,  934,
    0,    0,    0, -223,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1352,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  547,    0,    0,    0,    0,
    0,    0,    0,    0,  665,    0,    0,    0,    0,    0,
  };
  protected static readonly short [] yyTable = {           158,
   20,   54,  468,  527,  510,  661,  267,  164,  204,   20,
  159,  257,  205,  730,  670,  448,  561,   79,  291,  429,
  504,  274,  857,  457,  340,  757,  535,  261,   34,  518,
   45,  724,  454,   37,  806,   37,  763,  765,  264,  348,
  484,  855,  856,   29,  489,  935,  936,  910,  919,  243,
   57,  502,   29,   20,  471,   58,  209,  164,  552,  285,
  210,  378,  164,  682,  386,  871,  352,  354,  256,  334,
   32,  211,   45,  322,  919,   39,  334,   37, 1312, 1274,
  980,  323,  373,  702,   81,  888,  754,  292,  212,  341,
   41,  356,  867,  343,  241,  246,   29,  213,  658,  610,
 1024, 1037, 1026,  457,  392,  344,  214,   37,  270, 1058,
  215,  216,   37,   37,  217, 1160,   42,   45,  864,  913,
  218,  346,   37,  219, 1197,  532,  528,  536, 1378,  646,
  647,  292,  292,  292,  292,  292,  292,  292,  292, 1204,
 1216,  999,  542,  755,  418, 1330,  489,  769,   43, 1013,
  777,   59,   59,  158,  461,   81,  419,    4, 1407,  737,
  473,  164,  204,   59,  159,  635,  205,  672,   59, 1216,
  272, 1108,   37,   37,  961,  865, 1045,  872, 1046,  871,
 1379,  873,  610, 1106,  257,    4,  683,  610,   37,  610,
  610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
  841, 1313,  703,  648,  636, 1344,  728,  919,  868,  610,
  209,  610,  880,  610,  210,  610,  610,  610,  324,  561,
  496,    3,  982,  983,  483,  211,    4,   33,  488,  161,
  561,  610,   40,  492,  654,  529,  356,  530,  371,  283,
   20,  452,  212,  291,  914, 1018,  508,   44,  777,  551,
 1038,  213,  247,  260,  257,  659,    4, 1025,  260, 1027,
  214,  392,  567,  538,  215,  216,  610,  143,  217,  509,
   59,   51,  513,  515,  218,  164, 1408,  219,  743,  161,
   37,  449,   37,   29,  161,  284,   58,  469,  531,  963,
 1031,  547, 1107,  549, 1355,  873, 1034,  513,   81,  777,
  943,  164,  283,  548,  910,  919,    2,  577, 1371,  787,
  164,  560,  292,    1,  334,  562,    4,  919,  260,  260,
 1381,  357, 1382,  919,  870,  870,   37,  616,  617, 1247,
  488,  593,  366,   81,  260,  602,  603,  604,  605,  606,
  607,  608,  609,  610,  611,  612,  402,  791,  284,    1,
   37,  941,   37,  944,  477,  996,    1,  836,  641,  643,
 1180,  771,   37,   83,  869,  869, 1385,  634,  377,   37,
  724,  385,  292,  371, 1386,  695,  553,  493, 1248,  493,
  367,   85,  403,  161,  292,  292,  292,  555,  792,  292,
  292,    2,  563,  349, 1081, 1082,  370,  654,  870,  349,
  673,  852,  430,   37,  847, 1180,  350, 1210,  432,  368,
   87,  518,   81,  433,    3,  434,  371,  466,  261, 1249,
  276,  435,  436,    4,  794,   81,  260,    2,  260, 1128,
  493,  779,  695,   37,   37, 1387, 1210, 1145,  869,  369,
  484,   81,   83,  489,  816,  564,  817,  696,  818,  654,
    3,  431,   81,   81, 1000,   83,  695,  582, 1085,    4,
  404,  405, 1123, 1147,   37,   37, 1001,  472, 1250,  880,
 1086,   83,  260,  714,  466,    5,    6,    7,  726,  900,
  593,  257,   83,   83,  780,  390,  732, 1134,  370,   81,
  469,   86,  437, 1138, 1308,  375,  260,  161,  260,  469,
  750,  736,  752,  467,  696,  368,   37,  375,  260,  376,
   88,  577,  368,  164,  560,  260,  279, 1153,  562,   83,
  280,   81,  347,  161,  164,  560,  760,  368,   81,  562,
   91,  789,  161, 1323,  347,  674,  774,  774,   89,  432,
 1181, 1340, 1341,   81,  433,  897,  434, 1350,  668,  260,
  292,   83,  435,  436,  474,  478,  457,  674,   83,  956,
  467,  479,  371,  675,  462,  475,  292,  281,  500,  678,
  371, 1220,  741,   83, 1182,   81,  748,  742,   93,  260,
  260,  811,  786,  334,  370, 1181,  513, 1211,  463,  652,
  356,  370,  797,  368,  390,  707,  390,  757,  390,  390,
  371,  390,  483,  390,  483,   83,  370,   37,  478,   81,
  260,  260, 1183,  652,  479,  464, 1211,  501, 1260, 1182,
 1262, 1212,  748,  447,  483,  291, 1184,  488,  143,  863,
  509,   85,  283,   61,  476, 1004,  356,  271,  370,   83,
  652,  461,  390,  513,  390,  728, 1005,  390,  860,  853,
 1212,  327,  260,  328,  714,  483,   62, 1183,  877, 1213,
  164,  164,  653, 1373, 1374,  726,  770,  970,  772,   63,
   81, 1184,  370, 1214,   65, 1185,   79, 1383,  284,   66,
  678,   67,   68,   69,   70,  143,  653,   37, 1213,   71,
  273, 1162, 1177,   72,  292,  879,   81, 1253,  889,  686,
  890,  577, 1214,  277,  164,   73,  678, 1399,   74,  891,
   75, 1163, 1178,  653,  946,  678, 1162,  363,  282, 1094,
 1185,  827, 1215,  260,  593,    4,   83,  363,  828,  593,
  899,  363,  504,  294,  672,  161, 1163, 1177,  296, 1207,
    4, 1164, 1179,  668,  363,  673,  161,  910,  911,    2,
  965, 1215,  523,  260,  824,  825,  524, 1178,  561, 1208,
  672,  974,  347,   30,   37,   30, 1164,  945, 1207, 1126,
 1056,  673,    3,  363,  577,  143,  939,  940, 1254,  503,
   56,    4,   59,  374,  262,  465,   30, 1179, 1208, 1209,
  363,  561, 1266,  363,  583,  953,   81,   37,  513,   30,
  387,  959,  371,  584,   30,  550,  714, 1146,  920,   30,
  964,   30,   30,   30,   30,   37,   82,  295, 1209,   30,
  972,  414,  319,   30,  320,  321,   83,  325,  244,  326,
  541,  245,  415,  260, 1194,   30,  978,  338,   30,  339,
   30,  164,  164,  542,  363,  416,  585,  344,  601,  987,
  346,  989,  350,  991,  363,  586,  417,  629,  363,  629,
  543,  356,  375, 1200,  356,  618,  619,  375,   30,   30,
   37,  363, 1201,   37,  420,  384,   85,  714,  363,  412,
  413,  882,  161,  161,  265, 1413, 1414,  143,  363,  347,
  424,  363,  363,   97,  347,   99, 1275,  679,  100,  561,
  363,  680,  676,  104,  677,  363,  570,  108,  838,  164,
  260,   54,  570,  571,  425,  164,  111,  363,  363,  571,
  363,  363,   66,  116,  525,  572,  161,  363,  118,  363,
  525,  572,  121, 1048,  309, 1049,  309, 1051,  426, 1052,
  432,  309,  760,  260,  123,  433,  124,  434,  363,  363,
  126,  143,  328,  435,  436, 1068,  408,  409,  133,  134,
  805,  260,  137,  675,  450,  266,  272,  849,  363,  850,
  410,  411,  675,  363,  674,  900,  363,  985,  468,  782,
  900,  300,  900,  674,  509,  900,  900,  459,  900,  900,
  300,  243,   74,   74,  406,  407,   74,  710,   20,  836,
  344,  711, 1105,  384,  903,  920, 1064,  453,  900,  903,
   77,  903,   77,  478,  903,  903,  260,  903,  903,  260,
  485,  165,  894,  165,  171,  165,  171,  894,  171,  894,
  565,  376,  894,  894,  509,  894,  894,  903,  486,  725,
  773,   89,  533,  524,  680,   37,   75, 1131,  164,  499,
   75,  752,  164,  560,  546,  752,  144,  562,  144,  900,
   20,  493,  477,  161,  161, 1157,  199,  378,  199,  714,
  199,  378,  509,  363,  378,  188,  378,  188,  511, 1149,
 1052,  378,  164,  526,  896,  164,  560,  512,  903,  896,
  562,  896,  376,  378,  896,  896,  537,  896,  896,  509,
  890,  622,  623,  624,  625,  890,  894,  890,   81,  808,
  890,  890, 1064,  890,  890,  195,  211,  195,  211,  378,
  211, 1157,  844,  378,  844,  540,  378,  378,  378,  907,
  908,  161, 1235,  378,  388, 1102, 1103,  161, 1221, 1235,
  554, 1161, 1176,  399,  400,  401,  196,   37,  196,  556,
 1245, 1246,  217,  566,  217,  389,  390,  391,  392,  393,
  394,  395,  396,  397,  398,  189, 1161,  189,  896, 1244,
  151,   37,  151, 1268,  581, 1269,  358,  359,  360,  361,
  362,  363,  364,  365,  890,  587,  314, 1176,  314, 1161,
  321,  260,  321,  164,  560,  821,  368,  526,  562,  638,
  441,  368,  441,  526,  283,  368,  379,  363,  139,  644,
  139,  696, 1388, 1389,  651,  139, 1276,  652, 1161,  656,
  739,  441,  441,  869,  869,  380,  381,   37,   37,   97,
  660,   99,  550,  550,  100,   37,  663,  654,  654,  104,
  665,  441,  669,  108,  684,  382,  441,  906,  681,  441,
  284,  671,  111,  383,  733,  672,   37,   37,  685,  116,
 1016, 1017,  697,  469,  118,  620,  621,  700,  121,  701,
  161,  705,  509,  704,  161,  626,  627,  469,  264,   37,
  123,   37,  124,  706,  708,  759,  126,  709,  751,  731,
  746,  368,  747,  260,  133,  134,  368,  748,  137,  749,
  368,  252,  363,  368,  161,  368,  753,  161,  764,  714,
  368,  766,  767,  777,  778, 1331,  783,  260,  782,  793,
  795,  802, 1345,  805,  796,  807,  808,  813,  815,  819,
  906,  821,  823, 1357, 1359,  906,  848,  906,  906,  906,
  906,  906,  906,  906,  906,  906,  906, 1345, 1345,  768,
 1401, 1401,  593,  593,  844, 1409, 1409,  906,  843,  906,
  854,  906,  845,  906,  906,  906,  870,  846,  859,  874,
  421,  875,  884,  260,  260,  883,  885,  740,  894,  901,
  892,  260,  903,  905,  912,  909,  923,  924,  931,  937,
  938, 1345,  950,  951,  952,  958,  960,  962,  969,  529,
  976,  975,  260,  260,  986,  979,  981,    3, 1007, 1009,
 1019, 1014, 1022, 1020,  906,  161, 1023,  600, 1030, 1028,
 1029, 1033, 1035, 1044, 1032,  260,  880,  260, 1050,  613,
  614,  615, 1061, 1055,  600,  600,  600,  600,  600,  600,
  600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
 1057,  821,  821, 1062, 1069, 1072, 1077, 1070, 1083,  821,
  821,  821,  821,  821, 1088,  821,  821, 1089,  821,  821,
  821,  821,  821,  821,  821,  821, 1087, 1095, 1099, 1101,
  821, 1104,  821,  821,  821,  821,  821,  821, 1110, 1113,
  821, 1112, 1116, 1117,  821,  821, 1124,  821,  821,  821,
 1127, 1136, 1129, 1141, 1140, 1142, 1143, 1148, 1192,  821,
 1242,  821,   30,  821,  821, 1195, 1196,  821, 1152,  821,
  821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
  821, 1193,  821, 1198, 1205,  821, 1223, 1240, 1259,  821,
  821, 1271, 1273, 1301, 1303, 1305, 1263, 1265, 1309, 1306,
 1307, 1311, 1316, 1375, 1320, 1321, 1270, 1349, 1326,  600,
  821,  821, 1336, 1352,  821, 1353, 1363, 1364, 1366,  821,
  821,  821,  821,  821, 1367, 1368, 1376,  821, 1380,  821,
 1384, 1390, 1379, 1378, 1416,  821,  821, 1395, 1396, 1415,
 1417,    7,   32,   33,  561,  758,   34,   25,  630,  341,
  819,  790,  520,  521,  831,  768,  768,  821,  821,  821,
  821,  768,  821,  768,  768,  768,  768,  768,  821,  768,
  768,  753,  768,  768,  768,  768,  768,  768,  768,  741,
  238,  793,   30,  478,  768,  631,  768,  768,  768,  768,
  768,  768,  819,  105,  768,  519,  363,   32,  768,  768,
  546,  768,  768,  768,   33,  827,  147,  794,  685,  772,
  154,  148,  674,  768,  155,  768,  796,  768,  768,  773,
  345,  768,  798,  768,  768,  768,  768,  768,  768,  768,
  768,  768,  768,  768,  768,  674,  768,  695,  370,  768,
  129,  317,  130,  768,  768,  654,  318,  654,  240,  997,
   90,  275, 1199,  831,  832, 1377, 1241, 1354, 1351, 1021,
 1114, 1071,  790, 1342,  768,  768,   58,  942,  768, 1267,
  947,  948, 1411,  768,  768,  768,  768,  768,  949, 1206,
 1404,  768, 1365,  768, 1360, 1358, 1403,  826, 1137,  768,
  768, 1257, 1063, 1139,  588,  896,  869,  862,  968,  833,
  628,  898,  776,  629, 1036,  630,  633,  631, 1047,  632,
 1224,  768,  768,  768,  768,  858,  768, 1119,   30,   30,
  893, 1261,  768,   30, 1130,  423,  293,   30,  837,   30,
 1096, 1098,   30,  955,   30,   30,  738,   30, 1091,   30,
 1264,   30,  650,   30,   30,   30,   30, 1150,    0,   30,
   30,    0,  918,    0,    0,   30,    0,   30,   30,   30,
    0,    0,   30,   30,   30,    0,   30,    0,    0,   30,
    0,   30,   30,   30,   30,    0,    0,    0,   30,   30,
   30,    0,    0,   30,   30,   30,    0,    0,    0,    0,
    0,    0,   30,   30,    0,   30,   30,   30,   30,   30,
   30,    0,    0,    0,   30,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,    0,    0,    0,    0,    0,    0,   30,   30,
  915,    0,    0,    0,    0,    0,    0,   30,    0,   30,
    0,    0,    0,   30,    0,    0,    0,   30,  600,   30,
    0,    0,   30,    0,   30,    0,    0,   30,    0,   30,
    0,   30,    0,   30,    0,    0,   30,    0,    0,   30,
   30,    0,    0,    0,    0,   30,    0,   30,   30,   30,
    0,    0,   30,   30,   30,    0,   30,    0,    0,   30,
    0,   30,   30,   30,   30,    0,    0,    0,   30,   30,
   30,    0,    0,   30,   30,   30,    0,    0,    7,    0,
    0,    0,   30,   30,    0,   30,   30,   30,   30,   30,
   30,    0,    0,   58,   30,    0,    0,   60,    0,    0,
    0,   60,    0,   60,    0,    0,   60,    0,   60,    0,
   30,   60,    0,   60,    0,   60,    0,   60,   30,   30,
   60,    0,    0,   60,   60,    0,    0,    0,    0,    0,
    0,   60,   60,   60,    0,    0,   60,   60,   60,    0,
   60,    0,    0,   60,    0,   60,   60,   60,   60,    0,
    0,    0,   60,   60,   60,    0,    0,   60,   60,   60,
    0,    0,    0,    0,    0,   30,   60,   60,    0,   60,
   60,    0,   60,   60,   60,    0,    0,    0,   60,  918,
    0,    0,    0,   59,    0,    0,    0,   59,    0,   59,
    0,    0,   59,    0,   59,    0,    0,   59,    0,   59,
    0,   59,    0,   59,    0,    0,   59,    0,    0,   59,
   59,    0,    0,    0,    0,    0,    0,   59,   59,   59,
    0,    0,   59,   59,   59,    0,   59,    0,    0,   59,
    0,   59,   59,   59,   59,    0,    0,    0,   59,   59,
   59,    0,    0,   59,   59,   59,    0,    0,    0,   60,
    0,    0,   59,   59,    0,   59,   59,  915,   59,   59,
   59,   59,    0,    0,   59,   59,    0,   59,    0,    0,
   59,    0,   59,    0,    0,   59,    0,   59,    0,   59,
    0,   59,    0,    0,   59,    0,    0,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,    0,   59,    0,    0,   59,    0,   59,
   59,   59,   59,    0,    0,    0,   59,   59,   59,    0,
    0,   59,   59,   59,    0,    0,    0,    0,    0,    0,
   59,   59,    0,   59,   59,   59,   59,   59,   59,   59,
    0, 1278,   59,   59,    0,   59,    0,    0,   59,    0,
   59,    0,    0,   59,    0,   59,    0,   59,    0,   59,
    0,    0,   59,    0,    0,   59,   59,    0,    0,    0,
    0,    0,    0,   59,   59,   59,    0,    0,   59,   59,
   59,    0,   59, 1279,    0,   59,    0,   59,   59,   59,
   59,    0,    0,    0,   59,   59,   59,    0,    0,   59,
   59,   59,    0,    0,    0,    0,    0,    0,   59,   59,
    0,   59,   59,   59,   59,   59,   59,  530,    0,    0,
   59,    0,  530,  530,    0,    0,    0,    0,    0,    0,
    0, 1280, 1281, 1282, 1283,    0, 1284, 1285, 1286, 1287,
 1288, 1289, 1290, 1291,    0,  530, 1292, 1293, 1294, 1295,
 1296, 1297, 1298, 1299,    0,  530,    0,    0,  530,  530,
    0,    0,    0,  530,    0,    0,  530,    0,  530,    0,
  530,  530,  530,  530,    0,    0,    0,    0,  530,    0,
    0,    0,  530,    0,    0,    0,  530,    0,    0,    0,
    0,   59,    0,    0,  530,    0,    0,  530,    0,  530,
  530,    0,    0,    0,    0,  530,    0,  530,  530,  530,
  530,  530,  530,  530,  530,  530,  530,  530,    0,    0,
    0,    0,  530,    0,    0,    0,  530,  530,    0,  530,
  530,  530,  530,  530,  530,  530,    0,  530,  530,    0,
  530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
   61,  530,  530,  530,  530,  530,  530,  530,  530,  530,
  530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
  530,  530,  530,   62,  530,  363,  530,    0,    0,  530,
  363,  363,    0,    0,  530,    0,   63,    0,    0,    0,
   64,   65,    0,    0,    0,    0,   66,    0,   67,   68,
   69,   70,    0,  363,    0,    0,   71,    0,    0,    0,
   72,    0,    0,  363,    0,    0,  363,  363,    0,    0,
    0,  363,   73,    0,  363,   74,  363,   75,  363,  363,
  363,  363,    0,    0,    0,    0,  363,    0,    0,    0,
  363,    0,    0,    0,  363,    0,    0,    0,    0,    0,
    0,    0,  363,    0,    0,  363,    0,  363,  363,    0,
    0,    0,    0,  363,    0,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,    0,    0,    0,
  363,    0,    0,    0,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,    0,  363,  363,    0,    0,  363,
  363,  363,  363,  363,    0,    0,  363,  363,    0,    0,
    0,  363,  363,  363,  363,  363,  363,  363,  363,  363,
    0,    0,    0,    0,  363,  363,    0,    0,    0,    0,
  363,    0,  363,    0,  363,    0,    0,  363,    0,    0,
    0,    0,  363,    0,    0,    0,    0,  363,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,    0,    0,
  363,  363,    0,    0,    0,  363,    0,    0,    0,    0,
  363,    0,  363,  363,  363,  363,    0,    0,    0,    0,
  363,    0,    0,    0,  363,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  363,    0,    0,  363,
    0,  363,  363,    0,    0,    0,    0,  363,    0,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,    0,    0,    0,  363,    0,    0,    0,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,    0,  363,
  363,    0,    0,  363,  363,  363,  363,  363,    0,    0,
  363,  363,    0,    0,    0,  363,  363,  363,  363,  363,
  363,  363,  363,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  363,    0,  363,    0,  363,   95,
    0,  363,    0,    0,    0,    0,  363,   96,   97,   98,
   99,    0,    0,  100,  101,    0,  102,  103,  104,  105,
  106,  107,  108,    0,    0,    0,    0,    0,  109,    0,
  110,  111,  112,  113,  114,  115,    0,    0,  116,    0,
    0,    0,  117,  118,    0,  119,  120,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  122,    0,  123,
    0,  124,  125,    0,    0,  126,    0,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  137,  138,    0,
  139,    0,    0,  140,    0,    0,    0,  141,  142,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  356,    0,
    0,    0,    0,  356,  356,    0,    0,    0,  143,    0,
    0,    0,  144,    0,    0,    0,    0,  145,  146,  147,
  148,  149,    0,    0,    0,  150,  356,  151,    0,    0,
    0,    0,    0,  152,  153,    0,  356,    0,    0,  356,
  356,    0,    0,    0,  356,    0,    0,  356,    0,  356,
    0,  356,  356,  356,  356,  154,  155,  156,  157,  356,
    0,    0,    0,  356,    0,    0,  421,  356,    0,    0,
    0,    0,    0,    0,    0,  356,    0,    0,  356,  363,
  356,  356,    0,    0,    0,  363,  356,    0,  356,  356,
  356,  356,  356,  356,  356,  356,  356,  356,  356,    0,
    0,    0,    0,  356,    0,    0,    0,  356,  356,  356,
  356,  356,  356,    0,  356,  356,  356,    0,  356,  356,
    0,  363,  356,  356,  356,  356,    0,    0,    0,  356,
  356,    0,    0,    0,  356,  356,  356,  356,  356,  356,
  356,  356,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  356,    0,  356,    0,  356,    0,    0,
  356,    0,  363,    0,    0,  356,    0,  363,    0,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,    0,    0,    0,    0,    0,    0,    0,    0,  363,
  363,  363,  363,  363,  363,  363,  363,  363,    0,  363,
  363,    0,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,   61,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,   62,  363,  749,  363,    0,
    0,  363,  749,  749,    0,    0,  363,    0,   63,    0,
    0,    0,    0,   65,    0,    0,    0,    0,   66,    0,
   67,   68,   69,   70,    0,  749,    0,    0,   71,    0,
    0,    0,   72,    0,    0,  749,    0,    0,  749,  749,
    0,    0,    0,  749,   73,    0,  749,   74,  749,   75,
  749,  749,  749,  749,    0,    0,    0,    0,  749,    0,
    0,    0,  749,    0,    0,    0,  749,    0,    0,    0,
    0,    0,    0,    0,  749,    0,    0,  749,  532,  749,
  749,    0,    0,    0,  532,  749,    0,  749,  749,  749,
  749,  749,  749,  749,  749,  749,  749,  749,    0,    0,
    0,    0,  749,    0,    0,    0,  749,  749,  749,  749,
  749,  749,    0,  749,  749,  749,    0,  749,  749,    0,
  532,  749,  749,  749,  749,    0,    0,    0,  749,  749,
    0,    0,    0,  749,  749,  749,  749,  749,  749,  749,
  749,    0,    0,  363,    0,    0,    0,    0,    0,  363,
    0,    0,  749,    0,  749,    0,  749,    0,    0,  749,
    0,  532,    0,    0,  749,    0,  532,    0,  532,  532,
  532,  532,  532,  532,  532,  532,  532,  532,  532,    0,
    0,    0,    0,    0,    0,  363,    0,  532,  532,  532,
  532,  532,  532,  532,  532,  532,  532,    0,  532,  532,
    0,  532,  532,  532,  532,  532,  532,  532,  532,  532,
  532,    0,  532,  532,  532,  532,  532,  532,  532,  532,
  532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
  532,  532,  532,  532,  528,    0,    0,  532,    0,    0,
  528,    0,    0,    0,    0,  532,    0,    0,    0,    0,
    0,    0,    0,  363,    0,    0,  363,    0,  363,  363,
    0,    0,    0,  363,  363,    0,    0,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  528,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  363,  363,    0,
    0,    0,  363,    0,    0,  363,    0,    0,    0,    0,
  363,    0,    0,    0,    0,    0,    0,  528,    0,    0,
    0,    0,  528,    0,  528,  528,  528,  528,  528,  528,
  528,  528,  528,  528,  528,    0,    0,    0,    0,    0,
    0,    0,    0,  528,  528,    0,  528,  528,  528,  528,
  528,  528,  528,    0,  528,  528,    0,  528,  528,  528,
  528,  528,  528,  528,  528,  528,  528,    0,  528,  528,
  528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
  528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
    0,    0,  393,  528,    0,    0,  528,  393,  393,    0,
    0,  528,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  393,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  393,    0,    0,  393,  393,    0,    0,    0,  393,    0,
    0,  393,    0,  393,    0,  393,  393,  393,  393,    0,
    0,    0,    0,  393,    0,    0,    0,  393,    0,    0,
    0,  393,    0,    0,    0,    0,    0,    0,    0,  393,
    0,    0,  393,  536,  393,  393,    0,    0,    0,  536,
  393,    0,  393,  393,  393,  393,  393,  393,  393,  393,
  393,  393,  393,    0,    0,    0,    0,  393,    0,    0,
    0,  393,  393,    0,  393,  393,  393,    0,  393,  393,
  393,    0,  393,  393,    0,  536,  393,  393,  393,  393,
    0,    0,    0,  393,  393,    0,    0,    0,  393,  393,
  393,  393,  393,  393,  393,  393,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  420,    0,  393,    0,  393,
    0,    0,    0,    0,    0,    0,  536,    0,    0,  393,
    0,  536,    0,  536,  536,  536,  536,  536,  536,  536,
  536,  536,  536,  536,    0,    0,    0,    0,    0,    0,
    0,  420,    0,  536,    0,  536,  536,  536,  536,  536,
  536,  536,    0,  536,  536,    0,  536,  536,  536,  536,
  536,  536,  536,  536,  536,  536,    0,  536,  536,  536,
  536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
  536,  536,  536,  536,  536,  536,  536,  536,  536,    0,
  462,    0,  536,    0,    0,  536,  462,    0,    0,    0,
  536,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  356,    0,  420,  420,  420,  420,    0,  420,    0,  420,
  420,    0,  420,  420,  420,  420,  420,    0,  420,  420,
  420,  420,  462,  420,  420,  420,  420,  420,  420,  420,
  420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
  420,  420,  420,  420,  420,    0,  356,    0,  420,    0,
    0,  420,    0,    0,    0,    0,  420,    0,    0,    0,
  423,    0,    0,  462,    0,    0,  423,    0,  462,    0,
  462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
  462,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  462,    0,  462,  462,  462,  462,  462,  462,  462,    0,
  462,  462,  423,  462,  462,  462,  462,  462,  462,  462,
  462,  462,  462,    0,  462,  462,  462,  462,  462,  462,
  462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
  462,  462,  462,  462,  462,  462,    0,    0,    0,  462,
  566,    0,  462,  423,    0,    0,  566,  462,  423,    0,
  423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
  423,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  423,    0,  423,  423,  423,  423,  423,  423,  423,    0,
  423,    0,  566,  423,  423,  423,  423,  423,  423,  423,
  423,  423,  423,    0,  423,  423,  423,  423,  423,  423,
  423,  423,  423,  423,  423,  423,  423,  423,  423,  423,
  423,  423,  423,  423,  423,  423,    0,    0,    0,  423,
    0,    0,  423,  566,    0,    0,    0,  423,  566,  612,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  566,    0,  566,    0,  566,    0,  566,  566,  566,    0,
  566,  566,    0,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,    0,    0,    0,  566,  566,  566,  566,
  566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
  566,  566,  566,  566,  388,  566,    0,    0,    0,    0,
  388,    0,    0,    0,    0,    0,    0,  566,    0,    0,
    0,    0,  612,    0,    0,    0,    0,  612,    0,  612,
  612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
    0,    0,  388,    0,    0,    0,  388,    0,    0,  612,
    0,  612,    0,  612,    0,  612,  612,  612,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  579,    0,    0,  388,    0,    0,
  579,    0,  388,    0,  388,  388,  388,  388,  388,  388,
  388,  388,  388,  388,  388,    0,  612,    0,    0,  388,
    0,    0,    0,  388,  388,    0,  388,  388,  388,    0,
  388,  388,  388,    0,  388,  388,  579,    0,  388,  388,
  388,  388,    0,    0,    0,  388,  388,    0,    0,    0,
  388,  388,  388,  388,  388,  388,  388,  388,    0,    0,
  583,    0,    0,    0,    0,    0,  583,    0,    0,  388,
    0,  388,    0,    0,    0,    0,    0,  579,    0,    0,
    0,  388,  579,    0,  579,  579,  579,  579,  579,  579,
  579,  579,  579,  579,  579,    0,    0,    0,    0,    0,
    0,    0,  583,    0,  579,    0,  579,    0,  579,    0,
  579,  579,  579,    0,  579,  579,    0,    0,  579,  579,
  579,  579,  579,  579,  579,  579,  579,    0,    0,    0,
  579,  579,  579,  579,  579,  579,  579,  579,    0,    0,
  586,    0,    0,  583,    0,    0,  586,    0,  583,  579,
  583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
  583,  579,    0,    0,    0,    0,    0,    0,    0,    0,
  583,    0,  583,    0,  583,    0,  583,  583,  583,    0,
  583,  583,  586,    0,  583,  583,  583,  583,    0,    0,
    0,  583,  583,    0,    0,    0,  583,  583,  583,  583,
  583,  583,  583,  583,    0,    0,  584,    0,    0,    0,
    0,    0,  584,    0,    0,  583,    0,    0,    0,    0,
    0,    0,    0,  586,    0,    0,    0,  583,  586,    0,
  586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
  586,    0,    0,    0,    0,    0,    0,    0,  584,    0,
  586,    0,  586,    0,  586,    0,  586,  586,  586,    0,
  586,  586,    0,    0,  586,  586,  586,  586,    0,    0,
    0,  586,  586,    0,    0,    0,  586,  586,  586,  586,
  586,  586,  586,  586,    0,    0,  585,    0,    0,  584,
    0,    0,  585,    0,  584,  586,  584,  584,  584,  584,
  584,  584,  584,  584,  584,  584,  584,  586,    0,    0,
    0,    0,    0,    0,    0,    0,  584,    0,  584,    0,
  584,    0,  584,  584,  584,    0,  584,  584,  585,    0,
  584,  584,  584,  584,    0,    0,    0,  584,  584,    0,
    0,    0,  584,  584,  584,  584,  584,  584,  584,  584,
    0,    0,  589,    0,    0,    0,    0,    0,    0,    0,
    0,  584,    0,    0,    0,    0,    0,    0,    0,  585,
    0,    0,    0,  584,  585,    0,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  585,    0,  585,    0,
  585,    0,  585,  585,  585,    0,  585,  585,    0,    0,
  585,  585,  585,  585,    0,    0,    0,  585,  585,    0,
    0,    0,  585,  585,  585,  585,  585,  585,  585,  585,
  590,    0,    0,    0,    0,  589,    0,    0,    0,    0,
  589,  585,  589,  589,  589,  589,  589,  589,  589,  589,
  589,  589,  589,  585,    0,    0,    0,    0,    0,    0,
    0,    0,  589,    0,  589,    0,  589,    0,  589,  589,
  589,    0,    0,    0,    0,    0,  589,  589,  589,  589,
    0,    0,    0,  589,  589,    0,    0,    0,  589,  589,
  589,  589,  589,  589,  589,  589,  591,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  589,    0,    0,
    0,    0,    0,  590,    0,    0,    0,    0,  590,  589,
  590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
  590,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  590,    0,  590,    0,  590,    0,  590,  590,  590,    0,
    0,    0,    0,    0,  590,  590,  590,  590,    0,    0,
    0,  590,  590,    0,    0,    0,  590,  590,  590,  590,
  590,  590,  590,  590,  592,    0,    0,    0,    0,  591,
    0,    0,    0,    0,  591,  590,  591,  591,  591,  591,
  591,  591,  591,  591,  591,  591,  591,  590,    0,    0,
    0,    0,    0,    0,    0,    0,  591,    0,  591,    0,
  591,    0,  591,  591,  591,    0,    0,    0,    0,    0,
  591,  591,  591,  591,    0,    0,    0,  591,  591,    0,
    0,    0,  591,  591,  591,  591,  591,  591,  591,  591,
  593,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  591,    0,    0,    0,    0,    0,  592,    0,    0,
    0,    0,  592,  591,  592,  592,  592,  592,  592,  592,
  592,  592,  592,  592,  592,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  592,    0,  592,    0,  592,    0,
  592,  592,  592,    0,    0,    0,    0,    0,  592,  592,
  592,  592,    0,    0,    0,  592,  592,    0,    0,    0,
    0,    0,  592,  592,  592,  592,  592,  592,  594,    0,
    0,    0,    0,  593,    0,    0,    0,    0,  593,  592,
  593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
  593,  592,    0,    0,    0,    0,    0,    0,    0,    0,
  593,    0,  593,    0,  593,    0,  593,  593,  593,    0,
    0,    0,    0,    0,  593,  593,  593,  593,    0,    0,
    0,  593,  593,    0,    0,    0,    0,    0,  593,  593,
  593,  593,  593,  593,  595,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  593,    0,    0,    0,    0,
    0,  594,    0,    0,    0,    0,  594,  593,  594,  594,
  594,  594,  594,  594,  594,  594,  594,  594,  594,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  594,    0,
  594,    0,  594,    0,  594,  594,  594,    0,    0,    0,
    0,    0,  594,  594,  594,  594,    0,    0,    0,  594,
  594,    0,    0,    0,    0,    0,  594,  594,  594,  594,
  594,  594,  596,    0,    0,    0,    0,  595,    0,    0,
    0,    0,  595,  594,  595,  595,  595,  595,  595,  595,
  595,  595,  595,  595,  595,  594,    0,    0,    0,    0,
    0,    0,    0,    0,  595,    0,  595,    0,  595,    0,
  595,  595,  595,    0,    0,    0,    0,    0,  595,  595,
  595,  595,    0,    0,    0,  595,  595,    0,    0,    0,
    0,    0,  595,  595,  595,  595,  595,  595,  597,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  595,
    0,    0,    0,    0,    0,  596,    0,    0,    0,    0,
  596,  595,  596,  596,  596,  596,  596,  596,  596,  596,
  596,  596,  596,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  596,    0,  596,    0,  596,    0,  596,  596,
  596,    0,    0,    0,    0,    0,  596,  596,  596,  596,
    0,    0,    0,  596,  596,    0,    0,    0,    0,    0,
  596,  596,  596,  596,  596,  596,  598,    0,    0,    0,
    0,  597,    0,    0,    0,    0,  597,  596,  597,  597,
  597,  597,  597,  597,  597,  597,  597,  597,  597,  596,
    0,    0,    0,    0,    0,    0,    0,    0,  597,    0,
  597,    0,  597,    0,  597,  597,  597,    0,    0,    0,
    0,    0,    0,    0,  597,  597,    0,    0,    0,  597,
  597,    0,    0,    0,    0,    0,    0,    0,  597,  597,
  597,  597,  599,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  597,    0,    0,    0,    0,    0,  598,
    0,    0,    0,    0,  598,  597,  598,  598,  598,  598,
  598,  598,  598,  598,  598,  598,  598,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  598,    0,  598,    0,
  598,    0,  598,  598,  598,    0,    0,    0,    0,    0,
    0,    0,  598,  598,    0,    0,    0,  598,  598,    0,
    0,    0,    0,    0,    0,    0,  598,  598,  598,  598,
  600,    0,    0,    0,    0,  599,    0,    0,    0,    0,
  599,  598,  599,  599,  599,  599,  599,  599,  599,  599,
  599,  599,  599,  598,    0,    0,    0,    0,    0,    0,
    0,    0,  599,    0,  599,    0,  599,    0,  599,  599,
  599,    0,    0,    0,    0,    0,    0,    0,  599,  599,
    0,    0,    0,  599,  599,    0,    0,    0,    0,    0,
    0,    0,  599,  599,  599,  599,  601,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  599,    0,    0,
    0,    0,    0,  600,    0,    0,    0,    0,  600,  599,
  600,  600,  600,  600,  600,  600,  600,  600,  600,  600,
  600,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  600,    0,  600,    0,  600,    0,  600,  600,  600,    0,
    0,    0,    0,    0,    0,    0,  600,  600,    0,    0,
    0,  600,  600,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  600,  600,  602,    0,    0,    0,    0,  601,
    0,    0,    0,    0,  601,  600,  601,  601,  601,  601,
  601,  601,  601,  601,  601,  601,  601,  600,    0,    0,
    0,    0,    0,    0,    0,    0,  601,    0,  601,    0,
  601,    0,  601,  601,  601,    0,    0,    0,    0,    0,
    0,    0,  601,  601,    0,    0,    0,  601,  601,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  601,  601,
  603,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  601,    0,    0,    0,    0,    0,  602,    0,    0,
    0,    0,  602,  601,  602,  602,  602,  602,  602,  602,
  602,  602,  602,  602,  602,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  602,    0,  602,    0,  602,    0,
  602,  602,  602,    0,    0,    0,    0,    0,    0,    0,
    0,  602,    0,    0,    0,  602,  602,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  602,  602,  604,    0,
    0,    0,    0,  603,    0,    0,    0,    0,  603,  602,
  603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
  603,  602,    0,    0,    0,    0,    0,    0,    0,    0,
  603,    0,  603,    0,  603,    0,  603,  603,  603,    0,
    0,    0,    0,    0,    0,    0,    0,  603,    0,    0,
    0,  603,  603,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  603,  603,  605,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  603,    0,    0,    0,    0,
    0,  604,    0,    0,    0,    0,  604,  603,  604,  604,
  604,  604,  604,  604,  604,  604,  604,  604,  604,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  604,    0,
  604,    0,  604,    0,  604,  604,  604,    0,    0,    0,
    0,    0,    0,    0,    0,  604,    0,    0,    0,    0,
  604,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  604,  604,  606,    0,    0,    0,    0,  605,    0,   59,
    0,    0,  605,  604,  605,  605,  605,  605,  605,  605,
  605,  605,  605,  605,  605,  604,    0,    0,    0,    0,
    0,    0,   59,    0,  605,    0,  605,    0,  605,    0,
  605,  605,  605,    0,    0,   59,    0,    0,    0,    0,
   59,  605,    0,    0,    0,   59,  605,   59,   59,   59,
   59,    0,    0,    0,    0,   59,  605,  605,  607,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  605,
    0,   59,    0,    0,   59,  606,   59,    0,    0,    0,
  606,  605,  606,  606,  606,  606,  606,  606,  606,  606,
  606,  606,  606,    0,    0,    0,    0,    0,    0,    0,
   59,   59,  606,    0,  606,    0,  606,    0,  606,  606,
  606,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  606,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  606,  606,  608,   61,    0,    0,
    0,  607,    0,    0,    0,    0,  607,  606,  607,  607,
  607,  607,  607,  607,  607,  607,  607,  607,  607,  606,
   62,    0,    0,    0,    0,    0,    0,    0,  607,    0,
  607,    0,  607,   63,  607,  607,  607,    0,   65,    0,
    0,    0,    0,   66,    0,   67,   68,   69,   70,    0,
  607,    0,    0,   71,    0,    0,    0,   72,    0,    0,
  607,  607,  609,    0,    0,    0,    0,    0,    0,   73,
    0,    0,   74,  607,   75,    0,    0,    0,    0,  608,
    0,    0,    0,    0,  608,  607,  608,  608,  608,  608,
  608,  608,  608,  608,  608,  608,  608,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  608,    0,  608,    0,
  608,    0,  608,  608,  608,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  608,  363,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  608,
    0,   59,    0,   59,    0,  609,    0,    0,    0,  465,
  609,  608,  609,  609,  609,  609,  609,  609,  609,  609,
  609,  609,  609,  608,   59,  363,    0,    0,    0,    0,
    0,    0,  609,    0,  609,    0,  609,   59,  609,  609,
  609,    0,   59,    0,    0,  363,    0,   59,    0,   59,
   59,   59,   59,    0,  609,   59,    0,   59,    0,    0,
    0,   59,    0,    0,    0,  609,    0,    0,    0,    0,
    0,    0,    0,   59,    0,    0,   59,  609,   59,    0,
    0,  363,    0,    0,  363,    0,    0,    0,    0,  609,
    0,    0,    0,    0,  363,    0,  363,    0,  363,    0,
    0,  363,    0,  363,  363,    0,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,    0,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,    0,
  363,    0,  363,    0,    0,  363,    0,    0,    0,    0,
  363,  363,  363,  363,  363,  363,    0,    0,    0,  363,
  363,    0,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,    0,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,    0,    0,    0,  363,   95,
    0,  363,    0,    0,    0,    0,  363,   96,   97,   98,
   99,    0,    0,  100,  101,    0,  102,  103,  104,  105,
  106,  107,  108,    0,    0,    0,    0,    0,  109,    0,
  110,  111,  112,  113,  114,  115,    0,    0,  116,    0,
    0,    0,  117,  118,    0,  119,  120,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  122,    0,  123,
    0,  124,  125,    0,    0,  126,    0,  127,  128,  129,
  130,  131,  132,  133,  134,  135,  136,  137,  138,    0,
  139,    0,    0,  140,    0,    0,    0,  141,  142,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  143,    0,
    0,    0,  144,    0,    0,    0,    0,  145,  146,  147,
  148,  149,    0,    0,    0,  150,    0,  151,    0,    0,
  299,    0,    0,  152,  153,    0,    0,    0,   96,   97,
   98,   99,    0,    0,  100,  101,    0,  102,  103,  104,
  105,  106,  107,  108,    0,  154,  155,  156,  157,  109,
    0,  110,  111,  112,  113,  114,  115,    0,    0,  116,
    0,    0,    0,  117,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  122,    0,
  123,    0,  124,  125,    0,    0,  126,    0,  127,  128,
  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
    0,  139,    0,    0,  140,    0,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  143,
    0,    0,    0,  144,    0,    0,    0,    0,  145,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
    0,  911,    0,    0,  152,  153,    0,    0,    0,  911,
  911,  911,  911,    0,    0,  911,  911,    0,  911,  911,
  911,  911,  911,  911,  911,    0,  154,  155,  156,  157,
  911,    0,  911,  911,  911,  911,  911,  911,    0,    0,
  911,    0,    0,    0,  911,  911,    0,  911,  911,  911,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  911,
    0,  911,    0,  911,  911,    0,    0,  911,    0,  911,
  911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
  911,    0,  911,    0,    0,  911,    0,    0,    0,  911,
  911,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  911,    0,    0,    0,  911,    0,    0,    0,    0,  911,
  911,  911,  911,  911,    0,    0,    0,  911,    0,  911,
    0,    0,  776,    0,    0,  911,  911,    0,    0,    0,
  776,  776,  776,  776,    0,    0,  776,  776,    0,  776,
  776,  776,  776,  776,  776,  776,    0,  911,  911,  911,
  911,  776,    0,  776,  776,  776,  776,  776,  776,    0,
    0,  776,    0,    0,    0,  776,  776,    0,  776,  776,
  776,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  776,    0,  776,    0,  776,  776,    0,    0,  776,    0,
  776,  776,  776,  776,  776,  776,  776,  776,  776,  776,
  776,  776,    0,  776,    0,    0,  776,    0,    0,    0,
  776,  776,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  776,    0,    0,    0,  776,    0,    0,    0,    0,
  776,  776,  776,  776,  776,    0,    0,    0,  776,    0,
  776,    0,    0,  712,    0,    0,  776,  776,    0,    0,
    0,   96,   97,    0,   99,    0,    0,  100,  287,    0,
    0,    0,  104,  105,  106,    0,  108,    0,  776,  776,
  776,  776,  109,    0,   61,  111,    0,    0,    0,    0,
    0,    0,  116,    0,    0,    0,    0,  118,    0,  119,
  120,  121,    0,    0,    0,    0,    0,   62,    0,    0,
    0,    0,    0,  123,    0,  124,  125,    0,    0,  126,
   63,    0,  128,    0,  130,   65,  132,  133,  134,  288,
   66,  137,   67,   68,   69,   70,    0,    0,    0,    0,
   71,  141,  142,    0,   72,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   73,    0,    0,   74,
    0,   75,  526,  713,    0,    0,  144,    0,    0,    0,
    0,    0,  146,  147,  148,  149,    0,    0,    0,  150,
    0,  151,    0,    0,  299,    0,    0,  152,  153,    0,
    0,    0,   96,   97,    0,   99,    0,    0,  100,  287,
    0,    0,    0,  104,  105,  106,    0,  108,    0,  154,
  333,  156,  157,  109,    0,    0,  111,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,  660,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  288,    0,  137,    0,    0,  139,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,    0,  299,    0,    0,  152,  153,
    0,    0,    0,   96,   97,    0,   99,    0,    0,  100,
  287,    0,    0,    0,  104,  105,  106,    0,  108,    0,
  154,  333,  156,  157,  109,    0,  385,  111,    0,    0,
    0,    0,    0,    0,  116,    0,    0,    0,    0,  118,
    0,  119,  120,  121,    0,    0,    0,    0,    0,  385,
    0,    0,    0,    0,    0,  123,    0,  124,  125,    0,
    0,  126,  385,    0,  128,    0,  130,  385,  132,  133,
  134,  288,  385,  137,  385,  385,  385,  385,    0,    0,
    0,    0,  385,  141,  142,    0,  385,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  385,    0,
    0,  385,    0,  385,    0,    0,    0,    0,  144,    0,
    0,    0,    0,    0,  146,  147,  148,  149,    0,    0,
    0,  150,    0,  151,    0,   96,   97,    0,   99,  152,
  153,  100,  287,    0,    0,  385,  104,  105,  106,    0,
  108,    0,    0,    0,    0,    0,  109,    0,   30,  111,
    0,  154,  333,  156,  157,    0,  116,    0,    0,    0,
    0,  118,    0,  119,  120,  121,    0,    0,    0,    0,
    0,   30,    0,    0,    0,    0,    0,  123,  385,  124,
  125,    0,    0,  126,   30,    0,  128,    0,  130,   30,
  132,  133,  134,  288,   30,  137,   30,   30,   30,   30,
    0,    0,   30,    0,   30,  141,  142,    0,   30,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   30,    0,    0,   30,    0,   30,  718,  967,    0,    0,
  144,    0,    0,    0,    0,    0,  146,  147,  148,  149,
    0,    0,    0,  150,    0,  151,    0,    0,    0,    0,
    0,  152,  153,   30,   30,    0,   96,   97,    0,   99,
    0,    0,  100,  287,    0,    0,    0,  104,  105,  106,
    0,  108,    0,  154,  719,  156,  157,  109,    0,   59,
  111,    0,    0,  720,    0,    0,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,   59,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,   59,    0,  128,    0,  130,
   59,  132,  133,  134,  288,   59,  137,   59,   59,   59,
   59,    0,    0,    0,    0,   59,  141,  142,    0,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,    0,    0,   59,    0,   59,  718,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,    0,  516,
   59,   59,  152,  153,  226,    0,    0,   96,   97,    0,
   99,    0,    0,  100,  287,    0,    0,    0,  104,  105,
  106,    0,  108,    0,  154,  719,  156,  157,  109,    0,
    0,  111,    0,    0,  720,    0,    0,    0,  116,    0,
    0,    0,    0,  118,  810,  119,  120,  121,    0,    0,
    0,    0,    0,   97,    0,   99,    0,    0,  100,  123,
    0,  124,  125,  104,    0,  126,    0,  108,  128,    0,
  130,    0,  132,  133,  134,  288,  111,  137,    0,    0,
    0,    0,    0,  116, 1073,    0,    0,    0,  118,    0,
    0,    0,  121,   97,    0,   99,    0,    0,  100,    0,
    0,    0,    0,  104,  123,    0,  124,  108,    0,    0,
  126,    0,  289,    0,    0,    0,  111,    0,  133,  134,
    0,    0,  137,  116,    0,  266,    0,    0,  118,    0,
    0,    0,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,    0,    0,    0,
  126,    0,    0,   43,    0,  154,  517,   43,  133,  134,
    0,   43,  137,   43,    0,  266,   43,    0,   43,    0,
    0,   43,    0,   43,    0,   43,    0,   43,    0,    0,
   43,    0,    0,   43,   43,    0,    0,    0,    0,    0,
    0,   43,   43,   43,    0,    0,   43,   43,   43,    0,
   43,   89,    0,   43,    0,   43,   43,   43,   43,    0,
    0,    0,   43,   43,   43,    0,    0,   43,   43,   43,
    0,    0,    0,    0,    0,    0,   43,   43,    0,   43,
   43,   43,   43,   43,   43,    0,    0,    0,   43,    0,
    0,   89,    0,    0,    0,    0,   44,    0,    0,    0,
   44,    0,    0,    0,   44,    0,   44,    0,    0,   44,
    0,   44,   43,   43,   44,    0,   44,    0,   44,    0,
   44,    0,    0,   44,    0,    0,   44,   44,    0,    0,
    0,    0,    0,    0,   44,   44,   44,    0,    0,   44,
   44,   44,    0,   44,    0,    0,   44,    0,   44,   44,
   44,   44,    0,    0,    0,   44,   44,   44,    0,   43,
   44,   44,   44,    0,    0,    0,    0,    0,    0,   44,
   44,    0,   44,   44,   44,   44,   44,   44,    0,    0,
   41,   44,    0,    0,   41,    0,    0,    0,   41,    0,
   41,    0,    0,   41,    0,   41,    0,    0,   41,    0,
   41,    0,   41,    0,   41,   44,   44,   41,    0,    0,
   41,   41,    0,    0,    0,    0,    0,    0,   41,   41,
   41,    0,    0,   41,   41,   41,    0,   41,    0,    0,
   41,    0,   41,   41,   41,   41,    0,    0,    0,   41,
   41,   41,    0,    0,   41,   41,   41,    0,    0,    0,
    0,    0,   44,   41,   41,    0,   41,   41,    0,   41,
   41,   41,  363,    0,   42,   41,    0,    0,   42,    0,
    0,    0,   42,    0,   42,    0,    0,   42,    0,   42,
    0,    0,   42,    0,   42,    0,   42,    0,   42,   41,
   41,   42,    0,    0,   42,   42,    0,    0,  363,    0,
    0,    0,   42,   42,   42,    0,    0,   42,   42,   42,
    0,   42,    0,    0,   42,    0,   42,   42,   42,   42,
    0,    0,    0,   42,   42,   42,    0,    0,   42,   42,
   42,    0,    0,    0,    0,    0,   41,   42,   42,    0,
   42,   42,    0,   42,   42,   42,    0,    0,    0,   42,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  363,
  363,  363,  363,   42,   42,    0,  363,  363,    0,    0,
  363,  363,  363,  363,  363,  363,  363,  363,  363,    0,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
  363,  363,    0,   45,    0,  363,    0,   59,  363,    0,
   42,   59,    0,   59,    0,    0,   59,    0,   59,    0,
    0,   59,    0,   59,    0,   59,    0,   59,    0,    0,
   59,    0,    0,   59,   59,    0,    0,    0,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
   59,    0,    0,   59,    0,   59,   59,   59,   59,    0,
    0,    0,   59,   59,   59,    0,    0,   59,   59,   59,
    0,    0,    0,    0,    0,    0,   59,   59,    0,   59,
   59,    0,   59,   59,   59,    0,    0,   46,   59,    0,
    0,   59,    0,    0,    0,   59,    0,   59,    0,    0,
   59,    0,   59,    0,    0,   59,    0,   59,    0,   59,
    0,   59,   45,    0,   59,    0,    0,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,    0,   59,    0,    0,   59,    0,   59,
   59,   59,   59,    0,    0,    0,   59,   59,   59,    0,
    0,   59,   59,   59,    0,    0,    0,    0,    0,   59,
   59,   59,    0,   59,   59,    0,   59,   59,   59,    0,
    0,    0,   59,    0,    0,    0,    0,   60,    0,   60,
    0,   60,    0,   60,    0,    0,   60,    0,   60,   60,
    0,   60,    0,   60,    0,   60,   46,   60,   60,   60,
   60,    0,    0,   60,   60,    0,    0,    0,    0,   60,
   60,   60,   60,   60,    0,    0,   60,   60,   60,    0,
   60,    0,   60,   60,   60,   60,   60,   60,   60,   60,
    0,   60,   60,   60,   60,    0,    0,   60,   60,   60,
    0,   60,    0,   59,    0,    0,   60,   60,    0,   60,
   60,    0,   60,   60,   60,    0,    0,    0,   60,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,    0,   60,   60,
   59,    0,   59,    0,    0,   59,    0,   59,   59,    0,
   59,   60,   59,    0,   59,    0,   59,   59,   59,   59,
    0,    0,   59,   59,    0,    0,    0,    0,   59,    0,
   59,   59,   59,    0,    0,   59,    0,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,   60,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,    0,    0,    0,   59,   59,    0,   59,   59,
   59,   59,   59,   59,   59,    0,   59,   59,    0,   59,
    0,   59,   59,    0,   59,    0,   59,    0,   59,    0,
   59,   59,   59,   59,    0,    0,   59,   59,    0,    0,
    0,   90,   59,    0,   59,   59,   59,    0,    0,   59,
   59,   59,    0,   59,    0,    0,   59,    0,   59,   59,
   59,   59,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,    0,    0,    0,    0,    0,    0,   59,
   59,    0,   59,   59,    0,   59,   59,   59,   59,    0,
    0,   59,    0,    0,    0,    0,   59,    0,    0,    0,
   59,    0,   59,    0,    0,   59,    0,   59,   59,    0,
   59,    0,   59,    0,   59,   91,   59,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,   59,    0,
   59,   59,   59,    0,    0,   59,    0,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,   59,    0,    0,   59,   59,    0,   59,   59,
   59,   59,   59,   59,   59,    0,   59,   59,    0,   59,
    0,   59,   59,    0,   59,    0,   59,    0,   59,    0,
   59,   59,   59,   59,    0,    0,   59,   59,    0,    0,
    0,  113,   59,    0,   59,   59,   59,    0,    0,   59,
   59,   59,    0,   59,    0,    0,   59,    0,   59,   59,
   59,   59,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,    0,    0,    0,    0,    0,    0,   59,
   59,    0,   59,   59,    0,   59,   59,   59,   59,    0,
    0,   59,    0,    0,    0,    0,   59,    0,    0,    0,
   59,    0,   59,    0,    0,   59,    0,   59,   59,    0,
   59,    0,   59,    0,   59,  114,   59,   59,   59,   59,
    0,    0,   59,   59,   59,    0,    0,    0,   59,    0,
   59,   59,   59,    0,    0,   59,    0,   59,    0,   59,
    0,    0,   59,    0,   59,   59,   59,   59,    0,    0,
    0,   59,   59,   59,    0,    0,   59,   59,   59,    0,
    0,    0,   59,    0,    0,   59,   59,    0,   59,   59,
   59,   59,   59,   59,   59,    0,   59,   59,    0,   59,
    0,   59,   59,    0,   59,    0,   59,    0,   59,    0,
   59,   59,   59,   59,    0,    0,   59,   59,    0,    0,
    0,  244,   59,    0,   59,   59,   59,    0,    0,   59,
    0,   59,    0,   59,    0,    0,   59,    0,   59,   59,
   59,   59,    0,    0,    0,   59,   59,   59,    0,    0,
   59,   59,   59,  363,    0,    0,    0,    0,    0,   59,
   59,    0,   59,   59,    0,   59,   59,   59,   59,    0,
    0,   59,    0,    0,    0,    0,  363,    0,    0,    0,
    0,    0,    0,  385,    0,    0,    0,    0,    0,  363,
    0,    0,    0,    0,  363,  245,    0,  363,    0,  363,
    0,  363,  363,  363,  363,    0,  385,    0,    0,  363,
    0,    0,    0,  363,    0,    0,    0,  363,    0,  385,
    0,  384,    0,    0,  385,  363,    0,  262,  363,  385,
  363,  385,  385,  385,  385,    0,    0,    0,    0,  385,
    0,    0,   59,  385,  384,    0,    0,  385,    0,  363,
    0,    0,    0,    0,    0,  385,    0,  384,  385,  363,
  385,  295,  384,  363,    0,  261,    0,  384,    0,  384,
  384,  384,  384,    0,    0,    0,  363,  384,    0,    0,
    0,  384,    0,    0,    0,  384,    0,    0,   96,   97,
    0,   99,    0,  384,  100,  287,  384,    0,  384,  104,
  105,  106,    0,  108,    0,  363,   97,    0,   99,  109,
    0,  100,  111,    0,    0,    0,  104,    0,    0,  116,
  108,    0,    0,    0,  118,    0,  119,  120,  121,  111,
  589,    0,    0,    0,    0,  385,  116,  590,    0,    0,
  123,  118,  124,  125,    0,  121,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  288,  123,  137,  124,
    0,    0,    0,  126,    0,  591,    0,    0,  141,  142,
    0,  133,  134,  384,    0,  137,    0,    0,  266,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,  895,    0,  592,    0,    0,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
   96,   97,    0,   99,  152,  153,  100,  287,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,  154,  487,  156,  157,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,  589,    0,  351,    0,    0,    0,    0,  590,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  288,    0,
  137,    0,    0,    0,    0,    0,    0,  591,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  144,    0,    0,  592,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  287,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  487,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,  784,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  288,    0,  137,    0,    0,    0,    0,    0,    0,  785,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  526,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  287,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  333,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,  589,    0,    0,    0,
    0,    0,    0,  590,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  288,    0,  137,    0,    0,    0,    0,    0,
    0,  591,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,   96,   97,    0,   99,
  152,  153,  100,  287,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,  154,  487,  156,  157,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  288,    0,  137,    0,    0,  139,
    0,    0,    0,    0,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,   96,   97,
    0,   99,  152,  153,  100,  287,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  154,  333,  156,  157,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  288,    0,  137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  526,
    0,    0,    0,  144,    0,    0,    0,    0,    0,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
   96,   97,    0,   99,  152,  153,  100,  287,    0,    0,
    0,  104,  105,  106,    0,  108,    0,    0,    0,    0,
    0,  109,    0,    0,  111,    0,  154,  333,  156,  157,
    0,  116,    0,    0,    0,    0,  118,    0,  119,  120,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,  124,  125,    0,    0,  126,    0,
    0,  128,    0,  130,    0,  132,  133,  134,  288,    0,
  137,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  141,  142,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  861,    0,    0,  144,    0,    0,    0,    0,
    0,  146,  147,  148,  149,    0,    0,    0,  150,    0,
  151,    0,   96,   97,    0,   99,  152,  153,  100,  287,
    0,    0,    0,  104,  105,  106,    0,  108,    0,    0,
    0,    0,    0,  109,    0,    0,  111,    0,  154,  333,
  156,  157,    0,  116,    0,    0,    0,    0,  118,    0,
  119,  120,  121,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,  124,  125,    0,    0,
  126,    0,    0,  128,    0,  130,    0,  132,  133,  134,
  288,    0,  137,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  141,  142,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  529,    0,    0,    0,  144,    0,    0,
    0,    0,    0,  146,  147,  148,  149,    0,    0,    0,
  150,    0,  151,    0,   96,   97,    0,   99,  152,  153,
  100,  287,    0,    0,    0,  104,  105,  106,    0,  108,
    0,    0,    0,    0,    0,  109,    0,    0,  111,    0,
  154,  333,  156,  157,    0,  116,    0,    0,    0,    0,
  118,    0,  119,  120,  121,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  123,    0,  124,  125,
    0,    0,  126,    0,    0,  128,    0,  130,    0,  132,
  133,  134,  288,    0,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  141,  142,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  144,
    0,    0,    0,    0,    0,  146,  147,  148,  149,    0,
    0,    0,  150,    0,  151,    0,   96,   97,    0,   99,
  152,  153,  100,  287,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,    0,
  111,    0,  154,  333,  156,  157,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,    0,    0,  128,    0,  130,
    0,  132,  133,  134,  288,    0,  137,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  141,  142,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,   96,   97,
    0,   99,  152,  153,  100,  287,    0,    0,    0,  104,
  105,  106,    0,  108,    0,    0,    0,    0,    0,  109,
    0,    0,  111,    0,  154,  479,  156,  157,    0,  116,
    0,    0,    0,    0,  118,    0,  119,  120,  121,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  123,    0,  124,  125,    0,    0,  126,    0,    0,  128,
    0,  130,    0,  132,  133,  134,  288,    0,  137,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  141,  142,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,    0,    0,    0,    0,    0,  146,
  147,  148,  149,    0,    0,    0,  150,    0,  151,    0,
  632,  632,    0,  632,  152,  153,  632,  632,    0,    0,
    0,  632,  632,  632,    0,  632,    0,    0,    0,    0,
    0,  632,    0,    0,  632,    0,  154,  487,  156,  157,
    0,  632,    0,    0,    0,    0,  632,    0,  632,  632,
  632,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  632,    0,  632,  632,    0,    0,  632,    0,
    0,  632,    0,  632,    0,  632,  632,  632,  632,    0,
  632,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  632,  632,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  632,    0,    0,    0,    0,
    0,  632,  632,  632,  632,    0,    0,    0,  632,    0,
  632,    0,   87,   87,    0,   87,  632,  632,   87,   87,
    0,    0,    0,   87,   87,   87,    0,   87,    0,    0,
    0,    0,    0,   87,    0,    0,   87,    0,  632,  632,
  632,  632,    0,   87,    0,    0,    0,    0,   87,    0,
   87,   87,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   87,    0,   87,   87,    0,    0,
   87,    0,    0,   87,    0,   87,    0,   87,   87,   87,
   87,    0,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   87,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   87,    0,    0,
    0,    0,    0,   87,   87,   87,   87,    0,    0,    0,
   87,    0,   87,    0,  159,  159,    0,  159,   87,   87,
  159,  159,    0,    0,    0,  159,  159,  159,    0,  159,
    0,    0,    0,    0,    0,  159,    0,    0,  159,    0,
   87,   87,   87,   87,    0,  159,    0,    0,    0,    0,
  159,    0,  159,  159,  159,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  159,    0,  159,  159,
    0,    0,  159,    0,    0,  159,    0,  159,    0,  159,
  159,  159,  159,    0,  159,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  159,  159,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  159,
    0,    0,    0,    0,    0,  159,  159,  159,  159,    0,
    0,    0,  159,    0,  159,    0,   96,   97,    0,   99,
  159,  159,  100,  287,    0,    0,    0,  104,  105,  106,
    0,  108,    0,    0,    0,    0,    0,  109,    0,   59,
  111,    0,  159,  159,  159,  159,    0,  116,    0,    0,
    0,    0,  118,    0,  119,  120,  121,    0,    0,    0,
    0,    0,   59,    0,    0,    0,    0,    0,  123,    0,
  124,  125,    0,    0,  126,   59,    0,  128,    0,  130,
   59,  132,  133,  134,  288,   59,  137,   59,   59,   59,
   59,    0,    0,    0,    0,   59,    0,    0,    0,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,    0,    0,   59,    0,   59,    0,    0,    0,
    0,  144,    0,    0,    0,    0,    0,  146,  147,  148,
  149,    0,    0,    0,  150,    0,  151,    0,    0,    0,
   59,   59,  152,  153,  228,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  655,
    0,  655,    0,  655,  154,  290,  655,  157,  655,  655,
    0,  655,    0,  655,    0,  655,    0,  655,  655,  655,
    0,    0,    0,  655,  655,    0,    0,    0,    0,  655,
    0,  655,  655,    0,    0,    0,  655,    0,    0,    0,
  655,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  655,  655,    0,  655,    0,    0,    0,  655,  655,
    0,    0,    0,    0,    0,    0,  655,  655,    0,    0,
  655,    0,    0,  655,    0,    0,    0,    0,  655,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   96,
   97,    0,   99,    0,    0,  100,  287,    0,  655,  655,
  104,  105,  106,    0,  108,    0,    0,    0,    0,    0,
  109,  655,    0,  111,    0,    0,    0,    0,    0,    0,
  116,    0,    0,    0,    0,  118,    0,  119,  120,  121,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  123,    0,  124,  125,    0,    0,  126,    0,  655,
  128,    0,  130,    0,  132,  133,  134,  288,  654,  137,
  654,    0,  139,  654,    0,  654,  654,    0,  654,    0,
  654,    0,  654,    0,  654,  654,  654,    0,    0,    0,
  654,  654,    0,    0,    0,    0,  654,    0,  654,  654,
    0,    0,    0,  654,  289,    0,    0,  654,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  654,
    0,  654,    0,    0,    0,  654,  654,    0,    0,    0,
    0,    0,    0,  654,  654,    0,    0,  654,    0,    0,
  654,    0,    0,    0,    0,  654,    0,  154,  290,  654,
    0,  654,    0,    0,  654,    0,  654,  654,    0,  654,
    0,  654,    0,  654,    0,  654,  654,  654,    0,    0,
    0,  654,  654,    0,    0,    0,    0,  654,  654,  654,
  654,    0,    0,    0,  654,    0,    0,    0,  654,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  654,    0,  654,    0,    0,    0,  654,  654,    0,    0,
    0,    0,    0,    0,  654,  654,  654,   97,  654,   99,
    0,  654,  100,    0,    0, 1225,  654,  104,    0,  249,
    0,  108,    0,  250, 1226, 1227,    0,    0,    0,  251,
  111,    0,    0,    0,    0, 1228,    0,  116,    0,   97,
    0,   99,  118,    0,  100,    0,  121, 1225,    0,  104,
    0,  249,    0,  108,    0,  250, 1226, 1227,  123,    0,
  124,  251,  111,    0,  126,    0,    0, 1228,    0,  116,
    0,    0,  133,  134,  118,    0,  137,    0,  121, 1229,
    0,    0,    0,    0,  253,    0,    0,  654,    0,    0,
  123,    0,  124,    0,    0,    0,  126,    0,    0,    0,
    0,    0,    0,    0,  133,  134,    0,    0,  137,    0,
    0, 1229,    0,  654,    0,  654,  253, 1230,  654,    0,
  654,    0,    0,  654,    0,  654,    0,  654,    0,  654,
    0,    0,    0,    0,    0,  654,  654,    0,    0,    0,
    0,    0,    0,  654,  654,    0,    0,    0,  654,    0,
    0,    0,  654,    0,    0, 1231,    0,    0,   59,    0,
   59,    0,    0,   59,  654,    0,  654,    0,   59,    0,
  654,  654,   59,    0,    0,    0,    0,    0,  654,  654,
    0,   59,  654,    0,    0,  654,    0, 1231,   59,    0,
  654,    0,    0,   59,    0,    0,    0,   59,    0,   59,
    0,   59,   59,    0,   59,    0,   59,   59,    0,   59,
    0,   59,   59,    0,    0,   59,   59,    0,   59,    0,
    0,    0,    0,   59,   59,   59,    0,   59,    0,    0,
   59,    0,   59,    0,    0,    0,    0,   59,    0,    0,
    0,   59,   97,   59,   99,   59,    0,  100,    0,    0,
   59,    0,  104,   59,  249,   59,  108,    0,  250,   59,
    0,  654,   59,  186,  251,  111,    0,   59,   59,    0,
    0,   59,  116,    0,   59,    0,    0,  118,    0,    0,
    0,  121,    0,    0,    0,    0,   59,    0,   59,    0,
    0,   59,    0,  123,    0,  124,   59,    0,    0,  126,
   59,    0,    0,    0,    0,  186,   59,  133,  134,   59,
    0,  137,    0,    0,  252,    0,   59,    0,    0,  253,
    0,   59,    0,    0,    0,   59,   97,   59,   99,   59,
    0,  100,    0,    0,   59,    0,  104,   59,    0,   59,
  108,    0,    0,   59,    0,    0,   59,    0,    0,  111,
   59,   59,   59,    0,    0,   59,  116,    0,   59,    0,
    0,  118,    0,    0,    0,  121,   97,  570,   99,    0,
    0,  100,    0, 1154,  571,    0,  104,  123,    0,  124,
  108,    0,    0,  126,    0,    0,  572,    0,    0,  111,
   89,  133,  134,    0,    0,  137,  116,    0,  573,    0,
    0,  118,    0, 1155,    0,  121,   97,    0,   99,    0,
    0,  100,    0,    0,    0,    0,  104,  123,    0,  124,
  108,    0,    0,  126, 1156,    0,    0,    0,    0,  111,
    0,  133,  134,    0,   59,  137,  116,    0,  266,    0,
    0,  118,    0,    0,    0,  121,    0,    0,    0,    0,
   97,    0,   99,    0,    0,  100,    0,  123,    0,  124,
  104,    0,    0,  126,  108,    0,    0,    0,    0,    0,
    0,  133,  134,  111,  574,  137,    0,    0,  266,    0,
  116,    0,    0,    0,    0,  118,    0,    0,    0,  121,
   97,    0,   99,    0,    0,  100,    0,    0,    0,    0,
  104,  123,    0,  124,  108,    0,    0,  126,    0,    0,
    0,  876,    0,  111,   89,  133,  134,    0,    0,  137,
  116,    0,  266,    0,    0,  118,    0,    0,   97,  121,
   99,    0,    0,  100,    0,    0,    0,    0,  104,    0,
    0,  123,  108,  124,    0,    0,    0,  126,    0,    0,
    0,  111,    0,    0,   89,  133,  134,    0,  116,  137,
    0,    0,  266,  118,    0,    0,    0,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   97,  123,
   99,  124,    0,  100,    0,  126,    0,    0,  104,    0,
    0,    0,  108,  133,  134,    0,    0,  137,  353,    0,
  252,  111,   97,    0,   99,    0,    0,  100,  116,    0,
    0,    0,  104,  118,    0,    0,  108,  121,    0,    0,
    0,    0,    0,    0,    0,  111,    0,    0,    0,  123,
    0,  124,  116,    0,    0,  126,    0,  118,   89,    0,
    0,  121,    0,  133,  134,    0,    0,  137,    0,    0,
  455,    0,   97,  123,   99,  124,    0,  100,    0,  126,
    0,    0,  104,    0,    0,    0,  108,  133,  134,    0,
    0,  137,    0,    0,  266,  111,   89,    0,    0,    0,
    0,    0,  116,    0,    0,    0,    0,  118,    0,    0,
   97,  121,   99,    0,    0,  100,    0,    0,    0,    0,
  104,    0,    0,  123,  108,  124,    0,    0,    0,  126,
    0,    0,    0,  111,    0,    0,    0,  133,  134,    0,
  116,  137,    0,    0,  266,  118,   89,    0,    0,  121,
  515,    0,  515,    0,    0,  515,    0,    0,    0,    0,
  515,  123,    0,  124,  515,    0,    0,  126,    0,    0,
  640,    0,    0,  515,    0,  133,  134,    0,    0,  137,
  515,    0,  573,    0,    0,  515,    0,    0,  204,  515,
  204,    0,    0,  204,    0,    0,    0,    0,  204,    0,
    0,  515,  204,  515,    0,    0,    0,  515,    0,    0,
    0,  204,    0,    0,    0,  515,  515,    0,  204,  515,
  642,    0,  515,  204,    0,    0,    0,  204,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  214,  204,
  214,  204,    0,  214,    0,  204,    0,    0,  214,    0,
    0,    0,  214,  204,  204,    0,    0,  204,   89,    0,
  204,  214,  205,    0,  205,    0,    0,  205,  214,    0,
    0,    0,  205,  214,    0,    0,  205,  214,    0,    0,
    0,    0,    0,    0,    0,  205,    0,    0,    0,  214,
    0,  214,  205,    0,   59,  214,    0,  205,  515,    0,
    0,  205,    0,  214,  214,    0,    0,  214,    0,    0,
  214,    0,    0,  205,    0,  205,    0,   59,    0,  205,
    0,    0,    0,    0,    0,    0,    0,  205,  205,    0,
   59,  205,    0,    0,  205,   59,  204,    0,    0,    0,
   59,    0,   59,   59,   59,   59,    0,   59,   59,   59,
   59,    0,    0,    0,   59,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,    0,    0,   59,
   59,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   59,    0,    0,  214,    0,   59,    0,
    0,    0,    0,   59,    0,   59,   59,   59,   59,  328,
    0,    0,    0,   59,    0,    0,    0,   59,    0,    0,
  205,    0,    0,    0,    0,    0,    0,    0,    0,   59,
    0,    0,   59,    0,   59,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  329,
  };
  protected static readonly short [] yyCheck = {            52,
    0,    7,  256,  329,  322,  459,   81,   52,   52,    9,
   52,   76,   52,  533,  468,  239,  355,   29,  102,  224,
  320,   90,  707,  251,  129,  558,  331,   77,    2,  327,
    4,  529,  250,    2,  653,    4,  569,  576,   80,  139,
  277,  705,  706,    0,  281,  822,  823,    0,    0,   55,
    9,  319,    9,   53,  259,    9,   52,  102,  350,  101,
   52,  161,  107,  256,  164,  256,  141,  142,   76,  122,
  256,   52,   46,  268,  256,  256,  129,   46,  256,  325,
  883,  276,  157,  294,  359,  749,  366,  102,   52,  131,
  256,  144,  256,  135,   53,  256,   53,   52,  256,  256,
  256,  268,  256,  331,  256,  366,   52,   76,   82,  998,
   52,   52,   81,   82,   52,  256,  282,   91,  366,  256,
   52,  366,   91,   52, 1161,  330,  256,  332,  263,  349,
  350,  146,  147,  148,  149,  150,  151,  152,  153, 1176,
 1189,  918,  269,  423,  399,  256,  383,  422,  314,  926,
  268,  294,  413,  206,  254,  359,  411,  367,  256,  286,
  260,  206,  206,  306,  206,  379,  206,  413,  413, 1218,
   87, 1060,  141,  142,  859,  423,  979,  368,  981,  256,
  315,  372,  339,  257,  249,  367,  379,  344,  157,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  687,  379,  413,  423,  418,  256,  532,  256,  372,  366,
  206,  368,  416,  370,  206,  372,  373,  374,  413,  558,
  295,  358,  886,  887,  277,  206,  367,  413,  281,   52,
  569,  388,  413,  286,  452,  365,  289,  367,  155,  369,
  240,  249,  206,  327,  804,  930,  321,  413,  366,  349,
  417,  206,  413,   76,  319,  413,  367,  413,   81,  413,
  206,  413,  367,  338,  206,  206,  423,  365,  206,  322,
  413,  257,  325,  326,  206,  320,  374,  206,  546,  102,
  249,  240,  251,  240,  107,  415,  240,  256,  418,  366,
  954,  344,  366,  346, 1331,  372,  960,  350,  359,  417,
  839,  346,  369,  345,  257,  257,  335,  372, 1345,  635,
  355,  355,  327,  257,  367,  355,  367,  366,  141,  142,
 1357,  144, 1359,  372,  349,  350,  295,  402,  403,  256,
  383,  384,  266,  359,  157,  388,  389,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  262,  639,  415,  257,
  319,  838,  321,  840,  271,  915,  257,  683,  433,  434,
 1142,  422,  331,  389,  349,  350,  256,  420,  161,  338,
  868,  164,  387,  290,  264,  366,  294,  370,  305,  372,
  314,  371,  298,  206,  399,  400,  401,  294,  294,  404,
  405,  335,  370,  366, 1016, 1017,  422,  263,  423,  372,
  475,  701,  374,  372,  696, 1187,  379, 1189,  339,  343,
  413,  709,  359,  344,  358,  346,  333,  366,  468,  256,
  368,  352,  353,  367,  294,  359,  249,  335,  251, 1093,
  423,  370,  423,  402,  403,  325, 1218, 1122,  423,  373,
  677,  359,  389,  680,  662,  423,  664,  366,  666,  315,
  358,  423,  359,  359,  294,  389,  498,  374,  367,  367,
  376,  377, 1084, 1127,  433,  434,  306,  260,  305,  416,
  379,  389,  295,  526,  423,  419,  420,  421,  531,  784,
  533,  546,  389,  389,  423,  256,  539, 1109,  422,  359,
  459,  374,  423, 1115, 1271,  357,  319,  320,  321,  468,
  553,  543,  555,  366,  423,  343,  475,  357,  331,  371,
  413,  576,  343,  558,  558,  338,  367, 1136,  558,  389,
  371,  359,  384,  346,  569,  569,  568,  343,  359,  569,
  372,  636,  355, 1310,  384,  373,  589,  590,  413,  339,
 1142, 1318, 1319,  359,  344,  782,  346, 1324,  465,  372,
  565,  389,  352,  353,  361,  370,  784,  373,  389,  851,
  423,  370,  479,  379,  272,  372,  581,  418,  374,  486,
  487, 1190,  546,  389, 1142,  359,  367,  546,  373,  402,
  403,  656,  635,  636,  422, 1187,  639, 1189,  296,  272,
  367,  422,  645,  343,  365,  379,  367, 1130,  369,  370,
  517,  372,  370,  374,  372,  389,  422,  576,  423,  359,
  433,  434, 1142,  296,  423,  323, 1218,  423, 1237, 1187,
 1239, 1189,  413,  423,  677,  709, 1142,  680,  365,  379,
  683,  371,  369,  261,  374,  361,  413,  413,  422,  389,
  323,  741,  413,  696,  415,  971,  372,  418,  717,  702,
 1218,  365,  475,  367,  707,  423,  284, 1187,  733, 1189,
  705,  706,  272, 1347, 1348,  718,  583,  872,  585,  297,
  359, 1187,  422, 1189,  302, 1142,  688, 1362,  415,  307,
  339,  309,  310,  311,  312,  365,  296,  656, 1218,  317,
  374, 1141, 1142,  321,  709,  737,  359,  325,  751,  341,
  753,  766, 1218,  369,  749,  333,  365, 1391,  336,  762,
  338, 1141, 1142,  323,  341,  374, 1166,  357,  374, 1037,
 1187,  306, 1189,  546,  777,  367,  389,  367,  313,  782,
  783,  371, 1032,  374,  339,  558, 1166, 1187,  369, 1189,
  367, 1141, 1142,  660,  384,  339,  569,  800,  801,  335,
  863, 1218,  368,  576,  671,  672,  372, 1187, 1097, 1189,
  365,  874,  384,  261,  733,  263, 1166,  842, 1218, 1087,
  994,  365,  358,  413,  839,  365,  829,  830, 1232,  320,
    9,  367,   11,  413,  374,  413,  284, 1187, 1218, 1189,
  371, 1130, 1246,  374,  413,  848,  359,  766,  851,  297,
  377,  854,  719,  422,  302,  346,  859, 1125,  808,  307,
  863,  309,  310,  311,  312,  784,  379,  105, 1218,  317,
  873,  382,  110,  321,  112,  113,  389,  115,   57,  117,
  256,   60,  387,  656, 1152,  333,  878,  125,  336,  127,
  338,  886,  887,  269,  357,  383,  413,  135,  387,  902,
  138,  904,  140,  906,  367,  422,  398,  370,  371,  372,
  286,  367,  357,  365,  370,  404,  405,  357,  366,  367,
  839,  384,  374,  842,  388,  163,  371,  930,  357,  396,
  397,  371,  705,  706,  256, 1405, 1406,  365,  367,  384,
  374,  370,  371,  265,  384,  267,  374,  368,  270, 1238,
  413,  372,  370,  275,  372,  384,  306,  279,  308,  954,
  733,  917,  306,  313,  374,  960,  288,  368,  369,  313,
  371,  372,  373,  295,  366,  325,  749,  369,  300,  371,
  372,  325,  304,  986,  372,  988,  374,  990,  413,  992,
  339,  379,  984,  766,  316,  344,  318,  346,  390,  391,
  322,  365,  367,  352,  353, 1008,  380,  381,  330,  331,
  374,  784,  334,  365,  371,  337,  883,  370,  410,  372,
  394,  395,  374,  415,  365,  339,  418,  370, 1232,  372,
  344,  365,  346,  374, 1037,  349,  350,  337,  352,  353,
  374,  997,  368,  369,  392,  393,  372,  368,  998, 1325,
  288,  372, 1055,  291,  339, 1005, 1006,  413,  372,  344,
  370,  346,  372,  368,  349,  350,  839,  352,  353,  842,
  256,  370,  339,  372,  370,  374,  372,  344,  374,  346,
  370,  371,  349,  350, 1087,  352,  353,  372,  413,  368,
  368,  413,  330,  372,  372, 1014,  368, 1100, 1093,  340,
  372,  370, 1097, 1097,  342,  374,  372, 1097,  374,  423,
 1060,  413,  979,  886,  887, 1140,  368,  365,  370, 1122,
  372,  369, 1125,  371,  372,  368,  374,  370,  374, 1132,
 1133,  379, 1127,  365,  339, 1130, 1130,  374,  423,  344,
 1130,  346,  371,  339,  349,  350,  374,  352,  353, 1152,
  339,  408,  409,  410,  411,  344,  423,  346,  359,  360,
  349,  350, 1112,  352,  353,  368,  368,  370,  370,  365,
  372, 1196,  370,  369,  372,  374,  372,  373,  374,  354,
  355,  954, 1197,  379,  379,  354,  355,  960, 1191, 1204,
  413, 1141, 1142,  384,  385,  386,  368, 1116,  370,  413,
 1225, 1226,  368,  374,  370,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  368, 1166,  370,  423, 1222,
  372, 1140,  374, 1248,  370, 1250,  146,  147,  148,  149,
  150,  151,  152,  153,  423,  413,  372, 1187,  374, 1189,
  372, 1014,  374, 1238, 1238,    0,  360,  366, 1238,  372,
  369,  365,  371,  372,  369,  369,  371,  371,  372,  413,
  374,  499,  362,  363,  413,  379, 1258,  365, 1218,  373,
  256,  390,  391,  349,  350,  390,  391, 1196, 1197,  265,
  413,  267,  370,  371,  270, 1204,  256,  362,  363,  275,
  256,  410,  369,  279,  372,  410,  415,  256,  370,  418,
  415,  413,  288,  418,  542,  413, 1225, 1226,  370,  295,
  928,  929,  413, 1232,  300,  406,  407,  374,  304,  372,
 1093,  370, 1325,  374, 1097,  412,  413, 1246, 1320, 1248,
  316, 1250,  318,  370,  366,  374,  322,  372,  294,  370,
  370,  360,  370, 1116,  330,  331,  365,  370,  334,  370,
  369,  337,  371,  372, 1127,  374,  294, 1130,  413, 1362,
  379,  372,  370,  369,  256, 1315,  373, 1140,  372,  413,
  413,  356, 1322,  374,  379,  369,  360,  374,  369,  379,
  339,  371,  369, 1333, 1334,  344,  379,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355, 1347, 1348,    0,
 1392, 1393, 1405, 1406,  372, 1397, 1398,  366,  370,  368,
  294,  370,  372,  372,  373,  374,  418,  372,  372,  370,
  423,  370,  370, 1196, 1197,  413,  371,  413,  343,  368,
  413, 1204,  294,  294,  413,  372,  365,  367,  372,  371,
  371, 1391,  256,  256,  370,  370,  280,  366,  256,  365,
  413,  365, 1225, 1226,  418,  413,  413,  358,  256,  372,
  413,  373,  370,  374,  423, 1238,  370,  387,  374,  372,
  372,  370,  368,  370,  374, 1248,  416, 1250,  347,  399,
  400,  401,  370,  351,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
  366,  256,  257,  413,  413,  370,  339,  374,  379,  264,
  265,  266,  267,  268,  256,  270,  271,  256,  273,  274,
  275,  276,  277,  278,  279,  280,  379,  366,  368,  347,
  285,  372,  287,  288,  289,  290,  291,  292,  413,  368,
  295,  372,  372,  413,  299,  300,  368,  302,  303,  304,
  370,  366,  373,  365,  373,  365,  365,  348,  348,  314,
  356,  316,    0,  318,  319,  369,  372,  322,  379,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,  374,  337,  366,  366,  340,  370,  366,  305,  344,
  345,  369,  367,  366,  365,  369,  413,  413,  365,  369,
  369,  369,  379,  365,  370,  370,  413,  368,  372,  529,
  365,  366,  372,  413,  369,  374,  413,  374,  370,  374,
  375,  376,  377,  378,  370,  373,  370,  382,  366,  384,
  379,  366,  315,  263,  370,  390,  391,  369,  369,  366,
  370,    0,  368,  368,  365,  565,  374,  365,  370,  365,
  374,  374,  366,  366,  365,  256,  257,  412,  413,  414,
  415,  581,  417,  264,  265,  266,  267,  268,  423,  270,
  271,  374,  273,  274,  275,  276,  277,  278,  279,  413,
  413,  374,    0,  370,  285,  370,  287,  288,  289,  290,
  291,  292,  368,  413,  295,  366,  371,  366,  299,  300,
  370,  302,  303,  304,  366,  370,  374,  374,  413,  366,
  374,  374,  365,  314,  374,  316,  370,  318,  319,  366,
  366,  322,  370,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,  374,  337,  366,  365,  340,
  374,  374,  374,  344,  345,  315,  374,  263,   53,  917,
   46,   91, 1166,  677,  677, 1352, 1218, 1328, 1325,  933,
 1069, 1011,  638, 1320,  365,  366,    0,  838,  369, 1246,
  844,  844, 1398,  374,  375,  376,  377,  378,  844, 1187,
 1394,  382, 1338,  384, 1334, 1333, 1393,  672, 1112,  390,
  391, 1232, 1005, 1116,  383,  777,  724,  718,  868,  680,
  414,  782,  590,  415,  971,  416,  419,  417,  984,  418,
 1196,  412,  413,  414,  415,  709,  417, 1079,  256,  257,
  766, 1238,  423,  261, 1097,  206,  102,  265,  684,  267,
 1040, 1042,  270,  850,  272,  273,  544,  275, 1032,  277,
 1244,  279,  441,  281,  282,  283,  284, 1133,   -1,  287,
  288,   -1,    0,   -1,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,  335,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  358,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,  367,
    0,   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,  257,
   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,  868,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  413,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,    0,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,  335,  336,  337,
  338,   -1,   -1,  257,  342,   -1,   -1,  261,   -1,   -1,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,
  358,  275,   -1,  277,   -1,  279,   -1,  281,  366,  367,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,  413,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,  257,
   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,   -1,   -1,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,  413,
   -1,   -1,  330,  331,   -1,  333,  334,  257,  336,  337,
  338,  261,   -1,   -1,  342,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,   -1,   -1,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,  413,  336,  337,  338,  261,
   -1,  285,  342,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
   -1,   -1,  284,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,
  302,   -1,  304,  327,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,  413,  336,  337,  338,  256,   -1,   -1,
  342,   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,  380,  381,  382,  383,
  384,  385,  386,  387,   -1,  284,  390,  391,  392,  393,
  394,  395,  396,  397,   -1,  294,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,  413,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  361,   -1,   -1,   -1,  365,  366,   -1,  368,
  369,  370,  371,  372,  373,  374,   -1,  376,  377,   -1,
  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
  261,  390,  391,  392,  393,  394,  395,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  284,  413,  256,  415,   -1,   -1,  418,
  261,  262,   -1,   -1,  423,   -1,  297,   -1,   -1,   -1,
  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,  284,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,  294,   -1,   -1,  297,  298,   -1,   -1,
   -1,  302,  333,   -1,  305,  336,  307,  338,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  333,   -1,   -1,  336,   -1,  338,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  357,   -1,   -1,   -1,
  361,   -1,   -1,   -1,  365,  366,  367,  368,  369,  370,
  371,  372,  373,  374,   -1,  376,  377,   -1,   -1,  380,
  381,  382,  383,  384,   -1,   -1,  387,  388,   -1,   -1,
   -1,  392,  393,  394,  395,  396,  397,  398,  399,  256,
   -1,   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,
  411,   -1,  413,   -1,  415,   -1,   -1,  418,   -1,   -1,
   -1,   -1,  423,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,
  297,  298,   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,  366,
  367,  368,  369,  370,  371,  372,  373,  374,   -1,  376,
  377,   -1,   -1,  380,  381,  382,  383,  384,   -1,   -1,
  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,
  397,  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  411,   -1,  413,   -1,  415,  256,
   -1,  418,   -1,   -1,   -1,   -1,  423,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,   -1,  261,  262,   -1,   -1,   -1,  365,   -1,
   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,   -1,  382,  284,  384,   -1,   -1,
   -1,   -1,   -1,  390,  391,   -1,  294,   -1,   -1,  297,
  298,   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,  412,  413,  414,  415,  317,
   -1,   -1,   -1,  321,   -1,   -1,  423,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,  256,
  338,  339,   -1,   -1,   -1,  262,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,  361,   -1,   -1,   -1,  365,  366,  367,
  368,  369,  370,   -1,  372,  373,  374,   -1,  376,  377,
   -1,  298,  380,  381,  382,  383,   -1,   -1,   -1,  387,
  388,   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,
  398,  399,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,  413,   -1,  415,   -1,   -1,
  418,   -1,  339,   -1,   -1,  423,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,
  367,  368,  369,  370,  371,  372,  373,  374,   -1,  376,
  377,   -1,  379,  380,  381,  382,  383,  384,  385,  386,
  387,  388,  261,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  284,  413,  256,  415,   -1,
   -1,  418,  261,  262,   -1,   -1,  423,   -1,  297,   -1,
   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,  284,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,  333,   -1,  305,  336,  307,  338,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,  256,  338,
  339,   -1,   -1,   -1,  262,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  361,   -1,   -1,   -1,  365,  366,  367,  368,
  369,  370,   -1,  372,  373,  374,   -1,  376,  377,   -1,
  298,  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,
   -1,   -1,   -1,  392,  393,  394,  395,  396,  397,  398,
  399,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,  411,   -1,  413,   -1,  415,   -1,   -1,  418,
   -1,  339,   -1,   -1,  423,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,  298,   -1,  365,  366,  367,
  368,  369,  370,  371,  372,  373,  374,   -1,  376,  377,
   -1,  379,  380,  381,  382,  383,  384,  385,  386,  387,
  388,   -1,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  256,   -1,   -1,  415,   -1,   -1,
  262,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  366,   -1,   -1,  369,   -1,  371,  372,
   -1,   -1,   -1,  376,  377,   -1,   -1,  380,  381,  382,
  383,  384,  385,  386,  387,  388,  298,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  410,  411,   -1,
   -1,   -1,  415,   -1,   -1,  418,   -1,   -1,   -1,   -1,
  423,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,  366,   -1,  368,  369,  370,  371,
  372,  373,  374,   -1,  376,  377,   -1,  379,  380,  381,
  382,  383,  384,  385,  386,  387,  388,   -1,  390,  391,
  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
   -1,   -1,  256,  415,   -1,   -1,  418,  261,  262,   -1,
   -1,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,  297,  298,   -1,   -1,   -1,  302,   -1,
   -1,  305,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,  256,  338,  339,   -1,   -1,   -1,  262,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,  361,   -1,   -1,
   -1,  365,  366,   -1,  368,  369,  370,   -1,  372,  373,
  374,   -1,  376,  377,   -1,  298,  380,  381,  382,  383,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,  392,  393,
  394,  395,  396,  397,  398,  399,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  262,   -1,  411,   -1,  413,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  423,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  298,   -1,  366,   -1,  368,  369,  370,  371,  372,
  373,  374,   -1,  376,  377,   -1,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
  256,   -1,  415,   -1,   -1,  418,  262,   -1,   -1,   -1,
  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  367,   -1,  369,  370,  371,  372,   -1,  374,   -1,  376,
  377,   -1,  379,  380,  381,  382,  383,   -1,  385,  386,
  387,  388,  298,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,   -1,  413,   -1,  415,   -1,
   -1,  418,   -1,   -1,   -1,   -1,  423,   -1,   -1,   -1,
  256,   -1,   -1,  339,   -1,   -1,  262,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,  369,  370,  371,  372,  373,  374,   -1,
  376,  377,  298,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,   -1,   -1,   -1,  415,
  256,   -1,  418,  339,   -1,   -1,  262,  423,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,  369,  370,  371,  372,  373,  374,   -1,
  376,   -1,  298,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,   -1,  390,  391,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,   -1,   -1,   -1,  415,
   -1,   -1,  418,  339,   -1,   -1,   -1,  423,  344,  256,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
  376,  377,   -1,  379,  380,  381,  382,  383,  384,  385,
  386,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  256,  411,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  423,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,  294,   -1,   -1,   -1,  298,   -1,   -1,  366,
   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,  339,   -1,   -1,
  262,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,  423,   -1,   -1,  361,
   -1,   -1,   -1,  365,  366,   -1,  368,  369,  370,   -1,
  372,  373,  374,   -1,  376,  377,  298,   -1,  380,  381,
  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,   -1,   -1,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  411,
   -1,  413,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,  423,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  298,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,  376,  377,   -1,   -1,  380,  381,
  382,  383,  384,  385,  386,  387,  388,   -1,   -1,   -1,
  392,  393,  394,  395,  396,  397,  398,  399,   -1,   -1,
  256,   -1,   -1,  339,   -1,   -1,  262,   -1,  344,  411,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
  376,  377,  298,   -1,  380,  381,  382,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,  411,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,  423,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
  376,  377,   -1,   -1,  380,  381,  382,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,   -1,   -1,  256,   -1,   -1,  339,
   -1,   -1,  262,   -1,  344,  411,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  423,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,  377,  298,   -1,
  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,  423,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,  376,  377,   -1,   -1,
  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
  256,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  411,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,  380,  381,  382,  383,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,  392,  393,
  394,  395,  396,  397,  398,  399,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  423,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,  380,  381,  382,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,  392,  393,  394,  395,
  396,  397,  398,  399,  256,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  411,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  423,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,  392,  393,  394,  395,  396,  397,  398,  399,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  423,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,  380,  381,
  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  256,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  411,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,  380,  381,  382,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,  394,  395,
  396,  397,  398,  399,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  423,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,
   -1,   -1,  380,  381,  382,  383,   -1,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,  394,  395,  396,  397,
  398,  399,  256,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  411,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  423,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,  380,  381,
  382,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,  394,  395,  396,  397,  398,  399,  256,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  423,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,  380,  381,  382,  383,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
  394,  395,  396,  397,  398,  399,  256,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  411,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  423,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,   -1,  387,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,
  398,  399,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  411,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  423,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  396,  397,  398,  399,
  256,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  411,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,
   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  396,  397,  398,  399,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  423,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  382,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  398,  399,  256,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  411,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  423,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  382,  383,   -1,   -1,   -1,  387,  388,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  398,  399,
  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  411,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,  423,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  383,   -1,   -1,   -1,  387,  388,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  398,  399,  256,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  411,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,  423,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  366,   -1,  368,   -1,  370,   -1,  372,  373,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  383,   -1,   -1,
   -1,  387,  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  398,  399,  256,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  411,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  423,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
  368,   -1,  370,   -1,  372,  373,  374,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  383,   -1,   -1,   -1,   -1,
  388,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  398,  399,  256,   -1,   -1,   -1,   -1,  339,   -1,  261,
   -1,   -1,  344,  411,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  423,   -1,   -1,   -1,   -1,
   -1,   -1,  284,   -1,  366,   -1,  368,   -1,  370,   -1,
  372,  373,  374,   -1,   -1,  297,   -1,   -1,   -1,   -1,
  302,  383,   -1,   -1,   -1,  307,  388,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,  398,  399,  256,  321,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  411,
   -1,  333,   -1,   -1,  336,  339,  338,   -1,   -1,   -1,
  344,  423,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  362,  363,  366,   -1,  368,   -1,  370,   -1,  372,  373,
  374,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  388,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  398,  399,  256,  261,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  411,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  423,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,
  368,   -1,  370,  297,  372,  373,  374,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
  388,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
  398,  399,  256,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,  411,  338,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  423,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  366,   -1,  368,   -1,
  370,   -1,  372,  373,  374,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  399,
   -1,  261,   -1,  263,   -1,  339,   -1,   -1,   -1,  413,
  344,  411,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  423,  284,  298,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,  368,   -1,  370,  297,  372,  373,
  374,   -1,  302,   -1,   -1,  262,   -1,  307,   -1,  309,
  310,  311,  312,   -1,  388,  315,   -1,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  399,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,   -1,  336,  411,  338,   -1,
   -1,  298,   -1,   -1,  357,   -1,   -1,   -1,   -1,  423,
   -1,   -1,   -1,   -1,  367,   -1,  369,   -1,  371,   -1,
   -1,  374,   -1,  376,  377,   -1,  379,  380,  381,  382,
  383,  384,  385,  386,  387,  388,   -1,  390,  391,  392,
  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,   -1,
  413,   -1,  415,   -1,   -1,  418,   -1,   -1,   -1,   -1,
  423,  368,  369,  370,  371,  372,   -1,   -1,   -1,  376,
  377,   -1,  379,  380,  381,  382,  383,  384,  385,  386,
  387,  388,   -1,  390,  391,  392,  393,  394,  395,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,   -1,   -1,   -1,  415,  256,
   -1,  418,   -1,   -1,   -1,   -1,  423,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,  276,
  277,  278,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  287,  288,  289,  290,  291,  292,   -1,   -1,  295,   -1,
   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,  326,
  327,  328,  329,  330,  331,  332,  333,  334,  335,   -1,
  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,   -1,
   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,  376,
  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,
  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,  275,
  276,  277,  278,  279,   -1,  412,  413,  414,  415,  285,
   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,  295,
   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,  325,
  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,
   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
   -1,  256,   -1,   -1,  390,  391,   -1,   -1,   -1,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  274,
  275,  276,  277,  278,  279,   -1,  412,  413,  414,  415,
  285,   -1,  287,  288,  289,  290,  291,  292,   -1,   -1,
  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  324,
  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,
  335,   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,  344,
  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  365,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,  374,
  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,
   -1,   -1,  256,   -1,   -1,  390,  391,   -1,   -1,   -1,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,  412,  413,  414,
  415,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  365,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
  374,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,   -1,  256,   -1,   -1,  390,  391,   -1,   -1,
   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,  413,
  414,  415,  285,   -1,  261,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,  284,   -1,   -1,
   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
  297,   -1,  325,   -1,  327,  302,  329,  330,  331,  332,
  307,  334,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,  344,  345,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
   -1,  338,  365,  366,   -1,   -1,  369,   -1,   -1,   -1,
   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,
   -1,  384,   -1,   -1,  256,   -1,   -1,  390,  391,   -1,
   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,  412,
  413,  414,  415,  285,   -1,   -1,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,  413,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,   -1,  256,   -1,   -1,  390,  391,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  412,  413,  414,  415,  285,   -1,  261,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,  297,   -1,  325,   -1,  327,  302,  329,  330,
  331,  332,  307,  334,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,  344,  345,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,  369,   -1,
   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,
   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,
  391,  270,  271,   -1,   -1,  370,  275,  276,  277,   -1,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  261,  288,
   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,  316,  413,  318,
  319,   -1,   -1,  322,  297,   -1,  325,   -1,  327,  302,
  329,  330,  331,  332,  307,  334,  309,  310,  311,  312,
   -1,   -1,  315,   -1,  317,  344,  345,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,  365,  366,   -1,   -1,
  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,
   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,   -1,   -1,
   -1,  390,  391,  366,  367,   -1,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,  412,  413,  414,  415,  285,   -1,  261,
  288,   -1,   -1,  422,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,  297,   -1,  325,   -1,  327,
  302,  329,  330,  331,  332,  307,  334,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,  344,  345,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  365,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,  256,
  362,  363,  390,  391,  366,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  412,  413,  414,  415,  285,   -1,
   -1,  288,   -1,   -1,  422,   -1,   -1,   -1,  295,   -1,
   -1,   -1,   -1,  300,  256,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,  316,
   -1,  318,  319,  275,   -1,  322,   -1,  279,  325,   -1,
  327,   -1,  329,  330,  331,  332,  288,  334,   -1,   -1,
   -1,   -1,   -1,  295,  256,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,  265,   -1,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,  275,  316,   -1,  318,  279,   -1,   -1,
  322,   -1,  369,   -1,   -1,   -1,  288,   -1,  330,  331,
   -1,   -1,  334,  295,   -1,  337,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,
  322,   -1,   -1,  257,   -1,  412,  413,  261,  330,  331,
   -1,  265,  334,  267,   -1,  337,  270,   -1,  272,   -1,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,   -1,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,  413,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,  335,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,  413,   -1,   -1,   -1,   -1,  257,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  366,  367,  275,   -1,  277,   -1,  279,   -1,
  281,   -1,   -1,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,  300,
  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,  413,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,  335,  336,  337,  338,   -1,   -1,
  257,  342,   -1,   -1,  261,   -1,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  366,  367,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,  296,
  297,   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,   -1,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,  413,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,  262,   -1,  257,  342,   -1,   -1,  261,   -1,
   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,  366,
  367,  284,   -1,   -1,  287,  288,   -1,   -1,  298,   -1,
   -1,   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,
   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,
  323,   -1,   -1,   -1,   -1,   -1,  413,  330,  331,   -1,
  333,  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
  370,  371,  372,  366,  367,   -1,  376,  377,   -1,   -1,
  380,  381,  382,  383,  384,  385,  386,  387,  388,   -1,
  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,   -1,  257,   -1,  415,   -1,  261,  418,   -1,
  413,  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,   -1,   -1,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,  257,  342,   -1,
   -1,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  366,   -1,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,  296,  297,   -1,   -1,
  300,  301,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,  413,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,
   -1,   -1,  342,   -1,   -1,   -1,   -1,  261,   -1,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,
   -1,  275,   -1,  277,   -1,  279,  366,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
  294,  295,  296,  297,   -1,   -1,  300,  301,  302,   -1,
  304,   -1,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,  317,  318,   -1,   -1,  321,  322,  323,
   -1,  325,   -1,  413,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  261,   -1,  362,  363,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,  375,  277,   -1,  279,   -1,  281,  282,  283,  284,
   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,  413,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,  265,   -1,  267,  342,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,  366,  293,   -1,  295,  296,  297,   -1,   -1,  300,
  375,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,  413,   -1,
   -1,  342,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,  366,  281,  282,  283,  284,
   -1,   -1,  287,  288,  375,   -1,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,  413,   -1,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,  265,   -1,  267,  342,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,  366,  293,   -1,  295,  296,  297,   -1,   -1,  300,
  375,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,  413,   -1,
   -1,  342,   -1,   -1,   -1,   -1,  261,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,
  275,   -1,  277,   -1,  279,  366,  281,  282,  283,  284,
   -1,   -1,  287,  288,  375,   -1,   -1,   -1,  293,   -1,
  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,  304,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,
   -1,  316,  317,  318,   -1,   -1,  321,  322,  323,   -1,
   -1,   -1,  413,   -1,   -1,  330,  331,   -1,  333,  334,
  261,  336,  337,  338,  265,   -1,  267,  342,   -1,  270,
   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,   -1,
   -1,  366,  293,   -1,  295,  296,  297,   -1,   -1,  300,
   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,
  321,  322,  323,  261,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  333,  334,   -1,  336,  337,  338,  413,   -1,
   -1,  342,   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,
   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,   -1,  297,
   -1,   -1,   -1,   -1,  302,  366,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,  284,   -1,   -1,  317,
   -1,   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,  297,
   -1,  261,   -1,   -1,  302,  333,   -1,  305,  336,  307,
  338,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  413,  321,  284,   -1,   -1,  325,   -1,  357,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  297,  336,  367,
  338,  369,  302,  371,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  384,  317,   -1,   -1,
   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,  264,  265,
   -1,  267,   -1,  333,  270,  271,  336,   -1,  338,  275,
  276,  277,   -1,  279,   -1,  413,  265,   -1,  267,  285,
   -1,  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,
  279,   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,
  306,   -1,   -1,   -1,   -1,  413,  295,  313,   -1,   -1,
  316,  300,  318,  319,   -1,  304,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,  316,  334,  318,
   -1,   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,
   -1,  330,  331,  413,   -1,  334,   -1,   -1,  337,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,  370,   -1,  372,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,  306,   -1,  413,   -1,   -1,   -1,   -1,  313,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,  372,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,  320,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,
   -1,   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,  337,
   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  365,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  365,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,  264,  265,
   -1,  267,  390,  391,  270,  271,   -1,   -1,   -1,  275,
  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,  288,   -1,  412,  413,  414,  415,   -1,  295,
   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,
   -1,  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  344,  345,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,
  376,  377,  378,   -1,   -1,   -1,  382,   -1,  384,   -1,
  264,  265,   -1,  267,  390,  391,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  285,   -1,   -1,  288,   -1,  412,  413,  414,  415,
   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,   -1,   -1,
   -1,  375,  376,  377,  378,   -1,   -1,   -1,  382,   -1,
  384,   -1,  264,  265,   -1,  267,  390,  391,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,  412,  413,
  414,  415,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,   -1,   -1,
   -1,   -1,   -1,  375,  376,  377,  378,   -1,   -1,   -1,
  382,   -1,  384,   -1,  264,  265,   -1,  267,  390,  391,
  270,  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,
  412,  413,  414,  415,   -1,  295,   -1,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  369,
   -1,   -1,   -1,   -1,   -1,  375,  376,  377,  378,   -1,
   -1,   -1,  382,   -1,  384,   -1,  264,  265,   -1,  267,
  390,  391,  270,  271,   -1,   -1,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  261,
  288,   -1,  412,  413,  414,  415,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,  297,   -1,  325,   -1,  327,
  302,  329,  330,  331,  332,  307,  334,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,
   -1,  369,   -1,   -1,   -1,   -1,   -1,  375,  376,  377,
  378,   -1,   -1,   -1,  382,   -1,  384,   -1,   -1,   -1,
  362,  363,  390,  391,  366,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  263,
   -1,  265,   -1,  267,  412,  413,  270,  415,  272,  273,
   -1,  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  315,  316,   -1,  318,   -1,   -1,   -1,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  342,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  264,
  265,   -1,  267,   -1,   -1,  270,  271,   -1,  362,  363,
  275,  276,  277,   -1,  279,   -1,   -1,   -1,   -1,   -1,
  285,  375,   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,  413,
  325,   -1,  327,   -1,  329,  330,  331,  332,  265,  334,
  267,   -1,  337,  270,   -1,  272,  273,   -1,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
   -1,   -1,   -1,  300,  369,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  342,   -1,  412,  413,  265,
   -1,  267,   -1,   -1,  270,   -1,  272,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,
   -1,  287,  288,   -1,   -1,   -1,   -1,  293,  375,  295,
  296,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,  323,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,  413,  265,  334,  267,
   -1,  337,  270,   -1,   -1,  273,  342,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,  265,
   -1,  267,  300,   -1,  270,   -1,  304,  273,   -1,  275,
   -1,  277,   -1,  279,   -1,  281,  282,  283,  316,   -1,
  318,  287,  288,   -1,  322,   -1,   -1,  293,   -1,  295,
   -1,   -1,  330,  331,  300,   -1,  334,   -1,  304,  337,
   -1,   -1,   -1,   -1,  342,   -1,   -1,  413,   -1,   -1,
  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,   -1,  265,   -1,  267,  342,  375,  270,   -1,
  272,   -1,   -1,  275,   -1,  277,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,  296,   -1,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,   -1,  413,   -1,   -1,  265,   -1,
  267,   -1,   -1,  270,  316,   -1,  318,   -1,  275,   -1,
  322,  323,  279,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,  288,  334,   -1,   -1,  337,   -1,  413,  295,   -1,
  342,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,  306,
   -1,  308,  265,   -1,  267,   -1,  313,  270,   -1,  316,
   -1,  318,  275,   -1,   -1,  322,  279,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,  288,   -1,  334,   -1,   -1,
  337,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,
   -1,  304,  265,  306,  267,  308,   -1,  270,   -1,   -1,
  313,   -1,  275,  316,  277,  318,  279,   -1,  281,  322,
   -1,  413,  325,  370,  287,  288,   -1,  330,  331,   -1,
   -1,  334,  295,   -1,  337,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,  265,   -1,  267,   -1,
   -1,  270,   -1,  316,   -1,  318,  275,   -1,   -1,  322,
  279,   -1,   -1,   -1,   -1,  368,  413,  330,  331,  288,
   -1,  334,   -1,   -1,  337,   -1,  295,   -1,   -1,  342,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,  308,
   -1,  270,   -1,   -1,  313,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,   -1,   -1,  325,   -1,   -1,  288,
  413,  330,  331,   -1,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,  265,  306,  267,   -1,
   -1,  270,   -1,  272,  313,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,   -1,   -1,  325,   -1,   -1,  288,
  413,  330,  331,   -1,   -1,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,  302,   -1,  304,  265,   -1,  267,   -1,
   -1,  270,   -1,   -1,   -1,   -1,  275,  316,   -1,  318,
  279,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,  288,
   -1,  330,  331,   -1,  413,  334,  295,   -1,  337,   -1,
   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  316,   -1,  318,
  275,   -1,   -1,  322,  279,   -1,   -1,   -1,   -1,   -1,
   -1,  330,  331,  288,  413,  334,   -1,   -1,  337,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
   -1,  370,   -1,  288,  413,  330,  331,   -1,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,  265,  304,
  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,  316,  279,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,  288,   -1,   -1,  413,  330,  331,   -1,  295,  334,
   -1,   -1,  337,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,  316,
  267,  318,   -1,  270,   -1,  322,   -1,   -1,  275,   -1,
   -1,   -1,  279,  330,  331,   -1,   -1,  334,  413,   -1,
  337,  288,  265,   -1,  267,   -1,   -1,  270,  295,   -1,
   -1,   -1,  275,  300,   -1,   -1,  279,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,  316,
   -1,  318,  295,   -1,   -1,  322,   -1,  300,  413,   -1,
   -1,  304,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,  265,  316,  267,  318,   -1,  270,   -1,  322,
   -1,   -1,  275,   -1,   -1,   -1,  279,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,  288,  413,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,
  265,  304,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,   -1,   -1,  316,  279,  318,   -1,   -1,   -1,  322,
   -1,   -1,   -1,  288,   -1,   -1,   -1,  330,  331,   -1,
  295,  334,   -1,   -1,  337,  300,  413,   -1,   -1,  304,
  265,   -1,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
  275,  316,   -1,  318,  279,   -1,   -1,  322,   -1,   -1,
  413,   -1,   -1,  288,   -1,  330,  331,   -1,   -1,  334,
  295,   -1,  337,   -1,   -1,  300,   -1,   -1,  265,  304,
  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,  316,  279,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,  288,   -1,   -1,   -1,  330,  331,   -1,  295,  334,
  413,   -1,  337,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  265,  316,
  267,  318,   -1,  270,   -1,  322,   -1,   -1,  275,   -1,
   -1,   -1,  279,  330,  331,   -1,   -1,  334,  413,   -1,
  337,  288,  265,   -1,  267,   -1,   -1,  270,  295,   -1,
   -1,   -1,  275,  300,   -1,   -1,  279,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,  316,
   -1,  318,  295,   -1,  261,  322,   -1,  300,  413,   -1,
   -1,  304,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,  316,   -1,  318,   -1,  284,   -1,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  297,  334,   -1,   -1,  337,  302,  413,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,  261,  315,  263,
  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,
  284,  338,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  297,   -1,   -1,  413,   -1,  302,   -1,
   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,  366,
   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,   -1,
  413,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,
   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  366,
  };

#line 6071 "cs-parser.jay"

// <summary>
//   A class used to pass around variable declarations and constants
// </summary>
class VariableDeclaration {
	public string identifier;
	Expression initializer;
	public Location Location;

	public VariableDeclaration (Tokenizer.LocatedToken lt, Expression initializer)
	{
		this.identifier = lt.Value;
		this.initializer = initializer;
		this.Location = lt.Location;
	}

	public Expression GetInitializer (FullNamedExpression type)
	{
		if (initializer is ArrayInitializer)
			return new ArrayCreation (type, (ArrayInitializer)initializer);

		return initializer;
	}

	public bool HasInitializer {
		get { return initializer != null; }
	}
}


// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		Report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (Report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	Report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	Report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	Report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	Report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	Report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (RootContext.EvalMode){
		tc.ModFlags = (tc.ModFlags & ~(Modifiers.PRIVATE|Modifiers.INTERNAL)) | Modifiers.PUBLIC;
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;

	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == RootContext.ToplevelTypes) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

Block declare_local_variables (FullNamedExpression type, List<object> variable_declarators, Location loc)
{
	Block implicit_block;

	//
	// If we are doing interactive editing, we want variable declarations
	// that are in the top block to be added instead to the class as 
	// static variables
	//
	if (RootContext.StatementMode){
		bool hoist = true;

		for (Block b = current_block; b != null; b = b.Parent){
			if (b is ExplicitBlock && !(b is ToplevelBlock)){
				// There has been an explicit block, we cant add to the class
				hoist = false;
				break;
			}
		}		
		if (hoist){
			//
			// We can use "current_block" since we know there are no explicit blocks
			//
			foreach (VariableDeclaration decl in variable_declarators){
				// We can not use the super-handy f.Initializer, because
				// multiple lines would force code to be executed out of sync
				var init = decl.GetInitializer (type);
				if (init != null){
				        string id = "$" + decl.identifier;
					LocalInfo vi = current_block.AddVariable (type, id, decl.Location);					

					// Avoid warning about this variable not being used.
					vi.Used = true;

					LocalVariableReference var;
					var = new LocalVariableReferenceWithClassSideEffect (current_container, decl.identifier, current_block, id, vi, decl.Location);
					Assign assign = new SimpleAssign (var, init, decl.Location);
					current_block.AddStatement (new StatementExpression (assign));
					assign = new SimpleAssign (new SimpleName (decl.identifier, decl.Location), var);
					current_block.AddStatement (new StatementExpression (assign));
				} else {
					Field f = new Field (current_container, (FullNamedExpression) type, Modifiers.PUBLIC | Modifiers.STATIC,
						new MemberName (decl.identifier, loc), null);
					current_container.AddField (f);

					// Register the field to be visible later as a global variable
					Evaluator.QueueField (f);
				}
			}

			return current_block;
		}
	}

	//
	// We use the `Used' property to check whether statements
	// have been added to the current block.  If so, we need
	// to create another block to contain the new declaration
	// otherwise, as an optimization, we use the same block to
	// add the declaration.
	//
	// FIXME: A further optimization is to check if the statements
	// that were added were added as part of the initialization
	// below.  In which case, no other statements have been executed
	// and we might be able to reduce the number of blocks for
	// situations like this:
	//
	// int j = 1;  int k = j + 1;
	//
	if (current_block.Used)
		implicit_block = new Block (current_block, loc, lexer.Location);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in variable_declarators){

		if (implicit_block.AddVariable (type, decl.identifier, decl.Location) != null) {
			if (decl.HasInitializer){
				Assign assign;
				
				var lvr = new LocalVariableReference (implicit_block, decl.identifier, loc);

				assign = new SimpleAssign (lvr, decl.GetInitializer (type), decl.Location);

				implicit_block.AddStatement (new StatementExpression (assign));
			}
		}
	}
	
	return implicit_block;
}

Block declare_local_constants (FullNamedExpression type, List<object> declarators)
{
	Block implicit_block;

	if (current_block.Used)
		implicit_block = new Block (current_block);
	else
		implicit_block = current_block;

	foreach (VariableDeclaration decl in declarators){
		implicit_block.AddConstant (type, decl.identifier, decl.GetInitializer (type), decl.Location);
	}
	
	return implicit_block;
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	Report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	Report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationUnit file, CompilerContext ctx)
{
	if (RootContext.EvalMode)
		undo = new Undo ();

	this.file = file;
	this.compiler = ctx;
	current_namespace = new NamespaceEntry (null, file, null);
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, ctx);
	
	use_global_stacks = true;
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof)
			UnexpectedEOF = true;

		if (e is yyParser.yyException)
			Report.Error (-25, lexer.Location, "Parsing error");
		else if (yacc_verbose_flag > 0)
			throw;	// Used by compiler-tester to test internal errors
		else 
			Report.Error (589, lexer.Location, "Internal compiler error during parsing");
	}

	if (RootContext.ToplevelTypes.NamespaceEntry != null)
		throw new InternalErrorException ("who set it?");
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		Report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		Report.Error (error, loc, msg);
}

void CheckIdentifierToken (int yyToken, Location loc)
{
	CheckToken (1041, yyToken, "Identifier expected", loc);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

Location GetLocation (object obj)
{
	if (obj is Tokenizer.LocatedToken)
		return ((Tokenizer.LocatedToken) obj).Location;
	if (obj is MemberName)
		return ((MemberName) obj).Location;

	if (obj is Expression)
		return ((Expression) obj).Location;

	return lexer.Location;
}

Report Report {
	get { return compiler.Report; }
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

public UsingsBag UsingsBag {
	get {
		return ubag;
	}
	set {
		ubag = value;
	}
}

void start_block (Location loc)
{
	if (current_block == null || parsing_anonymous_method) {
		current_block = new ToplevelBlock (compiler, current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block
end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void
start_anonymous (bool lambda, ParametersCompiled parameters, Location loc)
{
	if (RootContext.Version == LanguageVersion.ISO_1){
		Report.FeatureIsNotAvailable (loc, "anonymous methods");
	}

	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);

	current_local_parameters = parameters;

	current_anonymous_method = lambda 
		? new LambdaExpression (loc) 
		: new AnonymousMethodExpression (loc);

	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ToplevelBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

public NamespaceEntry CurrentNamespace {
       get { 
       	   return current_namespace;
       }
}


void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	
	if (error_code == 0) {
		if (expecting == "`)'")
			error_code = 1026;
		else
			error_code = 1525;
	}
	
	if (string.IsNullOrEmpty (expecting))
		Report.Error (error_code, lexer.Location, "{1} `{0}'", symbol, msg);
	else
		Report.Error (error_code, lexer.Location, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
		return "identifier";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EOF:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";

		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int OP_GENERICS_LT = 359;
  public const int OP_GENERICS_LT_DECL = 360;
  public const int OP_GENERICS_GT = 361;
  public const int GET = 362;
  public const int SET = 363;
  public const int LAST_KEYWORD = 364;
  public const int OPEN_BRACE = 365;
  public const int CLOSE_BRACE = 366;
  public const int OPEN_BRACKET = 367;
  public const int CLOSE_BRACKET = 368;
  public const int OPEN_PARENS = 369;
  public const int CLOSE_PARENS = 370;
  public const int DOT = 371;
  public const int COMMA = 372;
  public const int COLON = 373;
  public const int SEMICOLON = 374;
  public const int TILDE = 375;
  public const int PLUS = 376;
  public const int MINUS = 377;
  public const int BANG = 378;
  public const int ASSIGN = 379;
  public const int OP_LT = 380;
  public const int OP_GT = 381;
  public const int BITWISE_AND = 382;
  public const int BITWISE_OR = 383;
  public const int STAR = 384;
  public const int PERCENT = 385;
  public const int DIV = 386;
  public const int CARRET = 387;
  public const int INTERR = 388;
  public const int DOUBLE_COLON = 389;
  public const int OP_INC = 390;
  public const int OP_DEC = 391;
  public const int OP_SHIFT_LEFT = 392;
  public const int OP_SHIFT_RIGHT = 393;
  public const int OP_LE = 394;
  public const int OP_GE = 395;
  public const int OP_EQ = 396;
  public const int OP_NE = 397;
  public const int OP_AND = 398;
  public const int OP_OR = 399;
  public const int OP_MULT_ASSIGN = 400;
  public const int OP_DIV_ASSIGN = 401;
  public const int OP_MOD_ASSIGN = 402;
  public const int OP_ADD_ASSIGN = 403;
  public const int OP_SUB_ASSIGN = 404;
  public const int OP_SHIFT_LEFT_ASSIGN = 405;
  public const int OP_SHIFT_RIGHT_ASSIGN = 406;
  public const int OP_AND_ASSIGN = 407;
  public const int OP_XOR_ASSIGN = 408;
  public const int OP_OR_ASSIGN = 409;
  public const int OP_PTR = 410;
  public const int OP_COALESCING = 411;
  public const int LITERAL = 412;
  public const int IDENTIFIER = 413;
  public const int OPEN_PARENS_LAMBDA = 414;
  public const int OPEN_PARENS_CAST = 415;
  public const int GENERIC_DIMENSION = 416;
  public const int DEFAULT_COLON = 417;
  public const int OPEN_BRACKET_EXPR = 418;
  public const int EVAL_STATEMENT_PARSER = 419;
  public const int EVAL_COMPILATION_UNIT_PARSER = 420;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 421;
  public const int GENERATE_COMPLETION = 422;
  public const int COMPLETE_COMPLETION = 423;
  public const int UMINUS = 424;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
