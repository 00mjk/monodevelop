<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:textUiWpf="clr-namespace:Microsoft.VisualStudio.Text.Editor"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <!-- header control -->
    <Style TargetType="textUiWpf:OutliningMarginHeaderControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="textUiWpf:OutliningMarginHeaderControl">
                    <Grid>
                        <Border Height="11" Width="9" BorderBrush="{DynamicResource ViewBackgroundBrush}"
                                Background="{DynamicResource ViewBackgroundBrush}"
                                BorderThickness="0,1,0,1" Name="WhitePadding"
                                VerticalAlignment="Center">
                            <Border Height="9" Width="9" BorderBrush="{DynamicResource outlining.verticalrule.foreground}" Background="{DynamicResource outlining.square.background}" BorderThickness="1" Name="TheSquare" >
                                <Canvas>
                                    <!-- The plus/minus in the square -->
                                    <Line X1="1" Y1="3.5" X2="6" Y2="3.5" Stroke="{DynamicResource outlining.square.foreground}" />
                                    <Line X1="3.5" Y1="1" X2="3.5" Y2="6" Name="Vertical" Stroke="{DynamicResource outlining.square.foreground}" />
                                </Canvas>
                            </Border>
                        </Border>

                    </Grid>
                  <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="Vertical" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="TheSquare" Property="Background" Value="{DynamicResource ViewBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="textUiWpf:OutliningMarginBracketControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="textUiWpf:OutliningMarginBracketControl">
                  <Grid>
                    <DockPanel>
                      <FrameworkElement Height="{TemplateBinding FirstLineOffset}" DockPanel.Dock="Top" />
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition/>
                          <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Border BorderThickness="0,0,1,0" BorderBrush="{DynamicResource outlining.verticalrule.foreground}" Margin="0,0,-1,0" />
                        <Border BorderThickness="0,0,0,1" BorderBrush="{DynamicResource outlining.verticalrule.foreground}" Grid.Column="1" />
                      </Grid>
                    </DockPanel>
                    <Canvas Opacity="0.0" Name="Highlight" Background="{DynamicResource outlining.collapsehintadornment.foreground}" Margin="0,0,0,0" />
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsHighlighted" Value="True">
                      <Setter Property="Opacity" Value="0.5" TargetName="Highlight" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="textUiWpf:OutliningMarginControl" x:Key="{x:Type textUiWpf:OutliningMarginControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Width" Value="9" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="textUiWpf:OutliningMarginControl">
                    <ContentPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- under-text collapse hint adornment -->
    <Style TargetType="textUiWpf:CollapseHintAdornmentControl" x:Key="{x:Type textUiWpf:CollapseHintAdornmentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="textUiWpf:CollapseHintAdornmentControl">
                    <Border Background="{DynamicResource outlining.collapsehintadornment.background}"
                            Visibility="Collapsed" IsHitTestVisible="False" Name="border"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="border" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- in-text space-negotiating adornment indicating collapsed regions -->
    <Style TargetType="textUiWpf:OutliningCollapsedAdornmentControl" x:Key="{x:Type textUiWpf:OutliningCollapsedAdornmentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ToolTipService.ShowDuration" Value="600000" /><!-- make the tooltip stay up long enough for user to read it (ten minutes in milliseconds) -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="textUiWpf:OutliningCollapsedAdornmentControl">
                    <Border Name="border"
                            BorderThickness="1"
                            Padding="0"
                            Margin="0.0, 0.0, 0.0, -4.0"
                            Cursor="Arrow"
                            Background="Transparent"
                            SnapsToDevicePixels="True"
                            BorderBrush="{DynamicResource CollapsedTextForeground}"
                            TextBlock.Foreground="{DynamicResource CollapsedTextForeground}"
                            TextBlock.FontSize="{DynamicResource CollapsedTextSize}"
                            TextBlock.FontFamily="{DynamicResource CollapsedTextFontFamily}"
                            >
                        <Grid>
                            <ContentPresenter />
                            <TextBlock Name="defaultContent"
                                       Text="..."
                                       Visibility="Collapsed" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>

                        <!-- show three dot adornment when there's no other content -->
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter TargetName="defaultContent" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!-- highlight the border on selection -->
                        <Trigger Property="textUiWpf:IntraTextAdornment.IsSelected" Value="True">
                            <Setter TargetName="defaultContent" Property="Foreground" Value="DarkBlue" />
                            <Setter TargetName="border" Property="BorderBrush" Value="DarkBlue" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Default zoom combo box ui -->
    <Style BasedOn="{StaticResource {x:Type ComboBox}}"
         TargetType="textUiWpf:ZoomControl"
         x:Key="{x:Type textUiWpf:ZoomControl}">

      <Style.Resources>

        <!-- Default zoom levels -->
        <x:Array Type="sys:Double" x:Key="DefaultZoomLevels">
          <sys:Double>20   </sys:Double>
          <sys:Double>50   </sys:Double>
          <sys:Double>70   </sys:Double>
          <sys:Double>100  </sys:Double>
          <sys:Double>150  </sys:Double>
          <sys:Double>200  </sys:Double>
          <sys:Double>400  </sys:Double>
        </x:Array>

        <textUiWpf:ZoomLevelConverter x:Key="DisplayZoomValueConverter" />

        </Style.Resources>

      <Setter Property="Focusable" Value="True" />
      <Setter Property="IsEditable" Value="True" />
      <Setter Property="ClipToBounds" Value="True" />
      <Setter Property="SnapsToDevicePixels" Value="True" />
      <Setter Property="Width" Value="70" />
      <Setter Property="FontSize" Value="11" />
      <Setter Property="FontFamily" Value="Tahoma" />
      <Setter Property="ItemsSource" Value="{StaticResource DefaultZoomLevels}" />
      
      <Setter Property="ItemContainerStyle">
        <Setter.Value>
          <Style TargetType="{x:Type ComboBoxItem}">
            <Setter Property="Content" Value="{Binding Converter={StaticResource DisplayZoomValueConverter}}" />
          </Style>
        </Setter.Value>
      </Setter>

      <!-- Disable the default red border for validation errors. -->
      <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
      
  </Style>

</ResourceDictionary>
