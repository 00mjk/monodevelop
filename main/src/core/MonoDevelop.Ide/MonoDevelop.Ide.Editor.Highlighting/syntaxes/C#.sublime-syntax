%YAML 1.2
---
# C#.sublime-syntax.xml
# 
#  Author:
#    Mike Kr√ºger <mkrueger@novell.com>
# 
#  Copyright (c) 2016 Microsoft Corporation
#  Copyright (c) 2007 Novell, Inc (http://www.novell.com)
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

name: "C#"
file_extensions:
  - cs
scope: source.cs
contexts:
  main:
    - include: comments
    - include: keywords
    - include: numbers
    - include: strings
    - include: preprocessor
  comments:
    - match: '//'
      scope: comment.line.source.cs
      push:
        - include: commenttags
        - match: $\n?
          pop: true
    - match: '///'
      scope: comment.line.documentation.source.cs
      push:
        - match: '$\n?'
          pop: true
        - include: xmldoc
    - match: '/\*'
      scope: comment.block.source.cs
      push:
        - include: commenttags
        - match: '\*/\n?'
          pop: true
  commenttags:
    - match: '\b((?i:todo)|(?i:fixme)|(?i:hack)|(?i:undone))\b'
      scope: markup.other.source.cs
  xmldoc:
    - match : '<'
      scope: comment.line.documentation.tag.source.cs
      push :
        - match : '(>|$\n?)'
          pop: true
  keywords:
    - match: '\b(this|base)\b'
      scope: keyword.access.source.cs
    - match: '\b(as|is|new|sizeof|typeof|stackalloc)\b'
      scope: keyword.operator.source.cs
    - match: '\b(else|if|switch|case|default)\b'
      scope: keyword.selection.source.cs
    - match: '\b(do|for|foreach|in|while)\b'
      scope: keyword.iteration.source.cs
    - match: '\b(break|continue|goto|return)\b'
      scope: keyword.jump.source.cs
    - match: '\b(yield|partial|global|where|__arglist|__makeref|__reftype|__refvalue|by|descending|from|group|into|orderby|select|let|ascending|join|on|equals)\b'
      scope: keyword.context.source.cs
    - match: '\b(try|throw|catch|finally)\b'
      scope: keyword.exception.source.cs
    - match: '\b(true|false|null)\b'
      scope: keyword.constants.source.cs
    - match: '\b(abstract|async|await|const|event|extern|override|readonly|sealed|static|virtual|volatile|public|protected|private|internal)\b'
      scope: keyword.modifiers.source.cs
    - match: '\b(bool|byte|char|decimal|double|float|int|long|sbyte|short|uint|ushort|ulong|object|string|var|dynamic)\b'
      scope: keyword.type.source.cs
    - match: '\b(void)\b'
      scope: keyword.void.source.cs
    - match: '\b(namespace|using)\b'
      scope: keyword.namespace.source.cs
    - match: '\b(get|set|add|remove|value)\b'
      scope: keyword.property.source.cs
    - match: '\b(class|interface|delegate|enum|struct)\b'
      scope: keyword.declaration.source.cs
    - match: '\b(params|ref|out)\b'
      scope: keyword.parameter.source.cs
    - match: '\b(explicit|implicit|operator)\b'
      scope: keyword.operatordeclaration.source.cs
    - match: '\b(checked|unchecked|fixed|unsafe|lock)\b'
      scope: keyword.other.source.cs
  numbers:
    - match: '((\b\d+\.?\d+)|(\.\d+))([eE][+-]?\d*)?(F|f|D|d|M|m)?\b'
      scope: constant.numeric.float
    - match: '\b\d+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
      scope: constant.numeric.integer
    - match: '\b0[xX][0-9a-fA-F]+?(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b'
      scope: constant.numeric.hex
  strings:
    - match: "'"
      scope: string.quoted.single.source.cs
      push:
        - match: '\\.'
          scope: constant.character.escape.source.cs
        - match: "('|$\n?)"
          pop: true
    - match: '@"'
      scope: string.quoted.other.verbatim.source.cs
      push:
        - match: '""'
          scope: constant.character.verbatim.escape.source.cs
        - match: '"'
          pop: true
    - match: '\$"'
      scope: string.quoted.other.interpolated.source.cs
      push:
        - match: '\\.'
          scope: constant.character.escape.source.cs
        - match: '("|$\n?)'
          pop: true
        - match: '({)'
          captures:
            1: string.quoted.other.interpolated.source.cs
          scope: source.cs
          push:
            - match: '(})'
              captures:
                1: string.quoted.other.interpolated.source.cs
              pop: true
            - include: main
    - match: '"'
      scope: string.quoted.double.source.cs
      push:
        - match: '\\.'
          scope: constant.character.escape.source.cs
        - match: '("|$\n?)'
          pop: true
  preprocessor:
    - match: '^\s*#(if|else|elif|endif|define|undef|warning|error|line|endregion|pragma)\b'
      scope: meta.preprocessor.source.cs
      push:
        - match: '\n?'
          pop: true
    - match: '^\s*(#region)(.*)$\n?'
      captures:
        1: meta.preprocessor.source.cs
        2: meta.preprocessor.region.name.source.cs