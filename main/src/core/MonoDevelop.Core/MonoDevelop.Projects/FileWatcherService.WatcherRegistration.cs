//
// FileWatcherService.WatcherRegistration.cs
//
// Author:
//       Marius Ungureanu <maungu@microsoft.com>
//
// Copyright (c) 2019 Microsoft Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
using System;
using System.IO;
using MonoDevelop.Core;

namespace MonoDevelop.Projects
{
	public static partial class FileWatcherService
	{
		class FileWatcherWrapper : IDisposable
		{
			FileSystemWatcher watcher;

			public FileWatcherWrapper (FilePath path)
			{
				Path = path;
				watcher = new FileSystemWatcher (path) {
					// Need LastWrite otherwise no file change events are generated by the native file watcher.
					NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName,
					IncludeSubdirectories = true,
					InternalBufferSize = 32768
				};

				watcher.Changed += OnFileChanged;
				watcher.Created += OnFileCreated;
				watcher.Deleted += OnFileDeleted;
				watcher.Renamed += OnFileRenamed;
				watcher.Error += OnFileWatcherError;
			}

			public FilePath Path { get; }

			public bool EnableRaisingEvents {
				get { return watcher.EnableRaisingEvents; }
				set { watcher.EnableRaisingEvents = value; }
			}

			public void Dispose ()
			{
				watcher.Changed -= OnFileChanged;
				watcher.Created -= OnFileCreated;
				watcher.Deleted -= OnFileDeleted;
				watcher.Renamed -= OnFileRenamed;
				watcher.Error -= OnFileWatcherError;
				watcher.Dispose ();
			}

			void OnFileChanged (object sender, FileSystemEventArgs e)
			{
				FileService.NotifyFileChanged (e.FullPath);
			}

			void OnFileCreated (object sender, FileSystemEventArgs e)
			{
				FileService.NotifyFileCreated (e.FullPath);

				// The native file watcher sometimes generates a single Created event for a file when it is renamed
				// from a non-monitored directory to a monitored directory. So this is turned into a Changed
				// event so the file will be reloaded.
				FileService.NotifyFileChanged (e.FullPath);
			}

			void OnFileDeleted (object sender, FileSystemEventArgs e)
			{
				// The native file watcher sometimes generates a Changed, Created and Deleted event in
				// that order from a single native file event. So check the file has been deleted before raising
				// a FileRemoved event.
				if (!File.Exists (e.FullPath) && !Directory.Exists (e.FullPath))
					FileService.NotifyFileRemoved (e.FullPath);
			}

			/// <summary>
			/// File rename events have various problems.
			/// 1. They are sometimes raised out of order.
			/// 2. Sometimes the rename information is incorrect with the wrong file names being used.
			/// 3. Some applications use a rename to update the original file so these are turned into
			/// a change event and a remove event.
			/// </summary>
			void OnFileRenamed (object sender, RenamedEventArgs e)
			{
				FileService.NotifyFileRenamedExternally (e.OldFullPath, e.FullPath);
				// Some applications, such as TextEdit.app, will create a backup file
				// and then rename that to the original file. This results in no file
				// change event being generated by the file watcher. To handle this
				// a rename is treated as a file change for the destination file.
				FileService.NotifyFileChanged (e.FullPath);

				// Deleting a file with Finder will move the file to the ~/.Trashes
				// folder. To handle this a remove event is fired for the source
				// file being renamed. Also handle file events being received out of
				// order on saving a file in TextEdit.app - with a rename event of
				// the original file to the temp file being the last event even though
				// the original file still exists.
				if (File.Exists (e.OldFullPath))
					FileService.NotifyFileChanged (e.OldFullPath);
				else
					FileService.NotifyFileRemoved (e.OldFullPath);
			}

			void OnFileWatcherError (object sender, ErrorEventArgs e)
			{
				LoggingService.LogError ("FileService.FileWatcher error", e.GetException ());
			}
		}
	}
}
